"""
this module is auto generated by `~/blueprint/src/template_generator/
widgets/widget_oriented_props.py`.
please do not edit this file directly.

for developer: this module shouldn't be imported by `qmlpy.properties
.group_types.sheet` directly, although it is in the same folder.
otherwise it will cause a circular import error.

the prefix 'Ps' means 'PropSheet' derives from `qmlpy.properties
.group_types.sheet.PropSheet`.
the prefix 'P' means 'Property' derives from `qmlpy.properties.core
.prop`.
"""
from typing import cast

# see `qmlpy.widgets.namespace.__qml_namespace__`
from __qml_namespace__ import P


class PsQtObject(P.PropSheet):
    object_name = cast(str, "prop:String")


class PsItem(PsQtObject):
    active_focus = cast(bool, "prop:Bool")
    active_focus_on_tab = cast(bool, "prop:Bool")
    anchors = "prop:Anchors"
    antialiasing = cast(bool, "prop:Bool")
    baseline_offset = cast(int, "prop:Int")
    children = cast(list, "prop:List")
    children_rect = "prop:ChildrenRect"
    clip = cast(bool, "prop:Bool")
    containment_mask = "prop:Property"
    data = cast(list, "prop:List")
    enabled = cast(bool, "prop:Bool")
    focus = cast(bool, "prop:Bool")
    height = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    opacity = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transform = cast(list, "prop:List")
    transform_origin = cast(int, "prop:Enumeration")
    transitions = cast(list, "prop:List")
    visible = cast(bool, "prop:Bool")
    visible_children = cast(list, "prop:List")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")


class PsNode(P.PropSheet):
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsControl(PsItem):
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    content_item = "prop:Property"
    focus_policy = cast(int, "prop:Enumeration")
    focus_reason = cast(int, "prop:Enumeration")
    font = "prop:Font"
    horizontal_padding = cast(float, "prop:Real")
    hover_enabled = cast(bool, "prop:Bool")
    hovered = cast(bool, "prop:Bool")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    mirrored = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    right_inset = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    vertical_padding = cast(float, "prop:Real")
    visual_focus = cast(bool, "prop:Bool")
    wheel_enabled = cast(bool, "prop:Bool")


class PsAnimation(P.PropSheet):
    always_run_to_end = cast(bool, "prop:Bool")
    loops = cast(int, "prop:Int")
    paused = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")


class PsRenderState(PsNode):
    pass


class PsFrameGraphNode(PsNode):
    pass


class PsAbstractSeries(P.PropSheet):
    name_ = cast(str, "prop:String")
    opacity = cast(float, "prop:Real")
    type = cast(int, "prop:Enumeration")
    use_open_gl = cast(bool, "prop:Bool")
    visible = cast(bool, "prop:Bool")


class PsAbstractButton(PsControl):
    action = "prop:Property"
    auto_exclusive = cast(bool, "prop:Bool")
    auto_repeat = cast(bool, "prop:Bool")
    auto_repeat_delay = cast(int, "prop:Int")
    auto_repeat_interval = cast(int, "prop:Int")
    checkable = cast(bool, "prop:Bool")
    checked = cast(bool, "prop:Bool")
    display = cast(int, "prop:Enumeration")
    down = cast(bool, "prop:Bool")
    icon = "prop:Icon"
    implicit_indicator_height = cast(float, "prop:Real")
    implicit_indicator_width = cast(float, "prop:Real")
    indicator = "prop:Property"
    press_x = cast(float, "prop:Real")
    press_y = cast(float, "prop:Real")
    pressed = cast(bool, "prop:Bool")
    text = cast(str, "prop:String")


class PsBaseKey(PsItem):
    active = cast(bool, "prop:Bool")
    alternative_keys = "prop:Var"
    display_text = cast(str, "prop:String")
    effective_alternative_keys = "prop:Var"
    effective_alternative_keys_highlight_index = cast(int, "prop:Int")
    function_key = cast(bool, "prop:Bool")
    highlighted = cast(bool, "prop:Bool")
    key = cast(int, "prop:Int")
    key_panel_delegate = "prop:Property"
    key_type = cast(int, "prop:Int")
    no_key_event = cast(bool, "prop:Bool")
    no_modifier = cast(bool, "prop:Bool")
    pressed = cast(bool, "prop:Bool")
    repeat = cast(bool, "prop:Bool")
    show_preview = cast(bool, "prop:Bool")
    small_text = cast(str, "prop:String")
    small_text_visible = cast(bool, "prop:Bool")
    sound_effect = cast(str, "prop:Url")
    text = cast(str, "prop:String")
    uppercased = cast(bool, "prop:Bool")
    weight = cast(float, "prop:Real")


class PsMaterial(P.PropSheet):
    effect = "prop:Property"
    parameters = cast(list, "prop:List")
    cull_mode = cast(int, "prop:Enumeration")
    light_probe = "prop:Property"
    lightmap_indirect = "prop:Property"
    lightmap_radiosity = "prop:Property"
    lightmap_shadow = "prop:Property"
    children = cast(list, "prop:List")
    data = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsComponent3D(PsNode):
    is_shareable = cast(bool, "prop:Bool")


class PsObject3D(PsQtObject):
    children = cast(list, "prop:List")
    data = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")


class PsPointerHandler(P.PropSheet):
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    target = "prop:Property"


class PsPointerDeviceHandler(PsPointerHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    target = "prop:Property"


class PsPropertyAnimation(PsAnimation):
    duration = cast(int, "prop:Int")
    easing = "prop:Easing"
    exclude = cast(list, "prop:List")
    from_ = "prop:Property"
    properties_ = cast(str, "prop:String")
    property = cast(str, "prop:String")
    target = "prop:Property"
    targets = cast(list, "prop:List")
    to = "prop:Property"


class PsAffector(P.PropSheet):
    acceleration = "prop:Property"
    enabled = cast(bool, "prop:Bool")
    groups = cast(list, "prop:List")
    once = cast(bool, "prop:Bool")
    position = "prop:Property"
    relative = cast(bool, "prop:Bool")
    shape = "prop:Property"
    system = "prop:Property"
    velocity = "prop:Property"
    when_colliding_with = cast(list, "prop:List")


class PsKey(PsBaseKey):
    pass


class PsAbstractBarSeries(PsAbstractSeries):
    axis_x = "prop:Property"
    axis_x_top = "prop:Property"
    axis_y = "prop:Property"
    axis_y_right = "prop:Property"
    bar_width = cast(float, "prop:Real")
    count = cast(int, "prop:Int")
    labels_angle = cast(float, "prop:Real")
    labels_format = cast(str, "prop:String")
    labels_position = cast(int, "prop:Enumeration")
    labels_precision = cast(float, "prop:Real")
    labels_visible = cast(bool, "prop:Bool")


class PsAnimator(PsAnimation):
    duration = cast(int, "prop:Int")
    easing = "prop:Easing"
    from_ = cast(float, "prop:Real")
    target = "prop:Property"
    to = cast(float, "prop:Real")


class PsAbstractAxis(P.PropSheet):
    alignment = "prop:Property"
    color = cast(str, "prop:Color")
    grid_line_color = cast(str, "prop:Color")
    grid_visible = cast(bool, "prop:Bool")
    labels_angle = cast(int, "prop:Int")
    labels_color = cast(str, "prop:Color")
    labels_font = "prop:Font"
    labels_visible = cast(bool, "prop:Bool")
    line_visible = cast(bool, "prop:Bool")
    minor_grid_line_color = cast(str, "prop:Color")
    minor_grid_visible = cast(bool, "prop:Bool")
    orientation = "prop:Property"
    reverse = "prop:Property"
    shades_border_color = cast(str, "prop:Color")
    shades_color = cast(str, "prop:Color")
    shades_visible = cast(bool, "prop:Bool")
    title_font = "prop:Font"
    title_text = cast(str, "prop:String")
    title_visible = cast(bool, "prop:Bool")
    visible = cast(bool, "prop:Bool")


class PsDialog(P.PropSheet):
    footer = "prop:Property"
    header = "prop:Property"
    implicit_footer_height = cast(float, "prop:Real")
    implicit_footer_width = cast(float, "prop:Real")
    implicit_header_height = cast(float, "prop:Real")
    implicit_header_width = cast(float, "prop:Real")
    result = cast(int, "prop:Int")
    standard_buttons = cast(int, "prop:Enumeration")
    title = cast(str, "prop:String")
    active_focus = cast(bool, "prop:Bool")
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_margin = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    clip = cast(bool, "prop:Bool")
    close_policy = cast(int, "prop:Enumeration")
    content_children = cast(list, "prop:List")
    content_data = cast(list, "prop:List")
    content_height = cast(float, "prop:Real")
    content_item = "prop:Property"
    content_width = cast(float, "prop:Real")
    dim = cast(bool, "prop:Bool")
    enabled = cast(bool, "prop:Bool")
    enter = "prop:Property"
    exit = "prop:Property"
    focus = cast(bool, "prop:Bool")
    font = "prop:Font"
    height = cast(float, "prop:Real")
    horizontal_padding = cast(float, "prop:Real")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_margin = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    margins = cast(float, "prop:Real")
    mirrored = cast(bool, "prop:Bool")
    modal = cast(bool, "prop:Bool")
    opacity = cast(float, "prop:Real")
    opened = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    right_inset = cast(float, "prop:Real")
    right_margin = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_margin = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    transform_origin = cast(int, "prop:Enumeration")
    vertical_padding = cast(float, "prop:Real")
    visible = cast(bool, "prop:Bool")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    object_name = cast(str, "prop:String")
    data = cast(list, "prop:List")
    flags = "prop:Property"
    modality = "prop:Property"
    parent_window = "prop:Property"


class PsPane(PsControl):
    content_children = cast(list, "prop:List")
    content_data = cast(list, "prop:List")
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")


class PsFlickable(PsItem):
    at_x_beginning = cast(bool, "prop:Bool")
    at_x_end = cast(bool, "prop:Bool")
    at_y_beginning = cast(bool, "prop:Bool")
    at_y_end = cast(bool, "prop:Bool")
    bottom_margin = cast(float, "prop:Real")
    bounds_behavior = cast(int, "prop:Enumeration")
    bounds_movement = cast(int, "prop:Enumeration")
    content_height = cast(float, "prop:Real")
    content_item = "prop:Property"
    content_width = cast(float, "prop:Real")
    content_x = cast(float, "prop:Real")
    content_y = cast(float, "prop:Real")
    dragging = cast(bool, "prop:Bool")
    dragging_horizontally = cast(bool, "prop:Bool")
    dragging_vertically = cast(bool, "prop:Bool")
    flick_deceleration = cast(float, "prop:Real")
    flickable_direction = cast(int, "prop:Enumeration")
    flicking = cast(bool, "prop:Bool")
    flicking_horizontally = cast(bool, "prop:Bool")
    flicking_vertically = cast(bool, "prop:Bool")
    horizontal_overshoot = cast(float, "prop:Real")
    horizontal_velocity = cast(float, "prop:Real")
    interactive = cast(bool, "prop:Bool")
    left_margin = cast(float, "prop:Real")
    maximum_flick_velocity = cast(float, "prop:Real")
    moving = cast(bool, "prop:Bool")
    moving_horizontally = cast(bool, "prop:Bool")
    moving_vertically = cast(bool, "prop:Bool")
    origin_x = cast(float, "prop:Real")
    origin_y = cast(float, "prop:Real")
    pixel_aligned = cast(bool, "prop:Bool")
    press_delay = cast(int, "prop:Int")
    rebound = "prop:Property"
    right_margin = cast(float, "prop:Real")
    synchronous_drag = cast(bool, "prop:Bool")
    top_margin = cast(float, "prop:Real")
    vertical_overshoot = cast(float, "prop:Real")
    vertical_velocity = cast(float, "prop:Real")
    visible_area = "prop:VisibleArea"


class PsCamera(P.PropSheet):
    aspect_ratio = cast(float, "prop:Real")
    bottom = cast(float, "prop:Real")
    exposure = cast(float, "prop:Real")
    far_plane = cast(float, "prop:Real")
    field_of_view = cast(float, "prop:Real")
    left = cast(float, "prop:Real")
    near_plane = cast(float, "prop:Real")
    position = "prop:Vector3D"
    projection_matrix = "prop:Matrix4x4"
    projection_type = cast(int, "prop:Enumeration")
    right = "prop:Vector3D"
    top = cast(float, "prop:Real")
    up_vector = "prop:Vector3D"
    view_center = "prop:Vector3D"
    view_vector = "prop:Vector3D"
    components = cast(list, "prop:List")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")
    frustum_culling_enabled = cast(bool, "prop:Bool")


class PsEntity(PsNode):
    components = cast(list, "prop:List")


class PsContainer(PsControl):
    content_children = cast(list, "prop:List")
    content_data = cast(list, "prop:List")
    content_height = cast(float, "prop:Real")
    content_model = "prop:Property"
    content_width = cast(float, "prop:Real")
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_item = "prop:Property"


class PsItemDelegate(PsAbstractButton):
    highlighted = cast(bool, "prop:Bool")


class PsGradient(P.PropSheet):
    orientation = cast(int, "prop:Enumeration")
    stops = cast(list, "prop:List")


class PsSinglePointHandler(PsPointerDeviceHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    point = "prop:Property"
    target = "prop:Property"


class PsDirection(P.PropSheet):
    pass


class PsAffector3D(PsNode):
    enabled = cast(bool, "prop:Bool")
    particles = cast(list, "prop:List")
    system = "prop:Property"


class PsAbstractAnimation(P.PropSheet):
    animation_name = cast(str, "prop:String")
    animation_type = cast(int, "prop:Enumeration")
    duration = cast(float, "prop:Real")
    position = cast(float, "prop:Real")


class PsXYSeries(PsAbstractSeries):
    axis_angular = "prop:Property"
    axis_radial = "prop:Property"
    axis_x = "prop:Property"
    axis_x_top = "prop:Property"
    axis_y = "prop:Property"
    axis_y_right = "prop:Property"
    color = cast(str, "prop:Color")
    point_labels_clipping = cast(bool, "prop:Bool")
    point_labels_color = "prop:Font"
    point_labels_font = "prop:Font"
    point_labels_format = cast(str, "prop:String")
    point_labels_visible = cast(bool, "prop:Bool")
    points_visible = cast(bool, "prop:Bool")


class PsNumberAnimation(PsPropertyAnimation):
    from_ = cast(float, "prop:Real")
    to = cast(float, "prop:Real")


class PsShape(PsItem):
    asynchronous = cast(bool, "prop:Bool")
    contains_mode = cast(int, "prop:Enumeration")
    data = cast(list, "prop:List")
    renderer_type = cast(int, "prop:Enumeration")
    status = cast(int, "prop:Enumeration")
    vendor_extensions_enabled = cast(bool, "prop:Bool")


class PsShapeGradient(PsGradient):
    spread = cast(int, "prop:Enumeration")


class PsAbstractClipAnimator(P.PropSheet):
    channel_mapper = "prop:Property"
    clock = "prop:Property"
    loops = cast(int, "prop:Int")
    normalized_time = cast(float, "prop:Real")
    running = cast(bool, "prop:Bool")


class PsButton(PsAbstractButton):
    flat = cast(bool, "prop:Bool")
    highlighted = cast(bool, "prop:Bool")


class PsPopup(PsQtObject):
    active_focus = cast(bool, "prop:Bool")
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_margin = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    clip = cast(bool, "prop:Bool")
    close_policy = cast(int, "prop:Enumeration")
    content_children = cast(list, "prop:List")
    content_data = cast(list, "prop:List")
    content_height = cast(float, "prop:Real")
    content_item = "prop:Property"
    content_width = cast(float, "prop:Real")
    dim = cast(bool, "prop:Bool")
    enabled = cast(bool, "prop:Bool")
    enter = "prop:Property"
    exit = "prop:Property"
    focus = cast(bool, "prop:Bool")
    font = "prop:Font"
    height = cast(float, "prop:Real")
    horizontal_padding = cast(float, "prop:Real")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_margin = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    margins = cast(float, "prop:Real")
    mirrored = cast(bool, "prop:Bool")
    modal = cast(bool, "prop:Bool")
    opacity = cast(float, "prop:Real")
    opened = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    right_inset = cast(float, "prop:Real")
    right_margin = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_margin = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    transform_origin = cast(int, "prop:Enumeration")
    vertical_padding = cast(float, "prop:Real")
    visible = cast(bool, "prop:Bool")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")


class PsMultiPointHandler(PsPointerDeviceHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    centroid = "prop:Property"
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    maximum_point_count = cast(int, "prop:Int")
    minimum_point_count = cast(int, "prop:Int")
    parent = "prop:Property"
    target = "prop:Property"


class PsTableView(PsFlickable):
    bottom_row = cast(int, "prop:Int")
    column_spacing = cast(float, "prop:Real")
    column_width_provider = "prop:Var"
    columns = cast(int, "prop:Int")
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")
    delegate = "prop:Property"
    left_column = cast(int, "prop:Int")
    model = "prop:Property"
    reuse_items = cast(bool, "prop:Bool")
    right_column = cast(int, "prop:Int")
    row_height_provider = "prop:Var"
    row_spacing = cast(float, "prop:Real")
    rows = cast(int, "prop:Int")
    sync_direction = "prop:Property"
    sync_view = "prop:Property"
    top_row = cast(int, "prop:Int")


class PsParticlePainter(PsItem):
    groups = cast(list, "prop:List")
    system = "prop:Property"


class PsColumnLayout(PsItem):
    layout_direction = cast(int, "prop:Enumeration")
    spacing = cast(float, "prop:Real")


class PsDirection3D(PsQtObject):
    pass


class PsParticle3D(PsObject3D):
    AlignMode = cast(int, "prop:Enumeration")
    FadeType = cast(int, "prop:Enumeration")
    align_mode = "prop:Property"
    align_target_position = "prop:Vector3D"
    color = cast(str, "prop:Color")
    color_variation = "prop:Vector4D"
    fade_in_duration = cast(int, "prop:Int")
    fade_in_effect = "prop:Property"
    fade_out_duration = cast(int, "prop:Int")
    fade_out_effect = "prop:Property"
    max_amount = cast(int, "prop:Int")
    system = "prop:Property"
    unified_color_variation = cast(bool, "prop:Bool")


class PsCommand(P.PropSheet):
    pass


class PsInstancing(PsObject3D):
    has_transparency = cast(bool, "prop:Bool")
    instance_count_override = cast(int, "prop:Int")


class PsAbstractTextureImage(PsNode):
    face = cast(int, "prop:Enumeration")
    layer = cast(int, "prop:Int")
    mip_level = cast(int, "prop:Int")


class PsAbstractSkeleton(PsNode):
    pass


class PsBoundingVolume(P.PropSheet):
    implicit_max_point = "prop:Vector3D"
    implicit_min_point = "prop:Vector3D"
    implicit_points_valid = cast(bool, "prop:Bool")
    max_point = "prop:Vector3D"
    min_point = "prop:Vector3D"
    view = "prop:Property"


class PsGeometry(P.PropSheet):
    attributes = cast(list, "prop:List")
    bounding_volume_position_attribute = "prop:Property"
    max_extent = "prop:Vector3D"
    min_extent = "prop:Vector3D"
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsChartView(P.PropSheet):
    animation_duration = cast(int, "prop:Int")
    animation_easing_curve = "prop:Easing"
    animation_options = cast(int, "prop:Enumeration")
    axes = cast(list, "prop:List")
    background_color = cast(str, "prop:Color")
    background_roundness = cast(float, "prop:Real")
    count = cast(int, "prop:Int")
    drop_shadow_enabled = cast(bool, "prop:Bool")
    legend = "prop:Property"
    locale = "prop:Property"
    localize_numbers = cast(bool, "prop:Bool")
    margins = "prop:Property"
    plot_area = "prop:Rect"
    plot_area_color = cast(str, "prop:Color")
    theme = cast(int, "prop:Enumeration")
    title = cast(str, "prop:String")
    title_color = cast(str, "prop:Color")
    title_font = "prop:Font"


class PsFrame(PsPane):
    pass


class PsCanvas(PsItem):
    available = cast(bool, "prop:Bool")
    canvas_size = "prop:Size"
    context = "prop:Property"
    context_type = cast(str, "prop:String")
    render_strategy = cast(int, "prop:Enumeration")
    render_target = cast(int, "prop:Enumeration")


class PsImage(PsItem):
    asynchronous = cast(bool, "prop:Bool")
    auto_transform = cast(bool, "prop:Bool")
    cache = cast(bool, "prop:Bool")
    current_frame = cast(int, "prop:Int")
    fill_mode = cast(int, "prop:Enumeration")
    frame_count = cast(int, "prop:Int")
    horizontal_alignment = cast(int, "prop:Enumeration")
    mipmap = cast(bool, "prop:Bool")
    mirror = cast(bool, "prop:Bool")
    painted_height = cast(float, "prop:Real")
    painted_width = cast(float, "prop:Real")
    progress = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    source = cast(str, "prop:Url")
    source_clip_rect = "prop:Rect"
    source_size = "prop:Size"
    status = cast(int, "prop:Enumeration")
    vertical_alignment = cast(int, "prop:Enumeration")


class PsLoader(PsItem):
    active = cast(bool, "prop:Bool")
    asynchronous = cast(bool, "prop:Bool")
    item = "prop:Property"
    progress = cast(float, "prop:Real")
    source = cast(str, "prop:Url")
    source_component = "prop:Property"
    status = cast(int, "prop:Enumeration")


class PsMultiPointTouchArea(PsItem):
    maximum_touch_points = cast(int, "prop:Int")
    minimum_touch_points = cast(int, "prop:Int")
    mouse_enabled = cast(bool, "prop:Bool")
    touch_points = cast(list, "prop:List")


class PsPath(P.PropSheet):
    closed = cast(bool, "prop:Bool")
    path_elements = cast(list, "prop:List")
    scale = "prop:Size"
    start_x = cast(float, "prop:Real")
    start_y = cast(float, "prop:Real")


class PsRectangle(PsItem):
    antialiasing = cast(bool, "prop:Bool")
    border = "prop:Border"
    color = cast(str, "prop:Color")
    gradient = "prop:Property"
    radius = cast(float, "prop:Real")


class PsText(PsItem):
    advance = "prop:Size"
    antialiasing = cast(bool, "prop:Bool")
    base_url = cast(str, "prop:Url")
    bottom_padding = cast(float, "prop:Real")
    clip = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")
    effective_horizontal_alignment = cast(int, "prop:Enumeration")
    elide = cast(int, "prop:Enumeration")
    font_size_mode = cast(int, "prop:Enumeration")
    horizontal_alignment = cast(int, "prop:Enumeration")
    hovered_link = cast(str, "prop:String")
    left_padding = cast(float, "prop:Real")
    line_count = cast(int, "prop:Int")
    line_height = cast(float, "prop:Real")
    line_height_mode = cast(int, "prop:Enumeration")
    link_color = cast(str, "prop:Color")
    maximum_line_count = cast(int, "prop:Int")
    minimum_pixel_size = cast(int, "prop:Int")
    minimum_point_size = cast(int, "prop:Int")
    padding = cast(float, "prop:Real")
    render_type = cast(int, "prop:Enumeration")
    render_type_quality = cast(int, "prop:Int")
    right_padding = cast(float, "prop:Real")
    style = cast(int, "prop:Enumeration")
    style_color = cast(str, "prop:Color")
    text = cast(str, "prop:String")
    text_format = cast(int, "prop:Enumeration")
    top_padding = cast(float, "prop:Real")
    truncated = cast(bool, "prop:Bool")
    vertical_alignment = cast(int, "prop:Enumeration")
    wrap_mode = cast(int, "prop:Enumeration")


class PsTextEdit(PsItem):
    active_focus_on_press = cast(bool, "prop:Bool")
    base_url = cast(str, "prop:Url")
    bottom_padding = cast(float, "prop:Real")
    can_paste = cast(bool, "prop:Bool")
    can_redo = cast(bool, "prop:Bool")
    can_undo = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")
    cursor_delegate = "prop:Property"
    cursor_position = cast(int, "prop:Int")
    cursor_rectangle = "prop:Property"
    cursor_visible = cast(bool, "prop:Bool")
    effective_horizontal_alignment = cast(int, "prop:Enumeration")
    horizontal_alignment = cast(int, "prop:Enumeration")
    hovered_link = cast(str, "prop:String")
    input_method_composing = cast(bool, "prop:Bool")
    input_method_hints = cast(int, "prop:Enumeration")
    left_padding = cast(float, "prop:Real")
    length = cast(int, "prop:Int")
    line_count = cast(int, "prop:Int")
    mouse_selection_mode = cast(int, "prop:Enumeration")
    overwrite_mode = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    persistent_selection = cast(bool, "prop:Bool")
    preedit_text = cast(str, "prop:String")
    read_only = cast(bool, "prop:Bool")
    render_type = cast(int, "prop:Enumeration")
    right_padding = cast(float, "prop:Real")
    select_by_keyboard = cast(bool, "prop:Bool")
    select_by_mouse = cast(bool, "prop:Bool")
    selected_text = cast(str, "prop:String")
    selected_text_color = cast(str, "prop:Color")
    selection_color = cast(str, "prop:Color")
    selection_end = cast(int, "prop:Int")
    selection_start = cast(int, "prop:Int")
    tab_stop_distance = cast(float, "prop:Real")
    text = cast(str, "prop:String")
    text_document = "prop:Property"
    text_format = cast(int, "prop:Enumeration")
    text_margin = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    vertical_alignment = cast(int, "prop:Enumeration")
    wrap_mode = cast(int, "prop:Enumeration")


class PsTextInput(PsItem):
    acceptable_input = cast(bool, "prop:Bool")
    active_focus_on_press = cast(bool, "prop:Bool")
    auto_scroll = cast(bool, "prop:Bool")
    bottom_padding = cast(float, "prop:Real")
    can_paste = cast(bool, "prop:Bool")
    can_redo = cast(bool, "prop:Bool")
    can_undo = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")
    cursor_delegate = "prop:Property"
    cursor_position = cast(int, "prop:Int")
    cursor_rectangle = "prop:Property"
    cursor_visible = cast(bool, "prop:Bool")
    display_text = cast(str, "prop:String")
    echo_mode = cast(int, "prop:Enumeration")
    effective_horizontal_alignment = cast(int, "prop:Enumeration")
    horizontal_alignment = cast(int, "prop:Enumeration")
    input_mask = cast(str, "prop:String")
    input_method_composing = cast(bool, "prop:Bool")
    input_method_hints = cast(int, "prop:Enumeration")
    left_padding = cast(float, "prop:Real")
    length = cast(int, "prop:Int")
    maximum_length = cast(int, "prop:Int")
    mouse_selection_mode = cast(int, "prop:Enumeration")
    overwrite_mode = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    password_character = cast(str, "prop:String")
    password_mask_delay = cast(int, "prop:Int")
    persistent_selection = cast(bool, "prop:Bool")
    preedit_text = cast(str, "prop:String")
    read_only = cast(bool, "prop:Bool")
    render_type = cast(int, "prop:Enumeration")
    right_padding = cast(float, "prop:Real")
    select_by_mouse = cast(bool, "prop:Bool")
    selected_text = cast(str, "prop:String")
    selected_text_color = cast(str, "prop:Color")
    selection_color = cast(str, "prop:Color")
    selection_end = cast(int, "prop:Int")
    selection_start = cast(int, "prop:Int")
    text = cast(str, "prop:String")
    top_padding = cast(float, "prop:Real")
    validator = "prop:Property"
    vertical_alignment = cast(int, "prop:Enumeration")
    wrap_mode = cast(int, "prop:Enumeration")


class PsWindow(P.PropSheet):
    active = cast(bool, "prop:Bool")
    active_focus_item = "prop:Property"
    color = cast(str, "prop:Color")
    content_item = "prop:Property"
    content_orientation = "prop:Property"
    data = cast(list, "prop:List")
    flags = "prop:Property"
    height = cast(int, "prop:Int")
    maximum_height = cast(int, "prop:Int")
    maximum_width = cast(int, "prop:Int")
    minimum_height = cast(int, "prop:Int")
    minimum_width = cast(int, "prop:Int")
    modality = "prop:Property"
    opacity = cast(float, "prop:Real")
    palette = "prop:Property"
    screen = "prop:Property"
    title = cast(str, "prop:String")
    transient_parent = "prop:Property"
    visibility = "prop:Property"
    visible = cast(bool, "prop:Bool")
    width = cast(int, "prop:Int")
    x = cast(int, "prop:Int")
    y = cast(int, "prop:Int")


class PsRowLayout(PsItem):
    layout_direction = cast(int, "prop:Enumeration")
    spacing = cast(float, "prop:Real")


class PsParticleEmitter3D(PsNode):
    depth_bias = cast(float, "prop:Real")
    emit_bursts = cast(list, "prop:List")
    emit_rate = cast(float, "prop:Real")
    enabled = cast(bool, "prop:Bool")
    life_span = cast(int, "prop:Int")
    life_span_variation = cast(int, "prop:Int")
    particle = "prop:Property"
    particle_end_scale = cast(float, "prop:Real")
    particle_rotation = "prop:Vector3D"
    particle_rotation_variation = "prop:Vector3D"
    particle_rotation_velocity = "prop:Vector3D"
    particle_rotation_velocity_variation = "prop:Vector3D"
    particle_scale = cast(float, "prop:Real")
    particle_scale_variation = cast(float, "prop:Real")
    shape = "prop:Property"
    system = "prop:Property"
    velocity = "prop:Property"


class PsPerspectiveCamera(PsCamera):
    FieldOfViewOrientation = cast(int, "prop:Enumeration")
    clip_far = cast(float, "prop:Real")
    clip_near = cast(float, "prop:Real")
    field_of_view = cast(float, "prop:Real")
    field_of_view_orientation = cast(int, "prop:Enumeration")


class PsComponent(P.PropSheet):
    progress = cast(float, "prop:Real")
    status = cast(int, "prop:Enumeration")
    url = cast(str, "prop:Url")


class PsWaylandQuickItem(P.PropSheet):
    buffer_locked = cast(bool, "prop:Bool")
    compositor = "prop:Property"
    focus_on_click = cast(bool, "prop:Bool")
    origin = "prop:Property"
    paint_enabled = cast(bool, "prop:Bool")
    subsurface_handler = "prop:Property"
    surface = "prop:Property"
    touch_events_enabled = cast(bool, "prop:Bool")


class PsAbstractActionInput(P.PropSheet):
    pass


class PsAbstractAxisInput(P.PropSheet):
    source_device = "prop:Property"


class PsAbstractPhysicalDevice(P.PropSheet):
    pass


class PsAction(P.PropSheet):
    action = cast(bool, "prop:Bool")
    inputs = cast(list, "prop:List")
    checkable = cast(bool, "prop:Bool")
    checked = cast(bool, "prop:Bool")
    enabled = cast(bool, "prop:Bool")
    icon = "prop:Icon"
    shortcut = "prop:Property"
    text = cast(str, "prop:String")
    object_name = cast(str, "prop:String")


class PsActionInput(P.PropSheet):
    buttons = cast(list, "prop:List")
    source_device = "prop:Property"


class PsAnalogAxisInput(P.PropSheet):
    axis = cast(int, "prop:Int")


class PsAxis(P.PropSheet):
    buttons = "prop:Property"
    inputs = cast(list, "prop:List")
    scale = cast(float, "prop:Real")
    value = cast(int, "prop:Int")
    velocity = cast(float, "prop:Real")


class PsAxisAccumulator(P.PropSheet):
    source_axis = "prop:Axis"
    source_axis_type = "prop:Property"
    value = cast(float, "prop:Real")


class PsAxisSetting(P.PropSheet):
    axes = cast(list, "prop:List")
    axis = "prop:Property"
    dead_zone_radius = cast(float, "prop:Number")
    smooth = cast(bool, "prop:Bool")


class PsButtonAxisInput(P.PropSheet):
    acceleration = cast(float, "prop:Real")
    buttons = cast(list, "prop:List")
    deceleration = cast(list, "prop:List")
    scale = cast(float, "prop:Real")


class PsInputChord(P.PropSheet):
    chords = cast(list, "prop:List")
    timeout = cast(int, "prop:Int")


class PsInputSequence(P.PropSheet):
    button_interval = cast(int, "prop:Int")
    sequences = cast(list, "prop:List")
    timeout = cast(int, "prop:Int")


class PsInputSettings(PsComponent3D):
    event_source = "prop:Property"


class PsKeyboardDevice(PsNode):
    active_input = "prop:Property"


class PsKeyboardHandler(PsComponent3D):
    focus = cast(bool, "prop:Bool")
    source_device = "prop:Property"


class PsKeyEvent(P.PropSheet):
    accepted = cast(bool, "prop:Bool")
    count = cast(int, "prop:Int")
    is_auto_repeat = cast(bool, "prop:Bool")
    key = cast(int, "prop:Int")
    modifiers = cast(int, "prop:Int")
    native_scan_code = "prop:Property"
    text = cast(str, "prop:String")


class PsLogicalDevice(P.PropSheet):
    actions = cast(list, "prop:List")
    axis = cast(list, "prop:List")


class PsMouseDevice(P.PropSheet):
    sensitivity = cast(float, "prop:Real")
    update_axes_continuously = cast(bool, "prop:Bool")


class PsMouseEvent(P.PropSheet):
    accepted = cast(bool, "prop:Bool")
    button = cast(int, "prop:Enumeration")
    buttons = cast(int, "prop:Int")
    flags = cast(int, "prop:Int")
    modifiers = cast(int, "prop:Int")
    source = cast(int, "prop:Int")
    was_held = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsMouseHandler(P.PropSheet):
    contains_mouse = cast(bool, "prop:Bool")
    source_device = "prop:Property"


class PsWheelEvent(P.PropSheet):
    accepted = cast(bool, "prop:Bool")
    angle_delta = "prop:Point"
    buttons = cast(int, "prop:Int")
    inverted = cast(bool, "prop:Bool")
    modifiers = cast(int, "prop:Int")
    pixel_delta = "prop:Point"
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsAbstractClipBlendNode(P.PropSheet):
    pass


class PsAdditiveClipBlend(P.PropSheet):
    additive_clip = "prop:Property"
    additive_factor = cast(float, "prop:Real")
    base_clip = "prop:Property"


class PsAnimationController(P.PropSheet):
    animation = "prop:Property"
    progress = cast(float, "prop:Real")


class PsAnimationGroup(P.PropSheet):
    animations = cast(list, "prop:List")
    duration = cast(float, "prop:Real")
    name_ = cast(str, "prop:String")
    position = cast(float, "prop:Real")


class PsBlendedClipAnimator(PsAbstractClipAnimator):
    blend_tree = "prop:Property"


class PsClipAnimator(PsAbstractClipAnimator):
    clip = "prop:Var"


class PsClipBlendValue(P.PropSheet):
    clip = "prop:Property"


class PsKeyframeAnimation(PsAbstractAnimation):
    easing = "prop:Property"
    end_mode = cast(int, "prop:Enumeration")
    frame_positions = cast(list, "prop:List")
    keyframes = cast(list, "prop:List")
    start_mode = cast(int, "prop:Enumeration")
    target = "prop:Property"
    target_name = cast(str, "prop:String")


class PsLerpClipBlend(P.PropSheet):
    blend_factor = cast(float, "prop:Real")
    end_clip = "prop:Property"
    start_clip = "prop:Property"


class PsMorphingAnimation(PsAbstractAnimation):
    easing = "prop:Property"
    interpolator = cast(float, "prop:Real")
    method = cast(int, "prop:Enumeration")
    morph_targets = cast(list, "prop:List")
    target = "prop:Property"
    target_name = cast(str, "prop:String")
    target_positions = cast(list, "prop:List")


class PsMorphTarget(P.PropSheet):
    attribute_names = cast(list, "prop:List")
    attributes = cast(int, "prop:Enumeration")
    object_name = cast(str, "prop:String")
    weight = cast(float, "prop:Number")


class PsVertexBlendAnimation(PsAbstractAnimation):
    interpolator = cast(float, "prop:Real")
    morph_targets = cast(list, "prop:List")
    target = "prop:Property"
    target_name = cast(str, "prop:String")
    target_positions = cast(list, "prop:List")


class PsAbstractRayCaster(P.PropSheet):
    filter_mode = cast(int, "prop:Enumeration")
    hits = "prop:Property"
    run_mode = cast(int, "prop:Enumeration")


class PsAbstractTexture(P.PropSheet):
    handle = "prop:Var"
    handle_type = cast(int, "prop:Enumeration")


class PsAlphaCoverage(PsRenderState):
    pass


class PsAlphaTest(PsRenderState):
    alpha_function = cast(int, "prop:Enumeration")
    reference_value = cast(float, "prop:Real")


class PsBlendEquation(PsRenderState):
    blend_function = cast(int, "prop:Enumeration")


class PsBlendEquationArguments(PsRenderState):
    DestinationAlpha = cast(int, "prop:Enumeration")
    buffer_index = cast(int, "prop:Int")
    destination_rgb = cast(int, "prop:Enumeration")
    source_alpha = cast(int, "prop:Enumeration")
    source_rgb = cast(int, "prop:Enumeration")


class PsBlitFramebuffer(PsFrameGraphNode):
    destination = "prop:Property"
    destination_attachment_point = "prop:Property"
    destination_rect = "prop:Rect"
    interpolation_method = "prop:Property"
    source = "prop:Property"
    source_attachment_point = "prop:Property"
    source_rect = "prop:Rect"


class PsBufferCapture(P.PropSheet):
    pass


class PsCameraLens(PsComponent3D):
    aspect_ratio = cast(float, "prop:Real")
    bottom = cast(float, "prop:Real")
    far_plane = cast(float, "prop:Real")
    field_of_view = cast(float, "prop:Real")
    left = cast(float, "prop:Real")
    near_plane = cast(float, "prop:Real")
    projection_matrix = "prop:Matrix4x4"
    projection_type = cast(int, "prop:Enumeration")
    right = cast(float, "prop:Real")
    top = cast(float, "prop:Real")


class PsCameraSelector(PsFrameGraphNode):
    camera = "prop:Property"


class PsClearBuffers(PsFrameGraphNode):
    buffers = cast(int, "prop:Enumeration")
    clear_color = cast(str, "prop:Color")
    clear_depth_value = cast(float, "prop:Real")
    clear_stencil_value = cast(int, "prop:Int")
    color_buffer = "prop:Property"


class PsClipPlane(PsRenderState):
    distance = cast(float, "prop:Real")
    normal = "prop:Vector3D"
    plane_index = cast(int, "prop:Int")


class PsColorMask(PsRenderState):
    alpha_masked = cast(bool, "prop:Bool")
    blue_masked = cast(bool, "prop:Bool")
    green_masked = cast(bool, "prop:Bool")
    red_masked = cast(bool, "prop:Bool")


class PsComputeCommand(PsComponent3D):
    run_type = cast(int, "prop:Enumeration")
    work_group_x = cast(int, "prop:Int")
    work_group_y = cast(int, "prop:Int")
    work_group_z = cast(int, "prop:Int")


class PsCullFace(PsRenderState):
    mode = cast(int, "prop:Enumeration")


class PsDebugOverlay(PsFrameGraphNode):
    pass


class PsDepthRange(PsRenderState):
    pass


class PsDepthTest(PsRenderState):
    depth_function = cast(int, "prop:Enumeration")


class PsDirectionalLight(P.PropSheet):
    world_direction = "prop:Vector3D"
    type = cast(int, "prop:Enumeration")
    ambient_color = cast(str, "prop:Color")
    brightness = cast(float, "prop:Real")
    casts_shadow = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    scope = "prop:Property"
    shadow_bias = cast(float, "prop:Real")
    shadow_factor = cast(float, "prop:Real")
    shadow_filter = cast(float, "prop:Real")
    shadow_map_far = cast(float, "prop:Real")
    shadow_map_quality = cast(int, "prop:Enumeration")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsDispatchCompute(PsFrameGraphNode):
    work_group_x = cast(int, "prop:Int")
    work_group_y = cast(int, "prop:Int")
    work_group_z = cast(int, "prop:Int")


class PsDithering(PsRenderState):
    pass


class PsEffect(P.PropSheet):
    parameters = cast(list, "prop:List")
    techniques = cast(list, "prop:List")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")
    passes = cast(list, "prop:List")


class PsEnvironmentLight(P.PropSheet):
    irradiance = "prop:Property"
    specular = "prop:Property"


class PsFilterKey(PsNode):
    name_ = cast(str, "prop:String")
    value = "prop:Property"


class PsFrontFace(PsRenderState):
    direction = cast(int, "prop:Enumeration")


class PsFrustumCulling(PsFrameGraphNode):
    pass


class PsGeometryRenderer(PsBoundingVolume):
    first_instance = cast(int, "prop:Int")
    first_vertex = cast(int, "prop:Int")
    geometry = "prop:Property"
    index_buffer_byte_offset = cast(int, "prop:Int")
    index_offset = cast(int, "prop:Int")
    instance_count = cast(int, "prop:Int")
    primitive_restart_enabled = cast(bool, "prop:Bool")
    primitive_type = cast(int, "prop:Enumeration")
    restart_index_value = cast(int, "prop:Int")
    sort_index = cast(float, "prop:Number")
    vertex_count = cast(int, "prop:Int")
    vertices_per_patch = cast(int, "prop:Int")


class PsGraphicsApiFilter(PsQtObject):
    api = cast(int, "prop:Enumeration")
    extensions = "prop:Property"
    major_version = cast(int, "prop:Int")
    minor_version = cast(int, "prop:Int")
    profile = cast(int, "prop:Enumeration")
    vendor = cast(str, "prop:String")


class PsLayer(PsComponent3D):
    recursive = cast(bool, "prop:Bool")


class PsLayerFilter(PsFrameGraphNode):
    filter_mode = cast(int, "prop:Enumeration")
    layers = cast(list, "prop:List")


class PsLevelOfDetail(PsComponent3D):
    ThresholdType = cast(int, "prop:Enumeration")
    camera = "prop:Property"
    current_index = cast(int, "prop:Int")
    threshold_type = cast(int, "prop:Int")
    thresholds = "prop:Property"
    volume_override = cast(int, "prop:Int")


class PsLevelOfDetailBoundingSphere(PsComponent3D):
    center = "prop:Property"
    radius = "prop:Property"


class PsLevelOfDetailLoader(PsEntity):
    sources = cast(list, "prop:List")


class PsLevelOfDetailSwitch(PsComponent3D):
    current_index = cast(int, "prop:Int")


class PsLight(P.PropSheet):
    type = cast(int, "prop:Enumeration")
    ambient_color = cast(str, "prop:Color")
    brightness = cast(float, "prop:Real")
    casts_shadow = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    scope = "prop:Property"
    shadow_bias = cast(float, "prop:Real")
    shadow_factor = cast(float, "prop:Real")
    shadow_filter = cast(float, "prop:Real")
    shadow_map_far = cast(float, "prop:Real")
    shadow_map_quality = cast(int, "prop:Enumeration")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsLineWidth(PsRenderState):
    value = cast(float, "prop:Real")


class PsMemoryBarrier(PsFrameGraphNode):
    pass


class PsMesh(P.PropSheet):
    mesh_name = cast(str, "prop:String")
    source = cast(str, "prop:Url")
    status = cast(int, "prop:Enumeration")


class PsMultiSampleAntiAliasing(PsRenderState):
    pass


class PsNoDepthMask(PsRenderState):
    pass


class PsNoDraw(PsFrameGraphNode):
    pass


class PsNoPicking(PsFrameGraphNode):
    pass


class PsObjectPicker(P.PropSheet):
    contains_mouse = cast(bool, "prop:Bool")
    drag_enabled = cast(bool, "prop:Bool")
    hover_enabled = cast(bool, "prop:Bool")
    pressed = cast(bool, "prop:Bool")
    priority = cast(int, "prop:Int")


class PsParameter(P.PropSheet):
    name_ = "prop:Property"
    value = "prop:Property"


class PsPickEvent(P.PropSheet):
    accepted = cast(bool, "prop:Bool")
    button = cast(int, "prop:Int")
    buttons = cast(int, "prop:Int")
    distance = cast(float, "prop:Real")
    entity = "prop:Property"
    local_intersection = "prop:Vector3D"
    modifiers = cast(int, "prop:Int")
    position = "prop:Property"
    viewport = "prop:Property"
    world_intersection = "prop:Vector3D"


class PsPickingProxy(PsComponent3D):
    pass


class PsPickingSettings(P.PropSheet):
    face_orientation_picking_mode = cast(int, "prop:Enumeration")
    pick_method = cast(int, "prop:Enumeration")
    pick_result_mode = cast(int, "prop:Enumeration")
    world_space_tolerance = "prop:Property"


class PsPickLineEvent(P.PropSheet):
    triangle_index = "prop:Property"
    vertex1index = "prop:Property"
    vertex2index = "prop:Property"


class PsPickPointEvent(P.PropSheet):
    point_index = "prop:Property"


class PsPickTriangleEvent(P.PropSheet):
    triangle_index = "prop:Property"
    vertex1index = "prop:Property"
    vertex2index = "prop:Property"
    vertex3index = "prop:Property"


class PsPointLight(P.PropSheet):
    constant_attenuation = cast(float, "prop:Number")
    linear_attenuation = cast(float, "prop:Number")
    quadratic_attenuation = cast(float, "prop:Number")
    constant_fade = cast(float, "prop:Real")
    linear_fade = cast(float, "prop:Real")
    quadratic_fade = cast(float, "prop:Real")
    type = cast(int, "prop:Enumeration")
    ambient_color = cast(str, "prop:Color")
    brightness = cast(float, "prop:Real")
    casts_shadow = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    scope = "prop:Property"
    shadow_bias = cast(float, "prop:Real")
    shadow_factor = cast(float, "prop:Real")
    shadow_filter = cast(float, "prop:Real")
    shadow_map_far = cast(float, "prop:Real")
    shadow_map_quality = cast(int, "prop:Enumeration")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsPointSize(PsRenderState):
    size_mode = cast(int, "prop:Enumeration")
    value = cast(float, "prop:Real")


class PsPolygonOffset(PsRenderState):
    depth_steps = cast(float, "prop:Real")
    scale_factor = cast(float, "prop:Real")


class PsProximityFilter(PsFrameGraphNode):
    distance_threshold = cast(float, "prop:Real")
    entity = "prop:Property"


class PsRasterMode(PsRenderState):
    face_mode = cast(int, "prop:Enumeration")
    raster_mode = cast(int, "prop:Enumeration")


class PsRayCaster(P.PropSheet):
    direction = "prop:Vector3D"
    length = cast(float, "prop:Real")
    origin = "prop:Vector3D"


class PsRenderCapabilities(P.PropSheet):
    api = "prop:Property"
    driver_version = "prop:Property"
    extensions = "prop:Property"
    glsl_version = "prop:Property"
    major_version = cast(int, "prop:Int")
    max_compute_invocations = cast(int, "prop:Int")
    max_compute_shared_memory_size = cast(int, "prop:Int")
    max_image_units = cast(int, "prop:Int")
    max_ssbo_bindings = cast(int, "prop:Int")
    max_ssbo_size = cast(int, "prop:Int")
    max_samples = cast(int, "prop:Int")
    max_texture_layers = cast(int, "prop:Int")
    max_texture_size = cast(int, "prop:Int")
    max_texture_units = cast(int, "prop:Int")
    max_ubo_bindings = cast(int, "prop:Int")
    max_ubo_size = cast(int, "prop:Int")
    max_work_group_count_x = cast(int, "prop:Int")
    max_work_group_count_y = cast(int, "prop:Int")
    max_work_group_count_z = cast(int, "prop:Int")
    max_work_group_size_x = cast(int, "prop:Int")
    max_work_group_size_y = cast(int, "prop:Int")
    max_work_group_size_z = cast(int, "prop:Int")
    minor_version = cast(int, "prop:Int")
    profile = cast(bool, "prop:Bool")
    renderer = "prop:Property"
    supports_compute = cast(bool, "prop:Bool")
    supports_image_store = cast(bool, "prop:Bool")
    supports_ssbo = cast(bool, "prop:Bool")
    supports_ubo = cast(bool, "prop:Bool")
    valid = cast(bool, "prop:Bool")
    vendor = "prop:Property"


class PsRenderCapture(PsFrameGraphNode):
    pass


class PsRenderCaptureReply(P.PropSheet):
    capture_id = cast(int, "prop:Int")
    complete = cast(bool, "prop:Bool")
    image = "prop:Property"


class PsRenderPass(PsNode):
    filter_keys = cast(list, "prop:List")
    parameters = cast(list, "prop:List")
    render_states = cast(list, "prop:List")
    shader_program = "prop:Property"


class PsRenderPassFilter(PsFrameGraphNode):
    match_any = cast(list, "prop:List")
    parameters = cast(list, "prop:List")


class PsRenderSettings(P.PropSheet):
    active_frame_graph = "prop:Property"
    picking_settings = "prop:Property"
    render_capabilities = "prop:Property"
    render_policy = cast(int, "prop:Enumeration")


class PsRenderStateSet(PsFrameGraphNode):
    render_states = cast(list, "prop:List")


class PsRenderSurfaceSelector(PsFrameGraphNode):
    external_render_target_size = "prop:Size"
    surface = "prop:Property"
    surface_pixel_ratio = cast(float, "prop:Real")


class PsRenderTarget(P.PropSheet):
    attachments = cast(list, "prop:List")


class PsRenderTargetOutput(PsNode):
    attachment_point = cast(int, "prop:Enumeration")
    face = cast(int, "prop:Enumeration")
    layer = cast(int, "prop:Int")
    mip_level = cast(int, "prop:Int")
    texture = "prop:Property"


class PsRenderTargetSelector(PsFrameGraphNode):
    target = "prop:Property"


class PsSceneLoader(PsComponent):
    source = cast(str, "prop:Url")
    status = cast(int, "prop:Enumeration")


class PsScissorTest(PsRenderState):
    bottom = cast(int, "prop:Int")
    height = cast(int, "prop:Int")
    left = cast(int, "prop:Int")
    width = cast(int, "prop:Int")


class PsScreenRayCaster(P.PropSheet):
    position = "prop:Point"


class PsSeamlessCubemap(PsRenderState):
    pass


class PsShaderImage(P.PropSheet):
    access = cast(int, "prop:Enumeration")
    format = cast(int, "prop:Enumeration")
    layer = cast(int, "prop:Int")
    layered = cast(bool, "prop:Bool")
    mip_level = cast(int, "prop:Int")


class PsShaderProgram(P.PropSheet):
    compute_shader_code = cast(str, "prop:String")
    compute_shader_graph = cast(str, "prop:String")
    format = cast(int, "prop:Enumeration")
    fragment_shader_code = cast(str, "prop:String")
    fragment_shader_graph = cast(str, "prop:String")
    geometry_shader_code = cast(str, "prop:String")
    geometry_shader_graph = cast(str, "prop:String")
    log = cast(str, "prop:String")
    status = cast(int, "prop:Enumeration")
    tessellation_control_shader_code = cast(str, "prop:String")
    tessellation_control_shader_graph = cast(str, "prop:String")
    tessellation_evaluation_shader_code = cast(str, "prop:String")
    tessellation_evaluation_shader_graph = cast(str, "prop:String")
    vertex_shader_code = cast(str, "prop:String")
    vertex_shader_graph = cast(str, "prop:String")


class PsShaderProgramBuilder(P.PropSheet):
    compute_shader_code = cast(str, "prop:String")
    enabled_layers = "prop:Property"
    fragment_shader_code = cast(str, "prop:String")
    geometry_shader_code = cast(str, "prop:String")
    shader_program = cast(str, "prop:String")
    tessellation_control_shader_code = cast(str, "prop:String")
    tessellation_evaluation_shader_code = cast(str, "prop:String")
    vertex_shader_code = cast(str, "prop:String")


class PsSharedGLTexture(P.PropSheet):
    texture_id = cast(int, "prop:Int")


class PsSortPolicy(PsFrameGraphNode):
    sort_types = cast(list, "prop:List")


class PsSpotLight(P.PropSheet):
    constant_attenuation = cast(float, "prop:Number")
    cut_off_angle = cast(float, "prop:Number")
    linear_attenuation = cast(float, "prop:Number")
    local_direction = "prop:Vector3D"
    quadratic_attenuation = cast(float, "prop:Number")
    cone_angle = cast(float, "prop:Real")
    constant_fade = cast(float, "prop:Real")
    inner_cone_angle = cast(float, "prop:Real")
    linear_fade = cast(float, "prop:Real")
    quadratic_fade = cast(float, "prop:Real")
    type = cast(int, "prop:Enumeration")
    ambient_color = cast(str, "prop:Color")
    brightness = cast(float, "prop:Real")
    casts_shadow = cast(bool, "prop:Bool")
    color = cast(str, "prop:Color")
    scope = "prop:Property"
    shadow_bias = cast(float, "prop:Real")
    shadow_factor = cast(float, "prop:Real")
    shadow_filter = cast(float, "prop:Real")
    shadow_map_far = cast(float, "prop:Real")
    shadow_map_quality = cast(int, "prop:Enumeration")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsStencilMask(PsRenderState):
    back_output_mask = cast(int, "prop:Int")
    front_output_mask = cast(int, "prop:Int")


class PsStencilOperation(PsRenderState):
    back = "prop:Property"
    front = "prop:Property"


class PsStencilOperationArguments(PsQtObject):
    all_tests_pass_operation = cast(int, "prop:Enumeration")
    depth_test_failure_operation = cast(int, "prop:Enumeration")
    face_mode = cast(int, "prop:Enumeration")
    stencil_test_failure_operation = cast(int, "prop:Enumeration")


class PsStencilTest(PsRenderState):
    back = "prop:Property"
    front = "prop:Property"


class PsStencilTestArguments(PsQtObject):
    comparison_mask = cast(int, "prop:Int")
    face_mode = cast(int, "prop:Enumeration")
    reference_value = cast(int, "prop:Int")
    stencil_function = cast(int, "prop:Enumeration")


class PsSubtreeEnabler(PsFrameGraphNode):
    enablement = cast(int, "prop:Enumeration")


class PsTechnique(P.PropSheet):
    filter_keys = cast(list, "prop:List")
    graphics_api_filter = "prop:Property"
    parameters = cast(list, "prop:List")
    render_passes = cast(list, "prop:List")


class PsTechniqueFilter(PsFrameGraphNode):
    match_all = cast(list, "prop:List")
    parameters = cast(list, "prop:List")


class PsTexture1D(P.PropSheet):
    pass


class PsTexture1DArray(P.PropSheet):
    pass


class PsTexture2D(P.PropSheet):
    pass


class PsTexture2DArray(P.PropSheet):
    pass


class PsTexture2DMultisample(P.PropSheet):
    pass


class PsTexture2DMultisampleArray(P.PropSheet):
    pass


class PsTexture3D(P.PropSheet):
    pass


class PsTextureBuffer(P.PropSheet):
    pass


class PsTextureCubeMap(P.PropSheet):
    pass


class PsTextureCubeMapArray(P.PropSheet):
    pass


class PsTextureImage(PsAbstractTextureImage):
    face = cast(int, "prop:Enumeration")
    layer = cast(int, "prop:Int")
    mip_level = cast(int, "prop:Int")
    source = cast(str, "prop:Url")
    status = cast(int, "prop:Enumeration")


class PsTextureLoader(P.PropSheet):
    mirrored = cast(bool, "prop:Bool")
    source = cast(str, "prop:Url")


class PsTextureRectangle(P.PropSheet):
    pass


class PsViewport(PsFrameGraphNode):
    gamma = "prop:Rect"
    normalized_rect = "prop:Rect"


class PsArmature(PsComponent3D):
    skeleton = "prop:Property"


class PsAttribute(P.PropSheet):
    pass


class PsBuffer(P.PropSheet):
    buffer_flags = cast(int, "prop:Enumeration")
    format = cast(int, "prop:Enumeration")
    name_ = cast(str, "prop:String")
    size_multiplier = cast(float, "prop:Real")
    texture_coord_operation = cast(int, "prop:Enumeration")
    texture_filter_operation = cast(int, "prop:Enumeration")


class PsCoreSettings(P.PropSheet):
    bounding_volumes_enabled = cast(bool, "prop:Bool")


class PsEntityLoader(PsEntity):
    entity = "prop:Property"
    source = cast(str, "prop:Url")
    status = "prop:Property"


class PsGeometryView(PsNode):
    first_instance = cast(int, "prop:Int")
    first_vertex = cast(int, "prop:Int")
    geometry = "prop:Property"
    index_buffer_byte_offset = cast(int, "prop:Int")
    index_offset = cast(int, "prop:Int")
    instance_count = cast(int, "prop:Int")
    primitive_restart = cast(bool, "prop:Bool")
    primitive_type = cast(int, "prop:Enumeration")
    restart_index = cast(int, "prop:Int")
    vertex_count = cast(int, "prop:Int")
    vertices_per_patch = cast(int, "prop:Int")


class PsJoint(PsNode):
    index = cast(int, "prop:Int")
    skeleton_root = "prop:Property"


class PsNodeInstantiator(P.PropSheet):
    active = cast(bool, "prop:Bool")
    asynchronous = cast(bool, "prop:Bool")
    count = cast(int, "prop:Int")
    delegate = "prop:Property"
    model = "prop:Property"
    object = "prop:Property"


class PsQuaternionAnimation(PsPropertyAnimation):
    from_ = "prop:Quaternion"
    from_x_rotation = cast(float, "prop:Number")
    from_y_rotation = cast(float, "prop:Number")
    from_z_rotation = cast(float, "prop:Number")
    to = "prop:Quaternion"
    to_x_rotation = cast(float, "prop:Number")
    to_y_rotation = cast(float, "prop:Number")
    to_z_rotation = cast(float, "prop:Number")
    type = cast(int, "prop:Enumeration")


class PsSkeleton(P.PropSheet):
    root_joint = "prop:Property"
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsSkeletonLoader(PsAbstractSkeleton):
    source = cast(str, "prop:Url")
    status = "prop:Property"


class PsTransform(P.PropSheet):
    matrix = "prop:Matrix4x4"
    rotation = "prop:Quaternion"
    rotation_x = cast(float, "prop:Real")
    rotation_y = cast(float, "prop:Real")
    rotation_z = cast(float, "prop:Real")
    scale = "prop:Vector3D"
    scale3d = "prop:Vector3D"
    translation = "prop:Vector3D"
    is_shareable = cast(bool, "prop:Bool")
    child_nodes = cast(list, "prop:List")
    data = cast(list, "prop:List")
    TransformSpace = cast(int, "prop:Enumeration")
    euler_rotation = "prop:Vector3D"
    forward = "prop:Vector3D"
    opacity = cast(float, "prop:Real")
    pivot = "prop:Vector3D"
    position = "prop:Vector3D"
    right = "prop:Vector3D"
    scene_position = "prop:Vector3D"
    scene_rotation = "prop:Vector3D"
    scene_scale = "prop:Vector3D"
    scene_transform = "prop:Matrix4x4"
    static_flags = cast(int, "prop:Int")
    up = "prop:Vector3D"
    visible = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    children = cast(list, "prop:List")
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")
    object_name = cast(str, "prop:String")


class PsConeGeometry(P.PropSheet):
    bottom_radius = cast(float, "prop:Real")
    has_bottom_endcap = cast(bool, "prop:Bool")
    has_top_endcap = cast(bool, "prop:Bool")
    index_attribute = "prop:Property"
    length = cast(float, "prop:Real")
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")
    tex_coord_attribute = "prop:Property"
    top_radius = cast(float, "prop:Real")


class PsConeGeometryView(P.PropSheet):
    bottom_radius = cast(float, "prop:Real")
    has_bottom_endcap = cast(bool, "prop:Bool")
    has_top_endcap = cast(bool, "prop:Bool")
    length = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")
    top_radius = cast(float, "prop:Real")


class PsConeMesh(P.PropSheet):
    bottom_radius = cast(float, "prop:Real")
    has_bottom_endcap = cast(bool, "prop:Bool")
    has_top_endcap = cast(bool, "prop:Bool")
    length = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")
    top_radius = cast(float, "prop:Real")


class PsCuboidGeometry(P.PropSheet):
    index_attribute = "prop:Property"
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    tangent_attribute = "prop:Property"
    tex_coord_attribute = "prop:Property"
    x_extent = cast(float, "prop:Real")
    xy_mesh_resolution = "prop:Size"
    xz_mesh_resolution = "prop:Size"
    y_extent = cast(float, "prop:Real")
    yz_mesh_resolution = "prop:Size"
    z_extent = cast(float, "prop:Real")


class PsCuboidGeometryView(P.PropSheet):
    x_extent = cast(float, "prop:Real")
    xy_mesh_resolution = "prop:Size"
    xz_mesh_resolution = "prop:Size"
    y_extent = cast(float, "prop:Real")
    yz_mesh_resolution = "prop:Size"
    z_extent = cast(float, "prop:Real")


class PsCuboidMesh(P.PropSheet):
    x_extent = cast(float, "prop:Real")
    xy_mesh_resolution = "prop:Size"
    xz_mesh_resolution = "prop:Size"
    y_extent = cast(float, "prop:Real")
    yz_mesh_resolution = "prop:Size"
    z_extent = cast(float, "prop:Real")


class PsCylinderGeometry(P.PropSheet):
    index_attribute = "prop:Property"
    length = cast(float, "prop:Real")
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")
    tex_coord_attribute = "prop:Property"


class PsCylinderGeometryView(P.PropSheet):
    length = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")


class PsCylinderMesh(P.PropSheet):
    length = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")


class PsDiffuseMapMaterial(PsMaterial):
    ambient = cast(str, "prop:Color")
    diffuse = "prop:Property"
    shininess = cast(float, "prop:Real")
    specular = cast(str, "prop:Color")
    texture_scale = cast(float, "prop:Real")


class PsDiffuseSpecularMapMaterial(PsMaterial):
    ambient = cast(str, "prop:Color")
    diffuse = "prop:Property"
    shininess = cast(float, "prop:Real")
    specular = "prop:Property"
    texture_scale = cast(float, "prop:Real")


class PsDiffuseSpecularMaterial(P.PropSheet):
    alpha_blending = cast(bool, "prop:Bool")
    ambient = cast(str, "prop:Color")
    diffuse = "prop:Var"
    normal = "prop:Var"
    shininess = cast(float, "prop:Real")
    specular = "prop:Var"
    texture_scale = cast(float, "prop:Real")


class PsExtrudedTextGeometry(P.PropSheet):
    depth = cast(float, "prop:Number")
    font = "prop:Property"
    index_attribute = "prop:Property"
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    text = "prop:Property"


class PsExtrudedTextMesh(P.PropSheet):
    depth = cast(float, "prop:Number")
    font = "prop:Property"
    text = "prop:Property"


class PsFirstPersonCameraController(PsEntity):
    acceleration = cast(float, "prop:Real")
    camera = "prop:Property"
    deceleration = cast(float, "prop:Real")
    linear_speed = cast(float, "prop:Real")
    look_speed = cast(float, "prop:Real")


class PsForwardRenderer(P.PropSheet):
    buffers_to_clear = cast(str, "prop:Color")
    camera = "prop:Property"
    clear_color = cast(str, "prop:Color")
    external_render_target_size = "prop:Property"
    frustum_culling = cast(bool, "prop:Bool")
    gamma = cast(float, "prop:Real")
    show_debug_overlay = cast(bool, "prop:Bool")
    surface = "prop:Property"
    viewport_rect = "prop:Rect"


class PsGoochMaterial(PsMaterial):
    alpha = cast(float, "prop:Real")
    beta = cast(float, "prop:Real")
    cool = cast(str, "prop:Color")
    diffuse = cast(str, "prop:Color")
    shininess = cast(float, "prop:Real")
    specular = cast(str, "prop:Color")
    warm = cast(str, "prop:Color")


class PsMetalRoughMaterial(P.PropSheet):
    ambient_occlusion = "prop:Property"
    base_color = "prop:Property"
    metalness = "prop:Property"
    normal = "prop:Property"
    roughness = "prop:Property"
    texture_scale = cast(float, "prop:Real")


class PsNormalDiffuseMapAlphaMaterial(PsMaterial):
    ambient = cast(str, "prop:Color")
    diffuse = "prop:Property"
    normal = "prop:Property"
    shininess = cast(float, "prop:Real")
    specular = cast(str, "prop:Color")
    texture_scale = cast(float, "prop:Real")


class PsNormalDiffuseMapMaterial(PsMaterial):
    ambient = cast(str, "prop:Color")
    diffuse = "prop:Property"
    normal = "prop:Property"
    shininess = cast(float, "prop:Real")
    specular = cast(str, "prop:Color")
    texture_scale = cast(float, "prop:Real")


class PsNormalDiffuseSpecularMapMaterial(PsMaterial):
    ambient = cast(str, "prop:Color")
    diffuse = "prop:Property"
    normal = "prop:Property"
    shininess = cast(float, "prop:Real")
    specular = "prop:Property"
    texture_scale = cast(float, "prop:Real")


class PsOrbitCameraController(PsEntity):
    camera = "prop:Property"
    linear_speed = cast(float, "prop:Real")
    look_speed = cast(float, "prop:Real")
    zoom_limit = cast(float, "prop:Real")


class PsPerVertexColorMaterial(PsMaterial):
    pass


class PsPhongAlphaMaterial(PsMaterial):
    alpha = cast(float, "prop:Real")
    ambient = cast(str, "prop:Color")
    blend_function_arg = "prop:Property"
    destination_alpha_arg = "prop:Property"
    destination_rgb_arg = "prop:Property"
    diffuse = cast(str, "prop:Color")
    shininess = cast(float, "prop:Real")
    source_alpha_arg = "prop:Property"
    source_rgb_arg = "prop:Property"
    specular = cast(str, "prop:Color")


class PsPhongMaterial(PsMaterial):
    ambient = cast(str, "prop:Color")
    diffuse = cast(str, "prop:Color")
    shininess = cast(float, "prop:Real")
    specular = cast(str, "prop:Color")


class PsPlaneGeometry(P.PropSheet):
    height = cast(float, "prop:Real")
    index_attribute = "prop:Property"
    mirrored = cast(bool, "prop:Bool")
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    resolution = "prop:Size"
    tangent_attribute = "prop:Property"
    tex_coord_attribute = "prop:Property"
    width = cast(float, "prop:Real")


class PsPlaneGeometryView(P.PropSheet):
    height = cast(float, "prop:Real")
    mesh_resolution = "prop:Size"
    mirrored = cast(bool, "prop:Bool")
    width = cast(float, "prop:Real")


class PsPlaneMesh(P.PropSheet):
    height = cast(float, "prop:Real")
    mesh_resolution = "prop:Size"
    mirrored = cast(bool, "prop:Bool")
    width = cast(float, "prop:Real")


class PsSkyboxEntity(P.PropSheet):
    pass


class PsSphereGeometry(P.PropSheet):
    generate_tangents = cast(bool, "prop:Bool")
    index_attribute = "prop:Property"
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")
    tangent_attribute = "prop:Property"
    tex_coord_attribute = "prop:Property"


class PsSphereGeometryView(P.PropSheet):
    generate_tangents = cast(bool, "prop:Bool")
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")


class PsSphereMesh(P.PropSheet):
    generate_tangents = cast(bool, "prop:Bool")
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")


class PsText2DEntity(P.PropSheet):
    color = "prop:Property"
    font = "prop:Property"
    height = cast(float, "prop:Number")
    text = "prop:Property"
    width = cast(float, "prop:Number")


class PsTorusGeometry(P.PropSheet):
    index_attribute = "prop:Property"
    minor_radius = cast(float, "prop:Real")
    normal_attribute = "prop:Property"
    position_attribute = "prop:Property"
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")
    tex_coord_attribute = "prop:Property"


class PsTorusGeometryView(P.PropSheet):
    minor_radius = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")


class PsTorusMesh(P.PropSheet):
    minor_radius = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")
    rings = cast(int, "prop:Int")
    slices = cast(int, "prop:Int")


class PsFrameAction(PsComponent3D):
    pass


class PsScene2D(P.PropSheet):
    entities = cast(list, "prop:List")
    item = "prop:Property"
    mouse_enabled = cast(bool, "prop:Bool")
    output = "prop:Property"
    render_policy = cast(int, "prop:Enumeration")


class PsScene3D(PsItem):
    aspects = cast(list, "prop:List")
    camera_aspect_ratio_mode = cast(int, "prop:Enumeration")
    compositing_mode = cast(int, "prop:Enumeration")
    entity = "prop:Property"
    hover_enabled = cast(bool, "prop:Bool")
    multisample = cast(bool, "prop:Bool")


class PsAreaSeries(PsAbstractSeries):
    axis_angular = "prop:Property"
    axis_radial = "prop:Property"
    axis_x = "prop:Property"
    axis_x_top = "prop:Property"
    axis_y = "prop:Property"
    axis_y_right = "prop:Property"
    border_color = cast(str, "prop:Color")
    border_width = cast(float, "prop:Real")
    brush = "prop:Property"
    brush_filename = "prop:Property"
    color = cast(str, "prop:Color")
    lower_series = "prop:Property"
    point_labels_clipping = cast(bool, "prop:Bool")
    point_labels_color = "prop:Font"
    point_labels_font = "prop:Font"
    point_labels_format = cast(str, "prop:String")
    point_labels_visible = cast(bool, "prop:Bool")
    upper_series = "prop:Property"


class PsBarCategoryAxis(PsAbstractAxis):
    categories = "prop:Property"
    count = cast(int, "prop:Int")
    max = cast(str, "prop:String")
    min = cast(str, "prop:String")


class PsBarSeries(PsAbstractBarSeries):
    pass


class PsBarSet(P.PropSheet):
    border_color = cast(str, "prop:Color")
    border_width = cast(float, "prop:Real")
    brush_filename = cast(str, "prop:String")
    color = cast(str, "prop:Color")
    count = cast(int, "prop:Int")
    label = cast(str, "prop:String")
    label_color = cast(str, "prop:Color")
    label_font = "prop:Font"
    values = "prop:Property"


class PsBoxPlotSeries(PsAbstractSeries):
    axis_x = "prop:Property"
    axis_x_top = "prop:Property"
    axis_y = "prop:Property"
    axis_y_right = "prop:Property"
    box_outline_visible = cast(bool, "prop:Bool")
    box_width = cast(float, "prop:Real")
    brush_filename = cast(str, "prop:String")
    count = cast(int, "prop:Int")


class PsBoxSet(P.PropSheet):
    brush_filename = cast(str, "prop:String")
    count = cast(int, "prop:Int")
    label = cast(str, "prop:String")
    values = cast(list, "prop:List")


class PsCandlestickSeries(PsAbstractSeries):
    axis_x = "prop:Property"
    axis_x_top = "prop:Property"
    axis_y = "prop:Property"
    axis_y_right = "prop:Property"
    body_outline_visible = cast(bool, "prop:Bool")
    body_width = cast(float, "prop:Real")
    brush_filename = cast(str, "prop:String")
    caps_visible = cast(bool, "prop:Bool")
    caps_width = cast(float, "prop:Real")
    count = cast(int, "prop:Int")
    decreasing_color = cast(str, "prop:Color")
    increasing_color = cast(str, "prop:Color")
    maximum_column_width = cast(float, "prop:Real")
    minimum_column_width = cast(float, "prop:Real")


class PsCandlestickSet(P.PropSheet):
    brush_filename = cast(str, "prop:String")
    close = cast(float, "prop:Real")
    high = cast(float, "prop:Real")
    low = cast(float, "prop:Real")
    open = cast(float, "prop:Real")
    timestamp = cast(float, "prop:Real")


class PsCategoryAxis(PsAbstractAxis):
    categories_labels = "prop:Property"
    count = cast(int, "prop:Int")
    labels_position = cast(int, "prop:Enumeration")
    start_value = cast(int, "prop:Int")


class PsCategoryRange(P.PropSheet):
    end_value = cast(int, "prop:Int")
    label = cast(str, "prop:String")


class PsDateTimeAxis(PsAbstractAxis):
    format = cast(str, "prop:String")
    max = "prop:Property"
    min = "prop:Property"
    tick_count = cast(int, "prop:Int")


class PsHBarModelMapper(P.PropSheet):
    column_count = cast(int, "prop:Int")
    first_bar_set_row = cast(int, "prop:Int")
    first_column = cast(int, "prop:Int")
    last_bar_set_row = cast(int, "prop:Int")
    model = "prop:Property"
    series = "prop:Property"


class PsHBoxPlotModelMapper(P.PropSheet):
    column_count = cast(int, "prop:Int")
    first_box_set_row = cast(int, "prop:Int")
    first_column = cast(int, "prop:Int")
    last_box_set_row = cast(int, "prop:Int")
    model = "prop:Property"
    series = "prop:Property"


class PsHCandlestickModelMapper(P.PropSheet):
    close_column = cast(int, "prop:Int")
    first_set_row = cast(int, "prop:Int")
    high_column = cast(int, "prop:Int")
    last_set_row = cast(int, "prop:Int")
    low_column = cast(int, "prop:Int")
    model = "prop:Property"
    open_column = cast(int, "prop:Int")
    series = "prop:Property"
    timestamp_column = cast(int, "prop:Int")


class PsHorizontalBarSeries(PsAbstractBarSeries):
    pass


class PsHorizontalPercentBarSeries(PsAbstractBarSeries):
    pass


class PsHorizontalStackedBarSeries(PsAbstractBarSeries):
    pass


class PsHPieModelMapper(P.PropSheet):
    column_count = cast(int, "prop:Int")
    first_column = cast(int, "prop:Int")
    labels_row = cast(int, "prop:Int")
    model = "prop:Property"
    series = "prop:Property"
    values_row = cast(int, "prop:Int")


class PsHXYModelMapper(P.PropSheet):
    column_count = cast(int, "prop:Int")
    first_column = cast(int, "prop:Int")
    model = "prop:Property"
    series = "prop:Property"
    x_row = cast(int, "prop:Int")
    y_row = cast(int, "prop:Int")


class PsLegend(P.PropSheet):
    alignment = "prop:Property"
    background_visible = cast(bool, "prop:Bool")
    border_color = cast(str, "prop:Color")
    color = cast(str, "prop:Color")
    font = "prop:Font"
    label_color = cast(str, "prop:Color")
    marker_shape = cast(int, "prop:Enumeration")
    reverse_markers = cast(bool, "prop:Bool")
    show_tool_tips = cast(bool, "prop:Bool")
    visible = cast(bool, "prop:Bool")


class PsLineSeries(PsXYSeries):
    cap_style = "prop:Property"
    count = cast(int, "prop:Int")
    style = "prop:Property"
    width = cast(float, "prop:Real")


class PsLogValueAxis(PsAbstractAxis):
    base = cast(float, "prop:Real")
    label_format = cast(float, "prop:Real")
    max = cast(float, "prop:Real")
    min = cast(float, "prop:Real")
    minor_tick_count = cast(int, "prop:Int")
    tick_count = cast(int, "prop:Int")


class PsMargins(P.PropSheet):
    bottom = cast(int, "prop:Int")
    left = cast(int, "prop:Int")
    right = cast(int, "prop:Int")
    top = cast(int, "prop:Int")


class PsPercentBarSeries(PsAbstractBarSeries):
    pass


class PsPieSeries(PsAbstractSeries):
    count = cast(int, "prop:Int")
    end_angle = cast(float, "prop:Real")
    hole_size = cast(float, "prop:Real")
    horizontal_position = cast(float, "prop:Real")
    size = cast(float, "prop:Real")
    start_angle = cast(float, "prop:Real")
    sum = cast(float, "prop:Real")
    vertical_position = cast(float, "prop:Real")


class PsPieSlice(P.PropSheet):
    angle_span = cast(float, "prop:Real")
    border_color = cast(str, "prop:Color")
    border_width = cast(int, "prop:Int")
    brush_filename = cast(str, "prop:String")
    color = cast(str, "prop:Color")
    explode_distance_factor = cast(float, "prop:Real")
    exploded = cast(bool, "prop:Bool")
    label = cast(str, "prop:String")
    label_arm_length_factor = cast(float, "prop:Real")
    label_color = cast(str, "prop:Color")
    label_font = "prop:Font"
    label_position = cast(int, "prop:Enumeration")
    label_visible = cast(bool, "prop:Bool")
    percentage = cast(float, "prop:Real")
    start_angle = cast(float, "prop:Real")
    value = cast(float, "prop:Real")


class PsPolarChartView(PsChartView):
    pass


class PsScatterSeries(PsXYSeries):
    border_color = cast(str, "prop:Color")
    border_width = cast(float, "prop:Real")
    brush = "prop:Property"
    brush_filename = cast(str, "prop:String")
    count = cast(int, "prop:Int")
    marker_shape = cast(int, "prop:Enumeration")
    marker_size = cast(float, "prop:Real")


class PsSplineSeries(PsXYSeries):
    cap_style = "prop:Property"
    count = cast(int, "prop:Int")
    style = "prop:Property"
    width = cast(float, "prop:Real")


class PsStackedBarSeries(PsAbstractBarSeries):
    pass


class PsValueAxis(PsAbstractAxis):
    label_format = cast(str, "prop:String")
    max = cast(float, "prop:Real")
    min = cast(float, "prop:Real")
    minor_tick_count = cast(int, "prop:Int")
    tick_anchor = cast(float, "prop:Real")
    tick_count = cast(int, "prop:Int")
    tick_interval = cast(float, "prop:Real")
    tick_type = cast(int, "prop:Enumeration")


class PsVBarModelMapper(P.PropSheet):
    first_bar_set_column = cast(int, "prop:Int")
    first_row = cast(int, "prop:Int")
    last_bar_set_column = cast(int, "prop:Int")
    model = "prop:Property"
    row_count = cast(int, "prop:Int")
    series = "prop:Property"


class PsVBoxPlotModelMapper(P.PropSheet):
    first_box_set_column = cast(int, "prop:Int")
    first_row = cast(int, "prop:Int")
    last_box_set_column = cast(int, "prop:Int")
    model = "prop:Property"
    row_count = cast(int, "prop:Int")
    series = "prop:Property"


class PsVCandlestickModelMapper(P.PropSheet):
    close_row = cast(int, "prop:Int")
    first_set_column = cast(int, "prop:Int")
    high_row = cast(int, "prop:Int")
    last_set_column = cast(int, "prop:Int")
    low_row = cast(int, "prop:Int")
    model = "prop:Property"
    open_row = cast(int, "prop:Int")
    series = "prop:Property"
    timestamp_row = cast(int, "prop:Int")


class PsVPieModelMapper(P.PropSheet):
    first_row = cast(int, "prop:Int")
    labels_column = cast(int, "prop:Int")
    model = "prop:Property"
    row_count = cast(int, "prop:Int")
    series = "prop:Property"
    values_column = cast(int, "prop:Int")


class PsVXYModelMapper(P.PropSheet):
    first_row = cast(int, "prop:Int")
    model = "prop:Property"
    row_count = cast(int, "prop:Int")
    series = "prop:Property"
    x_column = cast(int, "prop:Int")
    y_column = cast(int, "prop:Int")


class PsXYPoint(P.PropSheet):
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsActionGroup(PsQtObject):
    actions = cast(list, "prop:List")
    checked_action = "prop:Property"
    enabled = cast(bool, "prop:Bool")
    exclusive = cast(bool, "prop:Bool")


class PsApplicationWindow(PsWindow):
    active_focus_control = "prop:Property"
    background = "prop:Property"
    content_data = cast(list, "prop:List")
    content_item = "prop:Property"
    font = "prop:Font"
    footer = "prop:Property"
    header = "prop:Property"
    locale = "prop:Property"
    menu_bar = "prop:Property"


class PsBusyIndicator(PsControl):
    running = cast(bool, "prop:Bool")


class PsButtonGroup(PsQtObject):
    buttons = cast(list, "prop:List")
    check_state = cast(int, "prop:Enumeration")
    checked_button = "prop:Property"
    exclusive = cast(bool, "prop:Bool")


class PsCheckBox(PsAbstractButton):
    check_state = cast(int, "prop:Enumeration")
    next_check_state = "prop:Property"
    tristate = cast(bool, "prop:Bool")


class PsCheckDelegate(PsItemDelegate):
    check_state = cast(int, "prop:Enumeration")
    next_check_state = "prop:Property"
    tristate = cast(bool, "prop:Bool")


class PsComboBox(PsControl):
    acceptable_input = cast(bool, "prop:Bool")
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_text = cast(str, "prop:String")
    current_value = cast(str, "prop:String")
    delegate = "prop:Property"
    display_text = cast(str, "prop:String")
    down = cast(bool, "prop:Bool")
    edit_text = cast(str, "prop:String")
    editable = cast(bool, "prop:Bool")
    flat = cast(bool, "prop:Bool")
    highlighted_index = cast(int, "prop:Int")
    implicit_content_width_policy = cast(int, "prop:Enumeration")
    implicit_indicator_height = cast(float, "prop:Real")
    implicit_indicator_width = cast(float, "prop:Real")
    indicator = "prop:Property"
    input_method_composing = cast(bool, "prop:Bool")
    input_method_hints = "prop:Property"
    model = "prop:Property"
    popup = "prop:Property"
    pressed = cast(bool, "prop:Bool")
    select_text_by_mouse = cast(bool, "prop:Bool")
    text_role = cast(str, "prop:String")
    validator = "prop:Property"
    value_role = cast(str, "prop:String")


class PsDelayButton(PsAbstractButton):
    delay = cast(int, "prop:Int")
    progress = cast(float, "prop:Real")
    transition = "prop:Property"


class PsDial(PsControl):
    angle = cast(float, "prop:Real")
    from_ = cast(float, "prop:Real")
    handle = "prop:Property"
    input_mode = cast(int, "prop:Enumeration")
    live = cast(bool, "prop:Bool")
    position = cast(float, "prop:Real")
    pressed = cast(bool, "prop:Bool")
    snap_mode = cast(int, "prop:Enumeration")
    step_size = cast(float, "prop:Real")
    to = cast(float, "prop:Real")
    value = cast(float, "prop:Real")
    wrap = cast(bool, "prop:Bool")


class PsDialogButtonBox(PsContainer):
    alignment = "prop:Property"
    button_layout = cast(int, "prop:Enumeration")
    delegate = "prop:Property"
    position = cast(int, "prop:Enumeration")
    standard_buttons = cast(int, "prop:Enumeration")


class PsDrawer(PsPopup):
    drag_margin = cast(float, "prop:Real")
    edge = cast(int, "prop:Enumeration")
    interactive = cast(bool, "prop:Bool")
    position = cast(float, "prop:Real")


class PsGroupBox(PsFrame):
    implicit_label_height = cast(float, "prop:Real")
    implicit_label_width = cast(float, "prop:Real")
    label = "prop:Property"
    title = cast(str, "prop:String")


class PsHorizontalHeaderView(PsTableView):
    model = "prop:Property"
    sync_view = "prop:Property"
    text_role = "prop:Property"


class PsLabel(PsText):
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    right_inset = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")


class PsMenu(P.PropSheet):
    cascade = cast(bool, "prop:Bool")
    content_data = cast(list, "prop:List")
    content_model = "prop:Property"
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    delegate = "prop:Property"
    focus = cast(bool, "prop:Bool")
    overlap = cast(float, "prop:Real")
    title = cast(str, "prop:String")
    active_focus = cast(bool, "prop:Bool")
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_margin = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    clip = cast(bool, "prop:Bool")
    close_policy = cast(int, "prop:Enumeration")
    content_children = cast(list, "prop:List")
    content_height = cast(float, "prop:Real")
    content_item = "prop:Property"
    content_width = cast(float, "prop:Real")
    dim = cast(bool, "prop:Bool")
    enabled = cast(bool, "prop:Bool")
    enter = "prop:Property"
    exit = "prop:Property"
    font = "prop:Font"
    height = cast(float, "prop:Real")
    horizontal_padding = cast(float, "prop:Real")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_margin = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    margins = cast(float, "prop:Real")
    mirrored = cast(bool, "prop:Bool")
    modal = cast(bool, "prop:Bool")
    opacity = cast(float, "prop:Real")
    opened = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    right_inset = cast(float, "prop:Real")
    right_margin = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_margin = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    transform_origin = cast(int, "prop:Enumeration")
    vertical_padding = cast(float, "prop:Real")
    visible = cast(bool, "prop:Bool")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    object_name = cast(str, "prop:String")
    data = cast(list, "prop:List")
    icon = "prop:Icon"
    items = cast(list, "prop:List")
    menu_bar = "prop:Property"
    menu_item = "prop:Property"
    minimum_width = cast(int, "prop:Int")
    parent_menu = "prop:Property"
    system_tray_icon = "prop:Property"
    type = cast(int, "prop:Enumeration")


class PsMenuBar(P.PropSheet):
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")
    delegate = "prop:Property"
    menus = cast(list, "prop:List")
    content_children = cast(list, "prop:List")
    content_data = cast(list, "prop:List")
    content_model = "prop:Property"
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_item = "prop:Property"
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    content_item = "prop:Property"
    focus_policy = cast(int, "prop:Enumeration")
    focus_reason = cast(int, "prop:Enumeration")
    font = "prop:Font"
    horizontal_padding = cast(float, "prop:Real")
    hover_enabled = cast(bool, "prop:Bool")
    hovered = cast(bool, "prop:Bool")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    mirrored = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    right_inset = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    vertical_padding = cast(float, "prop:Real")
    visual_focus = cast(bool, "prop:Bool")
    wheel_enabled = cast(bool, "prop:Bool")
    active_focus = cast(bool, "prop:Bool")
    active_focus_on_tab = cast(bool, "prop:Bool")
    anchors = "prop:Anchors"
    antialiasing = cast(bool, "prop:Bool")
    baseline_offset = cast(int, "prop:Int")
    children = cast(list, "prop:List")
    children_rect = "prop:ChildrenRect"
    clip = cast(bool, "prop:Bool")
    containment_mask = "prop:Property"
    data = cast(list, "prop:List")
    enabled = cast(bool, "prop:Bool")
    focus = cast(bool, "prop:Bool")
    height = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    opacity = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transform = cast(list, "prop:List")
    transform_origin = cast(int, "prop:Enumeration")
    transitions = cast(list, "prop:List")
    visible = cast(bool, "prop:Bool")
    visible_children = cast(list, "prop:List")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    object_name = cast(str, "prop:String")
    window = "prop:Property"


class PsMenuBarItem(PsAbstractButton):
    highlighted = cast(bool, "prop:Bool")
    menu = "prop:Property"
    menu_bar = "prop:Property"


class PsMenuItem(P.PropSheet):
    arrow = "prop:Property"
    highlighted = cast(bool, "prop:Bool")
    menu = "prop:Property"
    sub_menu = "prop:Property"
    action = "prop:Property"
    auto_exclusive = cast(bool, "prop:Bool")
    auto_repeat = cast(bool, "prop:Bool")
    auto_repeat_delay = cast(int, "prop:Int")
    auto_repeat_interval = cast(int, "prop:Int")
    checkable = cast(bool, "prop:Bool")
    checked = cast(bool, "prop:Bool")
    display = cast(int, "prop:Enumeration")
    down = cast(bool, "prop:Bool")
    icon = "prop:Icon"
    implicit_indicator_height = cast(float, "prop:Real")
    implicit_indicator_width = cast(float, "prop:Real")
    indicator = "prop:Property"
    press_x = cast(float, "prop:Real")
    press_y = cast(float, "prop:Real")
    pressed = cast(bool, "prop:Bool")
    text = cast(str, "prop:String")
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    content_item = "prop:Property"
    focus_policy = cast(int, "prop:Enumeration")
    focus_reason = cast(int, "prop:Enumeration")
    font = "prop:Font"
    horizontal_padding = cast(float, "prop:Real")
    hover_enabled = cast(bool, "prop:Bool")
    hovered = cast(bool, "prop:Bool")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    mirrored = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    right_inset = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    vertical_padding = cast(float, "prop:Real")
    visual_focus = cast(bool, "prop:Bool")
    wheel_enabled = cast(bool, "prop:Bool")
    active_focus = cast(bool, "prop:Bool")
    active_focus_on_tab = cast(bool, "prop:Bool")
    anchors = "prop:Anchors"
    antialiasing = cast(bool, "prop:Bool")
    baseline_offset = cast(int, "prop:Int")
    children = cast(list, "prop:List")
    children_rect = "prop:ChildrenRect"
    clip = cast(bool, "prop:Bool")
    containment_mask = "prop:Property"
    data = cast(list, "prop:List")
    enabled = cast(bool, "prop:Bool")
    focus = cast(bool, "prop:Bool")
    height = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    opacity = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transform = cast(list, "prop:List")
    transform_origin = cast(int, "prop:Enumeration")
    transitions = cast(list, "prop:List")
    visible = cast(bool, "prop:Bool")
    visible_children = cast(list, "prop:List")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    object_name = cast(str, "prop:String")
    group = "prop:Property"
    role = cast(int, "prop:Enumeration")
    separator = cast(bool, "prop:Bool")
    shortcut = "prop:Property"


class PsMenuSeparator(P.PropSheet):
    available_height = cast(float, "prop:Real")
    available_width = cast(float, "prop:Real")
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    bottom_padding = cast(float, "prop:Real")
    content_item = "prop:Property"
    focus_policy = cast(int, "prop:Enumeration")
    focus_reason = cast(int, "prop:Enumeration")
    font = "prop:Font"
    horizontal_padding = cast(float, "prop:Real")
    hover_enabled = cast(bool, "prop:Bool")
    hovered = cast(bool, "prop:Bool")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    implicit_content_height = cast(float, "prop:Real")
    implicit_content_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    locale = "prop:Property"
    mirrored = cast(bool, "prop:Bool")
    padding = cast(float, "prop:Real")
    right_inset = cast(float, "prop:Real")
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")
    vertical_padding = cast(float, "prop:Real")
    visual_focus = cast(bool, "prop:Bool")
    wheel_enabled = cast(bool, "prop:Bool")
    active_focus = cast(bool, "prop:Bool")
    active_focus_on_tab = cast(bool, "prop:Bool")
    anchors = "prop:Anchors"
    antialiasing = cast(bool, "prop:Bool")
    baseline_offset = cast(int, "prop:Int")
    children = cast(list, "prop:List")
    children_rect = "prop:ChildrenRect"
    clip = cast(bool, "prop:Bool")
    containment_mask = "prop:Property"
    data = cast(list, "prop:List")
    enabled = cast(bool, "prop:Bool")
    focus = cast(bool, "prop:Bool")
    height = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    opacity = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transform = cast(list, "prop:List")
    transform_origin = cast(int, "prop:Enumeration")
    transitions = cast(list, "prop:List")
    visible = cast(bool, "prop:Bool")
    visible_children = cast(list, "prop:List")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    object_name = cast(str, "prop:String")
    arrow = "prop:Property"
    highlighted = cast(bool, "prop:Bool")
    menu = "prop:Property"
    sub_menu = "prop:Property"
    action = "prop:Property"
    auto_exclusive = cast(bool, "prop:Bool")
    auto_repeat = cast(bool, "prop:Bool")
    auto_repeat_delay = cast(int, "prop:Int")
    auto_repeat_interval = cast(int, "prop:Int")
    checkable = cast(bool, "prop:Bool")
    checked = cast(bool, "prop:Bool")
    display = cast(int, "prop:Enumeration")
    down = cast(bool, "prop:Bool")
    icon = "prop:Icon"
    implicit_indicator_height = cast(float, "prop:Real")
    implicit_indicator_width = cast(float, "prop:Real")
    indicator = "prop:Property"
    press_x = cast(float, "prop:Real")
    press_y = cast(float, "prop:Real")
    pressed = cast(bool, "prop:Bool")
    text = cast(str, "prop:String")
    group = "prop:Property"
    role = cast(int, "prop:Enumeration")
    separator = cast(bool, "prop:Bool")
    shortcut = "prop:Property"


class PsOverlay(PsItem):
    pass


class PsPage(PsPane):
    footer = "prop:Property"
    header = "prop:Property"
    implicit_footer_height = cast(float, "prop:Real")
    implicit_footer_width = cast(float, "prop:Real")
    implicit_header_height = cast(float, "prop:Real")
    implicit_header_width = cast(float, "prop:Real")
    title = cast(str, "prop:String")


class PsPageIndicator(PsControl):
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    delegate = "prop:Property"
    interactive = cast(bool, "prop:Bool")


class PsProgressBar(PsControl):
    from_ = cast(float, "prop:Real")
    indeterminate = cast(bool, "prop:Bool")
    position = cast(float, "prop:Real")
    to = cast(float, "prop:Real")
    value = cast(float, "prop:Real")
    visual_position = cast(float, "prop:Real")


class PsRadioButton(PsAbstractButton):
    pass


class PsRadioDelegate(PsItemDelegate):
    pass


class PsRangeSlider(PsControl):
    first = "prop:First"
    from_ = cast(float, "prop:Real")
    horizontal = cast(bool, "prop:Bool")
    live = cast(bool, "prop:Bool")
    orientation = cast(int, "prop:Enumeration")
    second = "prop:Second"
    snap_mode = cast(int, "prop:Enumeration")
    step_size = cast(float, "prop:Real")
    to = cast(float, "prop:Real")
    touch_drag_threshold = "prop:Property"
    vertical = cast(bool, "prop:Bool")


class PsRoundButton(PsButton):
    radius = cast(float, "prop:Real")


class PsScrollBar(PsControl):
    active = cast(bool, "prop:Bool")
    horizontal = cast(bool, "prop:Bool")
    interactive = cast(bool, "prop:Bool")
    minimum_size = cast(float, "prop:Real")
    orientation = cast(int, "prop:Enumeration")
    policy = cast(int, "prop:Enumeration")
    position = cast(float, "prop:Real")
    pressed = cast(bool, "prop:Bool")
    size = cast(float, "prop:Real")
    snap_mode = cast(int, "prop:Enumeration")
    step_size = cast(float, "prop:Real")
    vertical = cast(bool, "prop:Bool")
    visual_position = cast(float, "prop:Real")
    visual_size = cast(float, "prop:Real")


class PsScrollIndicator(PsControl):
    active = cast(bool, "prop:Bool")
    horizontal = cast(bool, "prop:Bool")
    minimum_size = cast(float, "prop:Real")
    orientation = cast(int, "prop:Enumeration")
    position = cast(float, "prop:Real")
    size = cast(float, "prop:Real")
    vertical = cast(bool, "prop:Bool")
    visual_position = cast(float, "prop:Real")
    visual_size = cast(float, "prop:Real")


class PsScrollView(PsPane):
    content_children = cast(list, "prop:List")
    content_data = cast(list, "prop:List")


class PsSlider(PsControl):
    from_ = cast(float, "prop:Real")
    handle = "prop:Property"
    horizontal = cast(bool, "prop:Bool")
    implicit_handle_height = cast(float, "prop:Real")
    implicit_handle_width = cast(float, "prop:Real")
    live = cast(bool, "prop:Bool")
    orientation = cast(int, "prop:Enumeration")
    position = cast(float, "prop:Real")
    pressed = cast(bool, "prop:Bool")
    snap_mode = cast(int, "prop:Enumeration")
    step_size = cast(float, "prop:Real")
    to = cast(float, "prop:Real")
    touch_drag_threshold = "prop:Property"
    value = cast(float, "prop:Real")
    vertical = cast(bool, "prop:Bool")
    visual_position = cast(float, "prop:Real")


class PsSpinBox(PsControl):
    display_text = cast(str, "prop:String")
    down = "prop:Down"
    editable = cast(bool, "prop:Bool")
    from_ = cast(int, "prop:Int")
    input_method_composing = cast(bool, "prop:Bool")
    input_method_hints = "prop:Property"
    step_size = cast(int, "prop:Int")
    text_from_value = "prop:Property"
    to = cast(int, "prop:Int")
    up = "prop:Up"
    validator = "prop:Property"
    value = cast(int, "prop:Int")
    value_from_text = "prop:Property"
    wrap = cast(bool, "prop:Bool")


class PsSplitHandle(PsQtObject):
    pass


class PsSplitView(PsContainer):
    handle = "prop:Property"
    orientation = cast(int, "prop:Enumeration")
    resizing = cast(bool, "prop:Bool")


class PsStackView(PsControl):
    busy = cast(bool, "prop:Bool")
    current_item = "prop:Property"
    depth = cast(int, "prop:Int")
    empty = cast(bool, "prop:Bool")
    initial_item = "prop:Var"
    pop_enter = "prop:Property"
    pop_exit = "prop:Property"
    push_enter = "prop:Property"
    push_exit = "prop:Property"
    replace_enter = "prop:Property"
    replace_exit = "prop:Property"


class PsSwipeDelegate(PsItemDelegate):
    swipe = "prop:Swipe"


class PsSwipeView(PsContainer):
    horizontal = cast(bool, "prop:Bool")
    interactive = cast(bool, "prop:Bool")
    orientation = cast(int, "prop:Enumeration")
    vertical = cast(bool, "prop:Bool")


class PsSwitch(PsAbstractButton):
    position = cast(float, "prop:Real")
    visual_position = cast(float, "prop:Real")


class PsSwitchDelegate(PsItemDelegate):
    position = cast(float, "prop:Real")
    visual_position = cast(float, "prop:Real")


class PsTabBar(PsContainer):
    content_height = cast(float, "prop:Real")
    content_width = cast(float, "prop:Real")
    position = cast(int, "prop:Enumeration")


class PsTabButton(PsAbstractButton):
    pass


class PsTextArea(PsTextEdit):
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    focus_reason = cast(int, "prop:Enumeration")
    hover_enabled = cast(bool, "prop:Bool")
    hovered = cast(bool, "prop:Bool")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    placeholder_text = cast(str, "prop:String")
    placeholder_text_color = cast(str, "prop:Color")
    right_inset = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")


class PsTextField(PsTextInput):
    background = "prop:Property"
    bottom_inset = cast(float, "prop:Real")
    focus_reason = cast(int, "prop:Enumeration")
    hover_enabled = cast(bool, "prop:Bool")
    hovered = cast(bool, "prop:Bool")
    implicit_background_height = cast(float, "prop:Real")
    implicit_background_width = cast(float, "prop:Real")
    left_inset = cast(float, "prop:Real")
    placeholder_text = cast(str, "prop:String")
    placeholder_text_color = cast(str, "prop:Color")
    right_inset = cast(float, "prop:Real")
    top_inset = cast(float, "prop:Real")


class PsToolBar(PsPane):
    position = cast(int, "prop:Enumeration")


class PsToolButton(PsButton):
    pass


class PsToolSeparator(PsControl):
    horizontal = cast(bool, "prop:Bool")
    orientation = cast(int, "prop:Enumeration")
    vertical = cast(bool, "prop:Bool")


class PsToolTip(PsPopup):
    delay = cast(int, "prop:Int")
    text = cast(str, "prop:String")
    timeout = cast(int, "prop:Int")


class PsTumbler(PsControl):
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_item = "prop:Property"
    delegate = "prop:Property"
    model = "prop:Property"
    moving = cast(bool, "prop:Bool")
    visible_item_count = cast(int, "prop:Int")
    wrap = cast(bool, "prop:Bool")


class PsVerticalHeaderView(PsTableView):
    model = "prop:Property"
    sync_view = "prop:Property"
    text_role = "prop:Property"


class PsAccessible(P.PropSheet):
    check_state_mixed = cast(bool, "prop:Bool")
    checkable = cast(bool, "prop:Bool")
    checked = cast(bool, "prop:Bool")
    default_button = cast(bool, "prop:Bool")
    description = cast(str, "prop:String")
    editable = cast(bool, "prop:Bool")
    focusable = cast(bool, "prop:Bool")
    focused = cast(bool, "prop:Bool")
    ignored = cast(bool, "prop:Bool")
    multi_line = cast(bool, "prop:Bool")
    name_ = cast(str, "prop:String")
    password_edit = cast(bool, "prop:Bool")
    pressed = cast(bool, "prop:Bool")
    read_only = cast(bool, "prop:Bool")
    role = cast(int, "prop:Enumeration")
    search_edit = cast(bool, "prop:Bool")
    selectable = cast(bool, "prop:Bool")
    selectable_text = cast(bool, "prop:Bool")
    selected = cast(bool, "prop:Bool")


class PsAnchorAnimation(PsAnimation):
    duration = cast(int, "prop:Int")
    easing = "prop:Easing"
    targets = cast(list, "prop:List")


class PsAnchorChanges(P.PropSheet):
    anchors = "prop:Anchors"
    target = "prop:Property"


class PsAnimatedImage(PsImage):
    current_frame = cast(int, "prop:Int")
    frame_count = cast(int, "prop:Int")
    paused = cast(bool, "prop:Bool")
    playing = cast(bool, "prop:Bool")
    source = cast(str, "prop:Url")
    speed = cast(float, "prop:Real")


class PsAnimatedSprite(PsItem):
    current_frame = cast(int, "prop:Int")
    finish_behavior = cast(int, "prop:Enumeration")
    frame_count = cast(int, "prop:Int")
    frame_duration = cast(int, "prop:Int")
    frame_height = cast(int, "prop:Int")
    frame_rate = "prop:Property"
    frame_sync = cast(bool, "prop:Bool")
    frame_width = cast(int, "prop:Int")
    frame_x = cast(int, "prop:Int")
    frame_y = cast(int, "prop:Int")
    interpolate = cast(bool, "prop:Bool")
    loops = cast(int, "prop:Int")
    paused = cast(bool, "prop:Bool")
    reverse = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")
    source = cast(str, "prop:Url")


class PsBehavior(P.PropSheet):
    animation = "prop:Property"
    enabled = cast(bool, "prop:Bool")
    target_property = "prop:Property"
    target_value = "prop:Property"


class PsBorderImage(PsItem):
    asynchronous = cast(bool, "prop:Bool")
    border = "prop:Border"
    cache = cast(bool, "prop:Bool")
    current_frame = cast(int, "prop:Int")
    frame_count = cast(int, "prop:Int")
    horizontal_tile_mode = cast(int, "prop:Enumeration")
    mirror = cast(bool, "prop:Bool")
    progress = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    source = cast(str, "prop:Url")
    source_size = "prop:Property"
    status = cast(int, "prop:Enumeration")
    vertical_tile_mode = cast(int, "prop:Enumeration")


class PsBorderImageMesh(P.PropSheet):
    border = "prop:Border"
    horizontal_tile_mode = cast(int, "prop:Enumeration")
    size = "prop:Size"
    vertical_tile_mode = cast(int, "prop:Enumeration")


class PsCanvasGradient(P.PropSheet):
    pass


class PsCanvasImageData(P.PropSheet):
    data = "prop:Property"
    height = cast(int, "prop:Int")
    width = cast(int, "prop:Int")


class PsCanvasPixelArray(P.PropSheet):
    length = cast(int, "prop:Int")


class PsColorAnimation(PsPropertyAnimation):
    from_ = cast(str, "prop:Color")
    to = cast(str, "prop:Color")


class PsColorGroup(PsQtObject):
    alternate_base = cast(str, "prop:Color")
    base = cast(str, "prop:Color")
    bright_text = cast(str, "prop:Color")
    button = cast(str, "prop:Color")
    button_text = cast(str, "prop:Color")
    dark = cast(str, "prop:Color")
    highlight = cast(str, "prop:Color")
    highlighted_text = cast(str, "prop:Color")
    light = cast(str, "prop:Color")
    link = cast(str, "prop:Color")
    link_visited = cast(str, "prop:Color")
    mid = cast(str, "prop:Color")
    midlight = cast(str, "prop:Color")
    shadow = cast(str, "prop:Color")
    text = cast(str, "prop:Color")
    tool_tip_base = cast(str, "prop:Color")
    tool_tip_text = cast(str, "prop:Color")
    window = cast(str, "prop:Color")
    window_text = cast(str, "prop:Color")


class PsColumn(PsItem):
    add = "prop:Property"
    bottom_padding = cast(float, "prop:Real")
    left_padding = cast(float, "prop:Real")
    move = "prop:Property"
    padding = cast(float, "prop:Real")
    populate = "prop:Property"
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")


class PsContext2D(P.PropSheet):
    canvas = "prop:Property"
    fill_rule = cast(int, "prop:Enumeration")
    fill_style = "prop:Property"
    font = cast(str, "prop:String")
    global_alpha = cast(float, "prop:Real")
    global_composite_operation = cast(str, "prop:String")
    line_cap = cast(str, "prop:String")
    line_dash_offset = cast(float, "prop:Real")
    line_join = cast(str, "prop:String")
    line_width = cast(float, "prop:Real")
    miter_limit = cast(float, "prop:Real")
    shadow_blur = cast(float, "prop:Real")
    shadow_color = cast(str, "prop:String")
    shadow_offset_x = "prop:Property"
    shadow_offset_y = "prop:Property"
    stroke_style = "prop:Property"
    text_align = cast(str, "prop:String")
    text_baseline = cast(str, "prop:String")


class PsDoubleValidator(P.PropSheet):
    bottom = cast(float, "prop:Real")
    decimals = cast(int, "prop:Int")
    locale = cast(str, "prop:String")
    notation = cast(int, "prop:Enumeration")
    top = cast(float, "prop:Real")


class PsDrag(P.PropSheet):
    pass


class PsDragEvent(P.PropSheet):
    accepted = cast(bool, "prop:Bool")
    action = cast(int, "prop:Enumeration")
    color_data = cast(str, "prop:Color")
    formats = "prop:Property"
    has_color = cast(bool, "prop:Bool")
    has_html = cast(bool, "prop:Bool")
    has_text = cast(bool, "prop:Bool")
    has_urls = cast(bool, "prop:Bool")
    html = cast(str, "prop:String")
    keys = "prop:Property"
    proposed_action = "prop:Property"
    supported_actions = "prop:Property"
    text = cast(str, "prop:String")
    urls = "prop:Property"
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsDragHandler(PsMultiPointHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    target = "prop:Property"
    translation = "prop:Property"
    x_axis = "prop:XAxis"
    y_axis = "prop:YAxis"


class PsDropArea(PsItem):
    contains_drag = cast(bool, "prop:Bool")
    drag = "prop:Drag"
    keys = "prop:Property"


class PsEnterKey(P.PropSheet):
    action_id = cast(int, "prop:Int")
    active = cast(bool, "prop:Bool")
    alternative_keys = "prop:Var"
    display_text = cast(str, "prop:String")
    effective_alternative_keys = "prop:Var"
    effective_alternative_keys_highlight_index = cast(int, "prop:Int")
    function_key = cast(bool, "prop:Bool")
    highlighted = cast(bool, "prop:Bool")
    key = cast(int, "prop:Int")
    key_panel_delegate = "prop:Property"
    key_type = cast(int, "prop:Int")
    no_key_event = cast(bool, "prop:Bool")
    no_modifier = cast(bool, "prop:Bool")
    pressed = cast(bool, "prop:Bool")
    repeat = cast(bool, "prop:Bool")
    show_preview = cast(bool, "prop:Bool")
    small_text = cast(str, "prop:String")
    small_text_visible = cast(bool, "prop:Bool")
    sound_effect = cast(str, "prop:Url")
    text = cast(str, "prop:String")
    uppercased = cast(bool, "prop:Bool")
    weight = cast(float, "prop:Real")
    active_focus = cast(bool, "prop:Bool")
    active_focus_on_tab = cast(bool, "prop:Bool")
    anchors = "prop:Anchors"
    antialiasing = cast(bool, "prop:Bool")
    baseline_offset = cast(int, "prop:Int")
    children = cast(list, "prop:List")
    children_rect = "prop:ChildrenRect"
    clip = cast(bool, "prop:Bool")
    containment_mask = "prop:Property"
    data = cast(list, "prop:List")
    enabled = cast(bool, "prop:Bool")
    focus = cast(bool, "prop:Bool")
    height = cast(float, "prop:Real")
    implicit_height = cast(float, "prop:Real")
    implicit_width = cast(float, "prop:Real")
    opacity = cast(float, "prop:Real")
    palette = "prop:Property"
    parent = "prop:Property"
    resources = cast(list, "prop:List")
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    smooth = cast(bool, "prop:Bool")
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transform = cast(list, "prop:List")
    transform_origin = cast(int, "prop:Enumeration")
    transitions = cast(list, "prop:List")
    visible = cast(bool, "prop:Bool")
    visible_children = cast(list, "prop:List")
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    z = cast(float, "prop:Real")
    object_name = cast(str, "prop:String")


class PsFlipable(PsItem):
    back = "prop:Property"
    front = "prop:Property"
    side = cast(int, "prop:Enumeration")


class PsFlow(PsItem):
    add = "prop:Property"
    bottom_padding = cast(float, "prop:Real")
    effective_layout_direction = cast(int, "prop:Enumeration")
    flow = cast(int, "prop:Enumeration")
    layout_direction = cast(int, "prop:Enumeration")
    left_padding = cast(float, "prop:Real")
    move = "prop:Property"
    padding = cast(float, "prop:Real")
    populate = "prop:Property"
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")


class PsFocusScope(PsItem):
    pass


class PsFontLoader(P.PropSheet):
    font = "prop:Font"
    name_ = cast(str, "prop:String")
    source = cast(str, "prop:Url")
    status = cast(int, "prop:Enumeration")


class PsFontMetrics(P.PropSheet):
    ascent = cast(float, "prop:Real")
    average_character_width = cast(float, "prop:Real")
    descent = cast(float, "prop:Real")
    font = "prop:Font"
    height = cast(float, "prop:Real")
    leading = cast(float, "prop:Real")
    line_spacing = cast(float, "prop:Real")
    line_width = cast(float, "prop:Real")
    maximum_character_width = cast(float, "prop:Real")
    minimum_left_bearing = cast(float, "prop:Real")
    minimum_right_bearing = cast(float, "prop:Real")
    overline_position = cast(float, "prop:Real")
    strike_out_position = cast(float, "prop:Real")
    underline_position = cast(float, "prop:Real")
    x_height = cast(float, "prop:Real")


class PsGestureEvent(P.PropSheet):
    drag_threshold = cast(float, "prop:Real")
    touch_points = cast(list, "prop:List")


class PsGradientStop(P.PropSheet):
    color = cast(str, "prop:Color")
    position = cast(float, "prop:Real")


class PsGraphicsInfo(P.PropSheet):
    api = cast(int, "prop:Enumeration")
    major_version = cast(int, "prop:Int")
    minor_version = cast(int, "prop:Int")
    profile = cast(int, "prop:Enumeration")
    renderable_type = cast(int, "prop:Enumeration")
    shader_compilation_type = cast(int, "prop:Enumeration")
    shader_source_type = cast(int, "prop:Enumeration")
    shader_type = cast(int, "prop:Enumeration")


class PsGrid(PsItem):
    add = "prop:Property"
    bottom_padding = cast(float, "prop:Real")
    column_spacing = "prop:Property"
    columns = cast(int, "prop:Int")
    effective_horizontal_item_alignment = cast(int, "prop:Enumeration")
    effective_layout_direction = cast(int, "prop:Enumeration")
    flow = cast(int, "prop:Enumeration")
    horizontal_item_alignment = cast(int, "prop:Enumeration")
    layout_direction = cast(int, "prop:Enumeration")
    left_padding = cast(float, "prop:Real")
    move = "prop:Property"
    padding = cast(float, "prop:Real")
    populate = "prop:Property"
    right_padding = cast(float, "prop:Real")
    row_spacing = "prop:Property"
    rows = cast(int, "prop:Int")
    spacing = "prop:Property"
    top_padding = cast(float, "prop:Real")
    vertical_item_alignment = cast(int, "prop:Enumeration")


class PsGridMesh(P.PropSheet):
    resolution = "prop:Size"


class PsGridView(PsFlickable):
    add = "prop:Property"
    add_displaced = "prop:Property"
    cache_buffer = cast(int, "prop:Int")
    cell_height = cast(float, "prop:Real")
    cell_width = cast(float, "prop:Real")
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_item = "prop:Property"
    delegate = "prop:Property"
    displaced = "prop:Property"
    display_margin_beginning = cast(int, "prop:Int")
    display_margin_end = cast(int, "prop:Int")
    effective_layout_direction = cast(int, "prop:Enumeration")
    flow = cast(int, "prop:Enumeration")
    footer = "prop:Property"
    footer_item = "prop:Property"
    header = "prop:Property"
    header_item = "prop:Property"
    highlight = "prop:Property"
    highlight_follows_current_item = cast(bool, "prop:Bool")
    highlight_item = "prop:Property"
    highlight_move_duration = cast(int, "prop:Int")
    highlight_range_mode = cast(int, "prop:Enumeration")
    key_navigation_enabled = cast(bool, "prop:Bool")
    key_navigation_wraps = cast(bool, "prop:Bool")
    layout_direction = cast(int, "prop:Enumeration")
    model = "prop:Property"
    move = "prop:Property"
    move_displaced = "prop:Property"
    populate = "prop:Property"
    preferred_highlight_begin = cast(float, "prop:Real")
    preferred_highlight_end = cast(float, "prop:Real")
    remove = "prop:Property"
    remove_displaced = "prop:Property"
    snap_mode = cast(int, "prop:Enumeration")
    vertical_layout_direction = cast(int, "prop:Enumeration")


class PsHandlerPoint(P.PropSheet):
    ellipse_diameters = "prop:Size"
    id = cast(int, "prop:Int")
    modifiers = cast(int, "prop:Enumeration")
    position = "prop:Property"
    press_position = "prop:Property"
    pressed_buttons = cast(int, "prop:Enumeration")
    pressure = "prop:Property"
    rotation = "prop:Property"
    scene_grab_position = "prop:Property"
    scene_position = "prop:Property"
    scene_press_position = "prop:Property"
    unique_id = "prop:Property"
    velocity = "prop:Property"


class PsHoverHandler(PsSinglePointHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    hovered = cast(bool, "prop:Bool")
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    point = "prop:Property"
    target = "prop:Property"


class PsIntValidator(P.PropSheet):
    bottom = cast(int, "prop:Int")
    locale = cast(str, "prop:String")
    top = cast(int, "prop:Int")


class PsItemGrabResult(PsQtObject):
    image = "prop:Property"
    url = cast(str, "prop:Url")


class PsKeyNavigation(P.PropSheet):
    pass


class PsKeys(P.PropSheet):
    enabled = cast(bool, "prop:Bool")
    forward_to = cast(list, "prop:List")
    priority = cast(int, "prop:Enumeration")


class PsLayoutMirroring(P.PropSheet):
    children_inherit = cast(bool, "prop:Bool")
    enabled = cast(bool, "prop:Bool")


class PsListView(PsFlickable):
    add = "prop:Property"
    add_displaced = "prop:Property"
    cache_buffer = cast(int, "prop:Int")
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_item = "prop:Property"
    current_section = cast(str, "prop:String")
    delegate = "prop:Property"
    displaced = "prop:Property"
    display_margin_beginning = cast(int, "prop:Int")
    display_margin_end = cast(int, "prop:Int")
    effective_layout_direction = cast(int, "prop:Enumeration")
    footer = "prop:Property"
    footer_item = "prop:Property"
    footer_positioning = cast(int, "prop:Enumeration")
    header = "prop:Property"
    header_item = "prop:Property"
    header_positioning = cast(int, "prop:Enumeration")
    highlight = "prop:Property"
    highlight_follows_current_item = cast(bool, "prop:Bool")
    highlight_item = "prop:Property"
    highlight_move_duration = cast(int, "prop:Int")
    highlight_move_velocity = cast(float, "prop:Real")
    highlight_range_mode = cast(int, "prop:Enumeration")
    highlight_resize_duration = cast(int, "prop:Int")
    highlight_resize_velocity = cast(float, "prop:Real")
    key_navigation_enabled = cast(bool, "prop:Bool")
    key_navigation_wraps = cast(bool, "prop:Bool")
    layout_direction = cast(int, "prop:Enumeration")
    model = "prop:Property"
    move = "prop:Property"
    move_displaced = "prop:Property"
    orientation = cast(int, "prop:Enumeration")
    populate = "prop:Property"
    preferred_highlight_begin = cast(float, "prop:Real")
    preferred_highlight_end = cast(float, "prop:Real")
    remove = "prop:Property"
    remove_displaced = "prop:Property"
    reuse_items = cast(bool, "prop:Bool")
    section = "prop:Section"
    snap_mode = cast(int, "prop:Enumeration")
    spacing = cast(float, "prop:Real")
    vertical_layout_direction = cast(int, "prop:Enumeration")


class PsMatrix4x4(P.PropSheet):
    matrix = "prop:Property"


class PsMouseArea(PsItem):
    accepted_buttons = "prop:Property"
    contains_mouse = cast(bool, "prop:Bool")
    contains_press = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag = "prop:Drag"
    enabled = cast(bool, "prop:Bool")
    hover_enabled = cast(bool, "prop:Bool")
    mouse_x = cast(float, "prop:Real")
    mouse_y = cast(float, "prop:Real")
    press_and_hold_interval = cast(int, "prop:Int")
    pressed = cast(bool, "prop:Bool")
    pressed_buttons = "prop:Property"
    prevent_stealing = cast(bool, "prop:Bool")
    propagate_composed_events = cast(bool, "prop:Bool")
    scroll_gesture_enabled = cast(bool, "prop:Bool")


class PsOpacityAnimator(PsAnimator):
    pass


class PsPalette(P.PropSheet):
    active = "prop:Property"
    disabled = "prop:Property"
    inactive = "prop:Property"


class PsParallelAnimation(PsAnimation):
    pass


class PsParentAnimation(PsAnimation):
    new_parent = "prop:Property"
    target = "prop:Property"
    via = "prop:Property"


class PsParentChange(P.PropSheet):
    height = cast(float, "prop:Real")
    parent = "prop:Property"
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    target = "prop:Property"
    width = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathAngleArc(P.PropSheet):
    center_x = cast(float, "prop:Real")
    center_y = cast(float, "prop:Real")
    move_to_start = cast(bool, "prop:Bool")
    radius_x = cast(float, "prop:Real")
    radius_y = cast(float, "prop:Real")
    start_angle = cast(float, "prop:Real")
    sweep_angle = cast(float, "prop:Real")


class PsPathAnimation(PsAnimation):
    anchor_point = "prop:Point"
    duration = cast(int, "prop:Int")
    easing = "prop:Easing"
    end_rotation = cast(float, "prop:Real")
    orientation = cast(int, "prop:Enumeration")
    orientation_entry_duration = cast(float, "prop:Real")
    orientation_exit_duration = cast(float, "prop:Real")
    path = "prop:Property"
    target = "prop:Property"


class PsPathArc(P.PropSheet):
    direction = cast(int, "prop:Enumeration")
    radius_x = cast(float, "prop:Real")
    radius_y = cast(float, "prop:Real")
    relative_x = cast(float, "prop:Real")
    relative_y = cast(float, "prop:Real")
    use_large_arc = cast(bool, "prop:Bool")
    x = cast(float, "prop:Real")
    x_axis_rotation = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathAttribute(P.PropSheet):
    name_ = cast(str, "prop:String")
    value = cast(float, "prop:Real")


class PsPathCubic(P.PropSheet):
    control1x = cast(float, "prop:Real")
    control1y = cast(float, "prop:Real")
    control2x = cast(float, "prop:Real")
    control2y = cast(float, "prop:Real")
    relative_control1x = cast(float, "prop:Real")
    relative_control1y = cast(float, "prop:Real")
    relative_control2x = cast(float, "prop:Real")
    relative_control2y = cast(float, "prop:Real")
    relative_x = cast(float, "prop:Real")
    relative_y = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathCurve(P.PropSheet):
    relative_x = cast(float, "prop:Real")
    relative_y = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathElement(P.PropSheet):
    pass


class PsPathInterpolator(P.PropSheet):
    angle = cast(float, "prop:Real")
    path = "prop:Property"
    progress = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathLine(P.PropSheet):
    relative_x = cast(float, "prop:Real")
    relative_y = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathMove(P.PropSheet):
    relative_x = cast(float, "prop:Real")
    relative_y = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathMultiline(P.PropSheet):
    paths = cast(list, "prop:List")
    start = "prop:Point"


class PsPathPercent(P.PropSheet):
    value = cast(float, "prop:Real")


class PsPathPolyline(P.PropSheet):
    path = cast(list, "prop:List")
    start = "prop:Point"


class PsPathQuad(P.PropSheet):
    control_x = cast(float, "prop:Real")
    control_y = cast(float, "prop:Real")
    relative_control_x = cast(float, "prop:Real")
    relative_control_y = cast(float, "prop:Real")
    relative_x = cast(float, "prop:Real")
    relative_y = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathSvg(P.PropSheet):
    path = cast(str, "prop:String")


class PsPathText(P.PropSheet):
    text = cast(str, "prop:String")
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsPathView(PsItem):
    cache_item_count = cast(int, "prop:Int")
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")
    current_item = "prop:Property"
    delegate = "prop:Property"
    drag_margin = cast(float, "prop:Real")
    dragging = cast(bool, "prop:Bool")
    flick_deceleration = cast(float, "prop:Real")
    flicking = cast(bool, "prop:Bool")
    highlight = "prop:Property"
    highlight_item = "prop:Property"
    highlight_move_duration = cast(int, "prop:Int")
    highlight_range_mode = cast(int, "prop:Enumeration")
    interactive = cast(bool, "prop:Bool")
    maximum_flick_velocity = cast(float, "prop:Real")
    model = "prop:Property"
    movement_direction = cast(int, "prop:Enumeration")
    moving = cast(bool, "prop:Bool")
    offset = cast(float, "prop:Real")
    path = "prop:Property"
    path_item_count = cast(int, "prop:Int")
    preferred_highlight_begin = cast(float, "prop:Real")
    preferred_highlight_end = cast(float, "prop:Real")
    snap_mode = cast(int, "prop:Enumeration")


class PsPauseAnimation(PsAnimation):
    duration = cast(int, "prop:Int")


class PsPinchArea(PsItem):
    enabled = cast(bool, "prop:Bool")
    pinch = "prop:Pinch"


class PsPinchEvent(P.PropSheet):
    accepted = cast(bool, "prop:Bool")
    angle = cast(float, "prop:Real")
    center = "prop:Property"
    point1 = "prop:Property"
    point2 = "prop:Property"
    point_count = cast(int, "prop:Int")
    previous_angle = cast(float, "prop:Real")
    previous_center = "prop:Property"
    previous_scale = cast(float, "prop:Real")
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    start_center = "prop:Property"
    start_point1 = "prop:Property"
    start_point2 = "prop:Property"


class PsPinchHandler(PsMultiPointHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    active_scale = cast(float, "prop:Real")
    centroid = "prop:Property"
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    maximum_rotation = cast(float, "prop:Real")
    maximum_scale = cast(float, "prop:Real")
    minimum_rotation = cast(float, "prop:Real")
    minimum_scale = cast(float, "prop:Real")
    parent = "prop:Property"
    rotation = cast(float, "prop:Real")
    scale = cast(float, "prop:Real")
    target = "prop:Property"
    translation = "prop:Property"
    x_axis = "prop:XAxis"
    y_axis = "prop:YAxis"


class PsPointHandler(PsSinglePointHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    point = "prop:Property"
    target = "prop:Property"


class PsPositioner(P.PropSheet):
    pass


class PsPropertyAction(PsAnimation):
    exclude = cast(list, "prop:List")
    properties_ = cast(str, "prop:String")
    property = cast(str, "prop:String")
    target = "prop:Property"
    targets = cast(list, "prop:List")
    value = "prop:Property"


class PsPropertyChanges(P.PropSheet):
    explicit = cast(bool, "prop:Bool")
    restore_entry_values = cast(bool, "prop:Bool")
    target = "prop:Property"


class PsRegularExpressionValidator(P.PropSheet):
    regular_expression = "prop:Property"


class PsRepeater(PsItem):
    count = cast(int, "prop:Int")
    delegate = "prop:Property"
    model = "prop:Property"


class PsRotation(P.PropSheet):
    angle = cast(float, "prop:Real")
    axis = "prop:Axis"
    origin = "prop:Origin"


class PsRotationAnimation(PsPropertyAnimation):
    direction = cast(int, "prop:Enumeration")
    from_ = cast(float, "prop:Real")
    to = cast(float, "prop:Real")


class PsRotationAnimator(PsAnimator):
    direction = cast(int, "prop:Enumeration")


class PsRow(PsItem):
    add = "prop:Property"
    bottom_padding = cast(float, "prop:Real")
    effective_layout_direction = cast(int, "prop:Enumeration")
    layout_direction = cast(int, "prop:Enumeration")
    left_padding = cast(float, "prop:Real")
    move = "prop:Property"
    padding = cast(float, "prop:Real")
    populate = "prop:Property"
    right_padding = cast(float, "prop:Real")
    spacing = cast(float, "prop:Real")
    top_padding = cast(float, "prop:Real")


class PsScale(P.PropSheet):
    origin = "prop:Origin"
    x_scale = cast(float, "prop:Real")
    y_scale = cast(float, "prop:Real")


class PsScaleAnimator(PsAnimator):
    pass


class PsScriptAction(PsAnimation):
    script = "prop:Property"
    script_name = cast(str, "prop:String")


class PsSequentialAnimation(PsAnimation):
    pass


class PsShaderEffect(PsItem):
    blending = cast(bool, "prop:Bool")
    cull_mode = cast(int, "prop:Enumeration")
    fragment_shader = cast(str, "prop:Url")
    log = cast(str, "prop:String")
    mesh = "prop:Property"
    status = cast(int, "prop:Enumeration")
    supports_atlas_textures = cast(bool, "prop:Bool")
    vertex_shader = cast(str, "prop:Url")


class PsShaderEffectSource(PsItem):
    format = cast(int, "prop:Enumeration")
    hide_source = cast(bool, "prop:Bool")
    live = cast(bool, "prop:Bool")
    mipmap = cast(bool, "prop:Bool")
    recursive = cast(bool, "prop:Bool")
    samples = cast(int, "prop:Int")
    source_item = "prop:Property"
    source_rect = "prop:Rect"
    texture_mirroring = cast(int, "prop:Enumeration")
    texture_size = "prop:Size"
    wrap_mode = cast(int, "prop:Enumeration")


class PsShortcut(P.PropSheet):
    auto_repeat = cast(bool, "prop:Bool")
    context = cast(int, "prop:Enumeration")
    enabled = cast(bool, "prop:Bool")
    native_text = cast(str, "prop:String")
    portable_text = cast(str, "prop:String")
    sequence = "prop:Property"
    sequences = cast(list, "prop:List")


class PsSmoothedAnimation(PsNumberAnimation):
    duration = cast(int, "prop:Int")
    maximum_easing_time = cast(int, "prop:Int")
    reversing_mode = cast(int, "prop:Enumeration")
    velocity = cast(float, "prop:Real")


class PsSpringAnimation(PsNumberAnimation):
    damping = cast(float, "prop:Real")
    epsilon = cast(float, "prop:Real")
    mass = cast(float, "prop:Real")
    modulus = cast(float, "prop:Real")
    spring = cast(float, "prop:Real")
    velocity = cast(float, "prop:Real")


class PsSprite(P.PropSheet):
    duration = cast(int, "prop:Int")
    duration_variation = cast(int, "prop:Int")
    frame_count = cast(int, "prop:Int")
    frame_duration = cast(int, "prop:Int")
    frame_duration_variation = cast(int, "prop:Int")
    frame_height = cast(int, "prop:Int")
    frame_rate = "prop:Property"
    frame_rate_variation = "prop:Property"
    frame_sync = cast(bool, "prop:Bool")
    frame_width = cast(int, "prop:Int")
    frame_x = cast(int, "prop:Int")
    frame_y = cast(int, "prop:Int")
    name_ = cast(str, "prop:String")
    random_start = cast(bool, "prop:Bool")
    reverse = cast(bool, "prop:Bool")
    source = cast(str, "prop:Url")
    to = "prop:Property"


class PsSpriteSequence(PsItem):
    current_sprite = cast(str, "prop:String")
    goal_sprite = cast(str, "prop:String")
    interpolate = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")
    sprites = cast(list, "prop:List")


class PsState(P.PropSheet):
    changes = cast(list, "prop:List")
    extend = cast(str, "prop:String")
    name_ = cast(str, "prop:String")
    when = cast(bool, "prop:Bool")


class PsStateChangeScript(P.PropSheet):
    name_ = cast(str, "prop:String")
    script = "prop:Property"


class PsStateGroup(P.PropSheet):
    state = cast(str, "prop:String")
    states = cast(list, "prop:List")
    transitions = cast(list, "prop:List")


class PsSystemPalette(P.PropSheet):
    alternate_base = cast(str, "prop:Color")
    base = cast(str, "prop:Color")
    button = cast(str, "prop:Color")
    button_text = cast(str, "prop:Color")
    color_group = cast(int, "prop:Enumeration")
    dark = cast(str, "prop:Color")
    highlight = cast(str, "prop:Color")
    highlighted_text = cast(str, "prop:Color")
    light = cast(str, "prop:Color")
    mid = cast(str, "prop:Color")
    midlight = cast(str, "prop:Color")
    shadow = cast(str, "prop:Color")
    text = cast(str, "prop:Color")
    window = cast(str, "prop:Color")
    window_text = cast(str, "prop:Color")


class PsTapHandler(PsSinglePointHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    gesture_policy = cast(int, "prop:Enumeration")
    grab_permissions = "prop:Property"
    long_press_threshold = cast(float, "prop:Real")
    margin = cast(float, "prop:Real")
    parent = "prop:Property"
    point = "prop:Property"
    pressed = cast(bool, "prop:Bool")
    tap_count = cast(int, "prop:Int")
    target = "prop:Property"
    time_held = cast(float, "prop:Real")


class PsTextMetrics(P.PropSheet):
    advance_width = cast(float, "prop:Real")
    bounding_rect = "prop:Rect"
    elide = cast(int, "prop:Enumeration")
    elide_width = cast(float, "prop:Real")
    elided_text = cast(str, "prop:String")
    font = "prop:Font"
    height = cast(float, "prop:Real")
    text = cast(str, "prop:String")
    tight_bounding_rect = "prop:Rect"
    width = cast(float, "prop:Real")


class PsTouchPoint(P.PropSheet):
    ellipse_diameters = "prop:Size"
    point_id = cast(int, "prop:Int")
    pressed = cast(bool, "prop:Bool")
    pressure = cast(float, "prop:Real")
    previous_x = cast(float, "prop:Real")
    previous_y = cast(float, "prop:Real")
    rotation = cast(float, "prop:Real")
    scene_x = cast(float, "prop:Real")
    scene_y = cast(float, "prop:Real")
    start_x = cast(float, "prop:Real")
    start_y = cast(float, "prop:Real")
    unique_id = "prop:Property"
    velocity = "prop:Vector2D"
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsTransition(P.PropSheet):
    animations = cast(list, "prop:List")
    enabled = cast(bool, "prop:Bool")
    from_ = cast(str, "prop:String")
    reversible = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")
    to = cast(str, "prop:String")


class PsTranslate(P.PropSheet):
    x = cast(float, "prop:Real")
    y = cast(float, "prop:Real")


class PsUniformAnimator(PsAnimator):
    uniform = cast(str, "prop:String")


class PsVector3dAnimation(PsPropertyAnimation):
    from_ = "prop:Vector3D"
    to = "prop:Vector3D"


class PsViewTransition(P.PropSheet):
    pass


class PsWheelHandler(PsSinglePointHandler):
    accepted_buttons = "prop:Property"
    accepted_devices = "prop:Property"
    accepted_modifiers = "prop:Property"
    accepted_pointer_types = "prop:Property"
    active = cast(bool, "prop:Bool")
    active_timeout = cast(float, "prop:Real")
    cursor_shape = "prop:Property"
    drag_threshold = cast(int, "prop:Int")
    enabled = cast(bool, "prop:Bool")
    grab_permissions = "prop:Property"
    invertible = cast(bool, "prop:Bool")
    margin = cast(float, "prop:Real")
    orientation = "prop:Property"
    parent = "prop:Property"
    point = "prop:Property"
    property = cast(str, "prop:String")
    rotation = cast(float, "prop:Real")
    rotation_scale = cast(float, "prop:Real")
    target = "prop:Property"
    target_scale_multiplier = cast(float, "prop:Real")
    target_transform_around_cursor = cast(bool, "prop:Bool")


class PsXAnimator(PsAnimator):
    pass


class PsYAnimator(PsAnimator):
    pass


class PsAge(PsAffector):
    advance_position = cast(bool, "prop:Bool")
    life_left = cast(int, "prop:Int")


class PsAngleDirection(PsDirection):
    angle = cast(float, "prop:Real")
    angle_variation = cast(float, "prop:Real")
    magnitude = cast(float, "prop:Real")
    magnitude_variation = cast(float, "prop:Real")


class PsAttractor(PsAffector):
    affected_parameter = "prop:Property"
    proportional_to_distance = "prop:Property"


class PsCumulativeDirection(PsDirection):
    pass


class PsEllipseShape(PsShape):
    fill = cast(bool, "prop:Bool")


class PsEmitter(P.PropSheet):
    acceleration = "prop:Property"
    emit_rate = cast(float, "prop:Real")
    enabled = cast(bool, "prop:Bool")
    end_size = cast(float, "prop:Real")
    group = cast(str, "prop:String")
    life_span = cast(int, "prop:Int")
    life_span_variation = cast(int, "prop:Int")
    maximum_emitted = cast(int, "prop:Int")
    shape = "prop:Property"
    size = cast(float, "prop:Real")
    size_variation = cast(float, "prop:Real")
    start_time = cast(int, "prop:Int")
    system = "prop:Property"
    velocity = "prop:Property"
    velocity_from_movement = "prop:Property"


class PsFriction(PsAffector):
    factor = cast(float, "prop:Real")
    threshold = cast(float, "prop:Real")


class PsGravity(PsAffector):
    angle = cast(float, "prop:Real")
    magnitude = cast(float, "prop:Real")


class PsGroupGoal(PsAffector):
    goal_state = cast(str, "prop:String")
    jump = cast(bool, "prop:Bool")


class PsImageParticle(PsParticlePainter):
    alpha = cast(float, "prop:Real")
    alpha_variation = cast(float, "prop:Real")
    auto_rotation = cast(bool, "prop:Bool")
    blue_variation = cast(float, "prop:Real")
    color = cast(str, "prop:Color")
    color_table = cast(str, "prop:Url")
    color_variation = cast(float, "prop:Real")
    entry_effect = "prop:Property"
    green_variation = cast(float, "prop:Real")
    opacity_table = cast(str, "prop:Url")
    red_variation = cast(float, "prop:Real")
    rotation = cast(float, "prop:Real")
    rotation_variation = cast(float, "prop:Real")
    rotation_velocity = cast(float, "prop:Real")
    rotation_velocity_variation = cast(float, "prop:Real")
    size_table = cast(str, "prop:Url")
    source = cast(str, "prop:Url")
    sprites = cast(list, "prop:List")
    sprites_interpolate = cast(bool, "prop:Bool")
    status = "prop:Property"
    x_vector = "prop:Property"
    y_vector = "prop:Property"


class PsItemParticle(PsParticlePainter):
    delegate = "prop:Property"
    fade = cast(bool, "prop:Bool")


class PsLineShape(PsShape):
    mirrored = cast(bool, "prop:Bool")


class PsMaskShape(PsShape):
    source = cast(str, "prop:Url")


class PsParticle(P.PropSheet):
    alpha = cast(float, "prop:Real")
    auto_rotate = cast(bool, "prop:Bool")
    ax = cast(float, "prop:Real")
    ay = cast(float, "prop:Real")
    blue = cast(float, "prop:Real")
    current_size = cast(float, "prop:Real")
    end_size = cast(float, "prop:Real")
    green = cast(float, "prop:Real")
    initial_ax = cast(float, "prop:Real")
    initial_ay = cast(float, "prop:Real")
    initial_vx = cast(float, "prop:Real")
    initial_vy = cast(float, "prop:Real")
    initial_x = cast(float, "prop:Real")
    initial_y = cast(float, "prop:Real")
    life_left = cast(float, "prop:Real")
    life_span = cast(float, "prop:Real")
    red = cast(float, "prop:Real")
    rotation = cast(float, "prop:Real")
    rotation_velocity = cast(float, "prop:Real")
    start_size = cast(float, "prop:Real")
    t = cast(float, "prop:Real")
    update = cast(bool, "prop:Bool")
    vx = cast(float, "prop:Real")
    vy = cast(float, "prop:Real")
    x = cast(float, "prop:Real")
    x_deformation_vector_x = cast(float, "prop:Real")
    x_deformation_vector_y = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    y_deformation_vector_x = cast(float, "prop:Real")
    y_deformation_vector_y = cast(float, "prop:Real")


class PsParticleExtruder(P.PropSheet):
    pass


class PsParticleGroup(P.PropSheet):
    duration = cast(int, "prop:Int")
    duration_variation = "prop:Property"
    name_ = cast(str, "prop:String")
    system = "prop:Property"
    to = "prop:Property"


class PsParticleSystem(P.PropSheet):
    empty = cast(bool, "prop:Bool")
    particle_states = cast(list, "prop:List")
    paused = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")


class PsPointDirection(PsDirection):
    x = cast(float, "prop:Real")
    x_variation = cast(float, "prop:Real")
    y = cast(float, "prop:Real")
    y_variation = cast(float, "prop:Real")


class PsRectangleShape(P.PropSheet):
    pass


class PsSpriteGoal(PsAffector):
    goal_state = cast(str, "prop:String")
    jump = cast(bool, "prop:Bool")
    system_states = cast(bool, "prop:Bool")


class PsTargetDirection(PsDirection):
    magnitude = cast(float, "prop:Real")
    magnitude_variation = cast(float, "prop:Real")
    proportional_magnitude = cast(bool, "prop:Bool")
    target_item = "prop:Property"
    target_variation = cast(float, "prop:Real")
    target_x = cast(float, "prop:Real")
    target_y = cast(float, "prop:Real")


class PsTrailEmitter(P.PropSheet):
    emit_height = cast(float, "prop:Real")
    emit_rate_per_particle = cast(float, "prop:Real")
    emit_shape = "prop:Property"
    emit_width = cast(float, "prop:Real")
    follow = cast(str, "prop:String")
    velocity_from_movement = "prop:Property"


class PsTurbulence(PsAffector):
    noise_source = cast(str, "prop:Url")
    strength = cast(float, "prop:Real")


class PsWander(PsAffector):
    affected_parameter = "prop:Property"
    pace = cast(float, "prop:Real")
    x_variance = cast(float, "prop:Real")
    y_variance = cast(float, "prop:Real")


class PsBoundaryRule(P.PropSheet):
    current_overshoot = "prop:Property"
    easing = "prop:Property"
    enabled = cast(bool, "prop:Bool")
    maximum = "prop:Property"
    maximum_overshoot = "prop:Property"
    minimum = "prop:Property"
    minimum_overshoot = "prop:Property"
    overshoot_filter = "prop:Property"
    overshoot_scale = "prop:Property"
    peak_overshoot = "prop:Property"
    return_duration = cast(int, "prop:Int")


class PsGridLayout(PsItem):
    column_spacing = cast(float, "prop:Real")
    columns = cast(int, "prop:Int")
    flow = cast(int, "prop:Enumeration")
    layout_direction = cast(int, "prop:Enumeration")
    row_spacing = cast(float, "prop:Real")
    rows = cast(int, "prop:Int")


class PsLayout(P.PropSheet):
    pass


class PsStackLayout(PsItem):
    count = cast(int, "prop:Int")
    current_index = cast(int, "prop:Int")


class PsConicalGradient(PsShapeGradient):
    angle = cast(float, "prop:Real")
    center_x = cast(float, "prop:Real")
    center_y = cast(float, "prop:Real")


class PsLinearGradient(PsShapeGradient):
    x1 = cast(float, "prop:Real")
    x2 = cast(float, "prop:Real")
    y1 = cast(float, "prop:Real")
    y2 = cast(float, "prop:Real")


class PsRadialGradient(PsShapeGradient):
    center_radius = cast(float, "prop:Real")
    center_x = cast(float, "prop:Real")
    center_y = cast(float, "prop:Real")
    focal_radius = cast(float, "prop:Real")
    focal_x = cast(float, "prop:Real")
    focal_y = cast(float, "prop:Real")


class PsShapePath(PsPath):
    cap_style = cast(int, "prop:Enumeration")
    dash_offset = cast(float, "prop:Real")
    dash_pattern = cast(list, "prop:List")
    fill_color = cast(str, "prop:Color")
    fill_gradient = "prop:Property"
    fill_rule = cast(int, "prop:Enumeration")
    join_style = cast(int, "prop:Enumeration")
    miter_limit = cast(int, "prop:Int")
    stroke_color = cast(str, "prop:Color")
    stroke_style = cast(int, "prop:Enumeration")
    stroke_width = cast(float, "prop:Real")


class PsFolderListModel(P.PropSheet):
    case_sensitive = cast(bool, "prop:Bool")
    count = cast(int, "prop:Int")
    folder = cast(str, "prop:Url")
    name_filters = cast(list, "prop:List")
    parent_folder = cast(str, "prop:Url")
    root_folder = cast(str, "prop:Url")
    show_dirs = cast(bool, "prop:Bool")
    show_dirs_first = cast(bool, "prop:Bool")
    show_dot_and_dot_dot = cast(bool, "prop:Bool")
    show_files = cast(bool, "prop:Bool")
    show_hidden = cast(bool, "prop:Bool")
    show_only_readable = cast(bool, "prop:Bool")
    sort_case_sensitive = cast(bool, "prop:Bool")
    sort_field = cast(int, "prop:Enumeration")
    sort_reversed = cast(bool, "prop:Bool")
    status = cast(int, "prop:Enumeration")


class PsSettings(P.PropSheet):
    category = cast(str, "prop:String")
    file_name = cast(str, "prop:String")


class PsWavefrontMesh(P.PropSheet):
    last_error = cast(int, "prop:Enumeration")
    projection_plane_v = "prop:Vector3D"
    projection_plane_w = "prop:Vector3D"
    source = cast(str, "prop:Url")


class PsAdditiveColorGradient(P.PropSheet):
    bottom_color = "prop:Vector3D"
    top_color = "prop:Vector3D"


class PsBlur(P.PropSheet):
    amount = cast(float, "prop:Real")


class PsBrushStrokes(P.PropSheet):
    brush_angle = cast(float, "prop:Real")
    brush_length = cast(float, "prop:Real")
    brush_size = cast(float, "prop:Real")
    noise_sample = "prop:Property"


class PsChromaticAberration(P.PropSheet):
    aberration_amount = cast(float, "prop:Real")
    focus_depth = cast(float, "prop:Real")
    mask_texture = "prop:Property"


class PsColorMaster(P.PropSheet):
    blue_strength = cast(float, "prop:Real")
    green_strength = cast(float, "prop:Real")
    red_strength = cast(float, "prop:Real")
    saturation = cast(float, "prop:Real")


class PsDepthOfFieldHQBlur(P.PropSheet):
    blur_amount = cast(float, "prop:Real")
    focus_distance = cast(float, "prop:Real")
    focus_range = cast(float, "prop:Real")


class PsDesaturate(P.PropSheet):
    amount = cast(float, "prop:Real")


class PsDistortionRipple(P.PropSheet):
    center = "prop:Vector2D"
    distortion_height = cast(float, "prop:Real")
    distortion_phase = cast(float, "prop:Real")
    distortion_width = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")


class PsDistortionSphere(P.PropSheet):
    center = "prop:Vector2D"
    distortion_height = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")


class PsDistortionSpiral(P.PropSheet):
    center = "prop:Vector2D"
    distortion_strength = cast(float, "prop:Real")
    radius = cast(float, "prop:Real")


class PsEdgeDetect(P.PropSheet):
    edge_strength = cast(float, "prop:Real")


class PsEmboss(P.PropSheet):
    amount = cast(float, "prop:Real")


class PsFlip(P.PropSheet):
    flip_horizontally = cast(bool, "prop:Bool")
    flip_vertically = cast(bool, "prop:Bool")


class PsFxaa(P.PropSheet):
    pass


class PsGaussianBlur(P.PropSheet):
    amount = cast(float, "prop:Real")


class PsHDRBloomTonemap(P.PropSheet):
    bloom_threshold = cast(float, "prop:Real")
    blur_falloff = cast(float, "prop:Real")
    channel_threshold = cast(float, "prop:Real")
    exposure = cast(float, "prop:Real")
    gamma = cast(float, "prop:Real")
    tonemapping_lerp = cast(float, "prop:Real")


class PsMotionBlur(P.PropSheet):
    blur_quality = cast(float, "prop:Real")
    fade_amount = cast(float, "prop:Real")


class PsScatter(P.PropSheet):
    amount = cast(float, "prop:Real")
    direction = cast(int, "prop:Int")
    noise_sample = "prop:Property"
    randomize = cast(bool, "prop:Bool")


class PsSCurveTonemap(P.PropSheet):
    contrast_boost = cast(float, "prop:Real")
    exposure_value = cast(float, "prop:Real")
    gamma_value = cast(float, "prop:Real")
    saturation_level = cast(float, "prop:Real")
    shoulder_emphasis = cast(float, "prop:Real")
    shoulder_slope = cast(float, "prop:Real")
    toe_emphasis = cast(float, "prop:Real")
    toe_slope = cast(float, "prop:Real")
    use_exposure = cast(bool, "prop:Bool")
    white_point = cast(float, "prop:Real")


class PsTiltShift(P.PropSheet):
    blur_amount = cast(float, "prop:Real")
    focus_position = cast(float, "prop:Real")
    focus_width = cast(float, "prop:Real")
    is_inverted = cast(bool, "prop:Bool")
    is_vertical = cast(bool, "prop:Bool")


class PsVignette(P.PropSheet):
    vignette_color = "prop:Vector3D"
    vignette_radius = cast(float, "prop:Real")
    vignette_strength = cast(float, "prop:Real")


class PsAttractor3D(PsAffector3D):
    duration = cast(int, "prop:Int")
    duration_variation = cast(int, "prop:Int")
    hide_at_end = cast(bool, "prop:Bool")
    position_variation = "prop:Vector3D"
    shape = "prop:Property"


class PsEmitBurst3D(PsQtObject):
    amount = cast(int, "prop:Int")
    duration = cast(int, "prop:Int")
    time = cast(int, "prop:Int")


class PsGravity3D(PsAffector3D):
    direction = "prop:Vector3D"
    magnitude = cast(float, "prop:Real")


class PsModelParticle3D(PsParticle3D):
    delegate = "prop:Property"


class PsParticleShape3D(PsQtObject):
    ShapeType = cast(int, "prop:Enumeration")
    extents = "prop:Vector3D"
    fill = cast(bool, "prop:Bool")
    type = "prop:Property"


class PsParticleSystem3D(PsNode):
    logging = cast(bool, "prop:Bool")
    logging_data = "prop:Property"
    paused = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")
    seed = cast(int, "prop:Int")
    start_time = cast(int, "prop:Int")
    time = cast(int, "prop:Int")
    use_random_seed = cast(bool, "prop:Bool")


class PsParticleSystem3DLogging(PsQtObject):
    logging_interval = cast(int, "prop:Int")
    particles_max = cast(int, "prop:Int")
    particles_used = cast(int, "prop:Int")
    time = cast(float, "prop:Real")
    time_average = cast(float, "prop:Real")
    updates = cast(int, "prop:Int")


class PsPointRotator3D(PsAffector3D):
    direction = "prop:Vector3D"
    magnitude = cast(float, "prop:Real")
    pivot_point = "prop:Vector3D"


class PsSpriteParticle3D(PsParticle3D):
    BlendMode = cast(int, "prop:Enumeration")
    billboard = cast(bool, "prop:Bool")
    blend_mode = "prop:Property"
    color_table = "prop:Property"
    frame_count = cast(int, "prop:Int")
    interpolate = cast(bool, "prop:Bool")
    particle_scale = cast(float, "prop:Real")
    sprite = "prop:Property"


class PsTargetDirection3D(PsDirection3D):
    magnitude = cast(float, "prop:Real")
    magnitude_variation = cast(float, "prop:Real")
    normalized = cast(bool, "prop:Bool")
    position = "prop:Vector3D"
    position_variation = "prop:Vector3D"


class PsTrailEmitter3D(PsParticleEmitter3D):
    follow = "prop:Property"


class PsVectorDirection3D(PsDirection3D):
    direction = "prop:Vector3D"
    direction_variation = "prop:Vector3D"


class PsWander3D(PsAffector3D):
    global_amount = "prop:Vector3D"
    global_pace = "prop:Vector3D"
    global_pace_start = "prop:Vector3D"
    unique_amount = "prop:Vector3D"
    unique_amount_variation = cast(float, "prop:Real")
    unique_pace = "prop:Vector3D"
    unique_pace_variation = cast(float, "prop:Real")


class PsAxisHelper(PsNode):
    enable_axis_lines = cast(bool, "prop:Bool")
    enable_xy_grid = cast(bool, "prop:Bool")
    enable_xz_grid = cast(bool, "prop:Bool")
    enable_yz_grid = cast(bool, "prop:Bool")
    grid_color = cast(str, "prop:Color")
    grid_opacity = cast(float, "prop:Real")


class PsDebugView(PsRectangle):
    source = "prop:Var"


class PsGridGeometry(PsGeometry):
    horizontal_lines = cast(int, "prop:Int")
    horizontal_step = cast(float, "prop:Real")
    vertical_lines = cast(int, "prop:Int")
    vertical_step = cast(float, "prop:Real")


class PsInstanceRange(PsObject3D):
    from_ = "prop:Property"
    proportional = cast(bool, "prop:Bool")
    to = "prop:Property"


class PsRandomInstancing(PsInstancing):
    color = "prop:Property"
    custom_data = "prop:Property"
    instance_count = cast(int, "prop:Int")
    position = "prop:Property"
    random_seed = cast(int, "prop:Int")
    rotation = "prop:Property"
    scale = "prop:Property"


class PsWasdController(PsItem):
    accepted_buttons = cast(int, "prop:Enumeration")
    back_speed = cast(float, "prop:Real")
    controlled_object = "prop:Property"
    down_speed = cast(float, "prop:Real")
    forward_speed = cast(float, "prop:Real")
    inputs_need_processing = cast(bool, "prop:Bool")
    keys_enabled = cast(bool, "prop:Bool")
    left_speed = cast(float, "prop:Real")
    mouse_enabled = cast(bool, "prop:Bool")
    right_speed = cast(float, "prop:Real")
    shift_speed = cast(float, "prop:Real")
    speed = cast(float, "prop:Real")
    up_speed = cast(float, "prop:Real")
    x_invert = cast(bool, "prop:Bool")
    x_speed = cast(float, "prop:Real")
    y_invert = cast(bool, "prop:Bool")
    y_speed = cast(float, "prop:Real")


class PsBounds(P.PropSheet):
    maximum = "prop:Vector3D"
    minimum = "prop:Vector3D"


class PsBufferInput(PsCommand):
    buffer = "prop:Property"
    sampler = cast(str, "prop:String")


class PsCustomCamera(PsCamera):
    projection = "prop:Matrix4x4"


class PsCustomMaterial(PsMaterial):
    always_dirty = cast(bool, "prop:Bool")
    destination_blend = cast(int, "prop:Enumeration")
    fragment_shader = cast(str, "prop:Url")
    line_width = cast(float, "prop:Real")
    shading_mode = cast(int, "prop:Enumeration")
    source_blend = cast(int, "prop:Enumeration")
    vertex_shader = cast(str, "prop:Url")


class PsDefaultMaterial(PsMaterial):
    blend_mode = cast(int, "prop:Enumeration")
    bump_amount = cast(float, "prop:Real")
    bump_map = "prop:Property"
    diffuse_color = cast(str, "prop:Color")
    diffuse_light_wrap = cast(float, "prop:Real")
    diffuse_map = "prop:Property"
    emissive_color = cast(str, "prop:Color")
    emissive_factor = cast(float, "prop:Real")
    emissive_map = "prop:Property"
    fresnel_power = cast(float, "prop:Real")
    index_of_refraction = cast(float, "prop:Real")
    lighting = cast(int, "prop:Enumeration")
    line_width = cast(float, "prop:Real")
    normal_map = "prop:Property"
    opacity = cast(float, "prop:Real")
    opacity_channel = cast(int, "prop:Enumeration")
    opacity_map = "prop:Property"
    point_size = cast(float, "prop:Real")
    roughness_channel = cast(int, "prop:Enumeration")
    roughness_map = "prop:Property"
    specular_amount = cast(float, "prop:Real")
    specular_map = "prop:Property"
    specular_model = cast(int, "prop:Enumeration")
    specular_reflection_map = "prop:Property"
    specular_roughness = cast(float, "prop:Real")
    specular_tint = cast(str, "prop:Color")
    translucency_channel = cast(int, "prop:Enumeration")
    translucency_map = "prop:Property"
    translucent_falloff = cast(float, "prop:Real")
    vertex_colors_enabled = cast(bool, "prop:Bool")


class PsFrustumCamera(PsPerspectiveCamera):
    bottom = cast(float, "prop:Real")
    left = cast(float, "prop:Real")
    right = cast(float, "prop:Real")
    top = cast(float, "prop:Real")


class PsInstanceList(PsInstancing):
    instances = cast(list, "prop:List")


class PsInstanceListEntry(PsObject3D):
    color = "prop:Vector3D"
    custom_data = "prop:Vector3D"
    euler_rotation = "prop:Vector3D"
    position = "prop:Vector3D"
    rotation = "prop:Quaternion"
    scale = "prop:Vector3D"


class PsLoader3D(PsNode):
    active = cast(bool, "prop:Bool")
    asynchronous = cast(bool, "prop:Bool")
    item = "prop:Property"
    progress = cast(float, "prop:Real")
    source = cast(str, "prop:Url")
    source_component = "prop:Property"
    status = cast(int, "prop:Enumeration")


class PsModel(PsNode):
    bounds = "prop:Property"
    casts_shadows = cast(bool, "prop:Bool")
    geometry = "prop:Property"
    instance_root = "prop:Property"
    instancing = "prop:Property"
    inverse_bind_poses = cast(list, "prop:List")
    materials = cast(list, "prop:List")
    morph_targets = cast(list, "prop:List")
    pickable = cast(bool, "prop:Bool")
    receives_shadows = cast(bool, "prop:Bool")
    skeleton = "prop:Property"
    source = cast(str, "prop:Url")


class PsOrthographicCamera(PsCamera):
    clip_far = cast(float, "prop:Real")
    clip_near = cast(float, "prop:Real")
    horizontal_magnification = cast(float, "prop:Real")
    vertical_magnification = cast(float, "prop:Real")


class PsPass(P.PropSheet):
    commands = cast(list, "prop:List")
    output = "prop:Property"
    shaders = cast(list, "prop:List")


class PsPickResult(P.PropSheet):
    distance = cast(float, "prop:Number")
    object_hit = "prop:Property"
    scene_position = "prop:Vector3D"
    uv_position = "prop:Vector2D"


class PsPrincipledMaterial(PsMaterial):
    alpha_cutoff = cast(float, "prop:Real")
    alpha_mode = cast(int, "prop:Enumeration")
    base_color = cast(str, "prop:Color")
    base_color_map = "prop:Property"
    blend_mode = cast(int, "prop:Enumeration")
    emissive_color = cast(str, "prop:Color")
    emissive_map = "prop:Property"
    lighting = cast(int, "prop:Enumeration")
    line_width = cast(float, "prop:Real")
    metalness = cast(float, "prop:Real")
    metalness_channel = cast(int, "prop:Enumeration")
    metalness_map = "prop:Property"
    normal_map = "prop:Property"
    normal_strength = cast(float, "prop:Real")
    occlusion_amount = cast(float, "prop:Real")
    occlusion_channel = cast(int, "prop:Enumeration")
    occlusion_map = "prop:Property"
    opacity = cast(float, "prop:Real")
    opacity_channel = cast(int, "prop:Enumeration")
    opacity_map = "prop:Property"
    point_size = cast(float, "prop:Real")
    roughness = cast(float, "prop:Real")
    roughness_channel = cast(int, "prop:Enumeration")
    roughness_map = "prop:Property"
    specular_amount = cast(float, "prop:Real")
    specular_map = "prop:Property"
    specular_reflection_map = "prop:Property"
    specular_tint = cast(float, "prop:Real")


class PsRenderStats(P.PropSheet):
    fps = cast(int, "prop:Int")
    frame_time = cast(float, "prop:Number")
    max_frame_time = cast(float, "prop:Number")
    render_prepare_time = cast(float, "prop:Number")
    render_time = cast(float, "prop:Number")
    sync_time = cast(float, "prop:Number")


class PsRepeater3D(PsNode):
    count = cast(int, "prop:Int")
    delegate = "prop:Property"
    model = "prop:Property"


class PsSceneEnvironment(PsObject3D):
    antialiasing_mode = cast(int, "prop:Enumeration")
    antialiasing_quality = cast(int, "prop:Enumeration")
    ao_bias = cast(float, "prop:Number")
    ao_distance = cast(float, "prop:Number")
    ao_dither = cast(bool, "prop:Bool")
    ao_sample_rate = cast(int, "prop:Int")
    ao_softness = cast(float, "prop:Number")
    ao_strength = cast(float, "prop:Number")
    background_mode = cast(int, "prop:Enumeration")
    clear_color = cast(str, "prop:Color")
    depth_pre_pass_enabled = cast(bool, "prop:Bool")
    depth_test_enabled = cast(bool, "prop:Bool")
    effects = cast(list, "prop:List")
    light_probe = "prop:Property"
    probe_exposure = cast(float, "prop:Number")
    probe_horizon = cast(float, "prop:Number")
    probe_orientation = "prop:Vector3D"
    temporal_aa_enabled = cast(bool, "prop:Bool")
    temporal_aa_strength = cast(float, "prop:Number")
    tonemap_mode = cast(int, "prop:Enumeration")


class PsSetUniformValue(PsCommand):
    target = cast(str, "prop:String")
    value = "prop:Property"


class PsShader(P.PropSheet):
    shader = cast(str, "prop:Url")
    stage = cast(int, "prop:Enumeration")


class PsTexture(PsObject3D):
    flip_v = cast(bool, "prop:Bool")
    generate_mipmaps = cast(bool, "prop:Bool")
    index_uv = cast(int, "prop:Int")
    mag_filter = cast(int, "prop:Enumeration")
    mapping_mode = cast(int, "prop:Enumeration")
    min_filter = cast(int, "prop:Enumeration")
    mip_filter = cast(int, "prop:Enumeration")
    pivot_u = cast(float, "prop:Number")
    pivot_v = cast(float, "prop:Number")
    position_u = cast(float, "prop:Number")
    position_v = cast(float, "prop:Number")
    rotation_uv = cast(float, "prop:Number")
    scale_u = cast(float, "prop:Number")
    scale_v = cast(float, "prop:Number")
    source = cast(str, "prop:Url")
    source_item = "prop:Property"
    texture_data = "prop:Property"
    tiling_mode_horizontal = cast(int, "prop:Enumeration")
    tiling_mode_vertical = cast(int, "prop:Enumeration")


class PsTextureData(PsObject3D):
    pass


class PsTextureInput(P.PropSheet):
    enabled = cast(bool, "prop:Bool")
    texture = "prop:Property"


class PsView3D(P.PropSheet):
    camera = "prop:Property"
    environment = "prop:Property"
    import_scene = "prop:Property"
    render_mode = cast(int, "prop:Enumeration")
    render_stats = "prop:Property"
    scene = "prop:Property"


class PsBackspaceKey(PsBaseKey):
    pass


class PsChangeLanguageKey(PsBaseKey):
    custom_layouts_only = cast(bool, "prop:Bool")


class PsEnterKeyAction(P.PropSheet):
    pass


class PsFillerKey(PsBaseKey):
    pass


class PsFlickKey(PsKey):
    pass


class PsHandwritingInputPanel(PsItem):
    active = cast(bool, "prop:Bool")
    available = cast(bool, "prop:Bool")
    input_panel = "prop:Var"


class PsHandwritingModeKey(PsKey):
    pass


class PsHideKeyboardKey(PsBaseKey):
    pass


class PsInputContext(P.PropSheet):
    anchor_position = cast(int, "prop:Int")
    anchor_rect_intersects_clip_rect = cast(bool, "prop:Bool")
    anchor_rectangle = "prop:Rect"
    animating = cast(bool, "prop:Bool")
    caps_lock_active = cast(bool, "prop:Bool")
    cursor_position = cast(int, "prop:Int")
    cursor_rect_intersects_clip_rect = cast(bool, "prop:Bool")
    cursor_rectangle = "prop:Rect"
    input_engine = "prop:Property"
    input_method_hints = cast(int, "prop:Int")
    keyboard_observer = "prop:Property"
    locale = cast(str, "prop:String")
    preedit_text = cast(str, "prop:String")
    selected_text = cast(str, "prop:String")
    selection_control_visible = cast(bool, "prop:Bool")
    shift_active = cast(bool, "prop:Bool")
    surrounding_text = cast(str, "prop:String")
    uppercase = cast(bool, "prop:Bool")


class PsInputEngine(P.PropSheet):
    active_key = cast(int, "prop:Int")
    input_method = "prop:Property"
    input_mode = cast(int, "prop:Int")
    input_modes = cast(list, "prop:List")
    pattern_recognition_modes = cast(list, "prop:List")
    previous_key = cast(int, "prop:Int")
    word_candidate_list_model = "prop:Property"
    word_candidate_list_visible_hint = cast(bool, "prop:Bool")


class PsInputMethod(P.PropSheet):
    input_context = "prop:Property"
    input_engine = "prop:Property"


class PsInputModeKey(PsKey):
    input_mode_count = cast(int, "prop:Int")
    input_mode_name_list = "prop:Var"
    input_modes = "prop:Var"


class PsInputPanel(PsItem):
    active = cast(bool, "prop:Bool")
    external_language_switch_enabled = cast(bool, "prop:Bool")


class PsKeyboardColumn(PsColumnLayout):
    key_weight = cast(float, "prop:Real")
    small_text_visible = cast(bool, "prop:Bool")


class PsKeyboardLayout(PsColumnLayout):
    input_method = "prop:Var"
    input_mode = cast(int, "prop:Int")
    key_weight = cast(float, "prop:Real")
    shared_layouts = "prop:Var"
    small_text_visible = cast(bool, "prop:Bool")


class PsKeyboardLayoutLoader(PsLoader):
    input_method = "prop:Var"
    input_mode = cast(int, "prop:Int")
    shared_layouts = "prop:Var"


class PsKeyboardObserver(P.PropSheet):
    layout = "prop:Property"


class PsKeyboardRow(PsRowLayout):
    key_weight = cast(float, "prop:Real")
    small_text_visible = cast(bool, "prop:Bool")


class PsModeKey(PsKey):
    mode = cast(bool, "prop:Bool")


class PsNumberKey(PsKey):
    pass


class PsSelectionListModel(P.PropSheet):
    pass


class PsShiftHandler(P.PropSheet):
    auto_capitalization_enabled = cast(bool, "prop:Bool")
    sentence_ending_characters = cast(str, "prop:String")
    toggle_shift_enabled = cast(bool, "prop:Bool")


class PsShiftKey(PsBaseKey):
    pass


class PsSpaceKey(PsKey):
    pass


class PsSymbolModeKey(PsKey):
    pass


class PsTrace(P.PropSheet):
    canceled = cast(bool, "prop:Bool")
    channels = cast(list, "prop:List")
    final = cast(bool, "prop:Bool")
    opacity = "prop:Property"
    trace_id = cast(int, "prop:Int")


class PsTraceInputArea(PsMultiPointTouchArea):
    bounding_box = "prop:Rect"
    canvas_type = cast(str, "prop:String")
    horizontal_rulers = "prop:Var"
    pattern_recognition_mode = cast(int, "prop:Int")
    vertical_rulers = "prop:Var"


class PsTraceInputKey(PsItem):
    bounding_box = "prop:Property"
    canvas_type = "prop:Property"
    horizontal_rulers = "prop:Property"
    pattern_recognition_mode = "prop:Property"
    vertical_rulers = "prop:Property"
    weight = cast(float, "prop:Real")


class PsVirtualKeyboard(P.PropSheet):
    pass


class PsKeyboardStyle(PsQtObject):
    alternate_keys_list_background = "prop:Property"
    alternate_keys_list_bottom_margin = cast(float, "prop:Real")
    alternate_keys_list_delegate = "prop:Property"
    alternate_keys_list_highlight = "prop:Property"
    alternate_keys_list_item_height = cast(float, "prop:Real")
    alternate_keys_list_item_width = cast(float, "prop:Real")
    alternate_keys_list_left_margin = cast(float, "prop:Real")
    alternate_keys_list_right_margin = cast(float, "prop:Real")
    alternate_keys_list_top_margin = cast(float, "prop:Real")
    backspace_key_panel = "prop:Property"
    character_preview_delegate = "prop:Property"
    character_preview_margin = cast(float, "prop:Real")
    enter_key_panel = "prop:Property"
    full_screen_input_background = "prop:Property"
    full_screen_input_color = cast(str, "prop:Color")
    full_screen_input_container_background = "prop:Property"
    full_screen_input_cursor = "prop:Property"
    full_screen_input_font = "prop:Font"
    full_screen_input_margins = cast(float, "prop:Real")
    full_screen_input_padding = cast(float, "prop:Real")
    full_screen_input_password_character = cast(str, "prop:String")
    full_screen_input_selected_text_color = cast(str, "prop:Color")
    full_screen_input_selection_color = cast(str, "prop:Color")
    handwriting_key_panel = "prop:Property"
    hide_key_panel = "prop:Property"
    key_panel = "prop:Property"
    keyboard_background = "prop:Property"
    keyboard_design_height = cast(float, "prop:Real")
    keyboard_design_width = cast(float, "prop:Real")
    keyboard_height = cast(float, "prop:Real")
    keyboard_relative_bottom_margin = cast(float, "prop:Real")
    keyboard_relative_left_margin = cast(float, "prop:Real")
    keyboard_relative_right_margin = cast(float, "prop:Real")
    keyboard_relative_top_margin = cast(float, "prop:Real")
    language_key_panel = "prop:Property"
    language_list_add = "prop:Property"
    language_list_background = "prop:Property"
    language_list_delegate = "prop:Property"
    language_list_highlight = "prop:Property"
    language_list_remove = "prop:Property"
    language_popup_list_enabled = cast(bool, "prop:Bool")
    mode_key_panel = "prop:Property"
    navigation_highlight = "prop:Property"
    popup_list_add = "prop:Property"
    popup_list_background = "prop:Property"
    popup_list_delegate = "prop:Property"
    popup_list_highlight = "prop:Property"
    popup_list_remove = "prop:Property"
    scale_hint = cast(float, "prop:Real")
    selection_handle = "prop:Property"
    selection_list_add = "prop:Property"
    selection_list_background = "prop:Property"
    selection_list_delegate = "prop:Property"
    selection_list_height = cast(float, "prop:Real")
    selection_list_highlight = "prop:Property"
    selection_list_remove = "prop:Property"
    shift_key_panel = "prop:Property"
    space_key_panel = "prop:Property"
    symbol_key_panel = "prop:Property"
    trace_canvas_delegate = "prop:Property"
    trace_input_key_panel_delegate = "prop:Property"


class PsKeyIcon(PsItem):
    color = "prop:Property"
    source = "prop:Property"


class PsKeyPanel(PsItem):
    control = "prop:Property"
    sound_effect = cast(str, "prop:Url")


class PsSelectionListItem(PsItem):
    sound_effect = cast(str, "prop:Url")


class PsTraceCanvas(PsCanvas):
    auto_destroy = cast(bool, "prop:Bool")
    auto_destroy_delay = cast(int, "prop:Int")
    render_function = "prop:Var"
    trace = "prop:Property"


class PsTraceInputKeyPanel(PsItem):
    control = "prop:Property"
    trace_margins = cast(float, "prop:Real")


class PsVirtualKeyboardSettings(P.PropSheet):
    active_locales = cast(list, "prop:List")
    available_locales = cast(list, "prop:List")
    default_dictionary_disabled = cast(bool, "prop:Bool")
    default_input_method_disabled = cast(bool, "prop:Bool")
    full_screen_mode = cast(bool, "prop:Bool")
    handwriting_mode_disabled = cast(bool, "prop:Bool")
    hwr_timeout_for_alphabetic = cast(bool, "prop:Bool")
    hwr_timeout_for_cjk = cast(bool, "prop:Bool")
    input_method_hints = cast(int, "prop:Int")
    locale = cast(str, "prop:String")
    style_name = cast(str, "prop:String")
    user_data_path = cast(bool, "prop:Bool")
    word_candidate_list = "prop:WordCandidateList"


class PsBinding(P.PropSheet):
    delayed = cast(bool, "prop:Bool")
    property = cast(str, "prop:String")
    restore_mode = cast(int, "prop:Enumeration")
    target = "prop:Property"
    value = "prop:Property"
    when = cast(bool, "prop:Bool")


class PsConnections(P.PropSheet):
    enabled = cast(bool, "prop:Bool")
    ignore_unknown_signals = cast(bool, "prop:Bool")
    target = "prop:Property"


class PsDate(P.PropSheet):
    pass


class PsLocale(P.PropSheet):
    am_text = cast(str, "prop:String")
    decimal_point = cast(str, "prop:String")
    exponential = cast(str, "prop:String")
    first_day_of_week = cast(int, "prop:Enumeration")
    group_separator = cast(str, "prop:String")
    measurement_system = cast(int, "prop:Enumeration")
    name_ = cast(str, "prop:String")
    native_country_name = cast(str, "prop:String")
    native_language_name = cast(str, "prop:String")
    negative_sign = cast(str, "prop:String")
    number_options = cast(int, "prop:Enumeration")
    percent = cast(str, "prop:String")
    pm_text = cast(str, "prop:String")
    positive_sign = cast(str, "prop:String")
    text_direction = cast(int, "prop:Enumeration")
    ui_languages = "prop:Property"
    week_days = "prop:Property"
    zero_digit = cast(str, "prop:String")


class PsLoggingCategory(P.PropSheet):
    default_log_level = cast(int, "prop:Enumeration")
    name_ = cast(str, "prop:String")


class PsNumber(P.PropSheet):
    pass


class PsQt(P.PropSheet):
    application = "prop:Property"
    input_method = "prop:Property"
    platform = "prop:Property"
    style_hints = "prop:Property"
    ui_language = cast(str, "prop:String")


class PsString(P.PropSheet):
    pass


class PsTimer(P.PropSheet):
    interval = cast(int, "prop:Int")
    repeat = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")
    triggered_on_start = cast(bool, "prop:Bool")


class PsColorDialog(PsDialog):
    color = cast(str, "prop:Color")
    current_color = cast(str, "prop:Color")
    options = "prop:Property"


class PsFileDialog(PsDialog):
    accept_label = cast(str, "prop:String")
    current_file = cast(str, "prop:Url")
    current_files = cast(list, "prop:List")
    default_suffix = cast(str, "prop:String")
    file = cast(str, "prop:Url")
    file_mode = cast(int, "prop:Enumeration")
    files = cast(list, "prop:List")
    folder = cast(str, "prop:Url")
    name_filters = cast(list, "prop:List")
    options = "prop:Property"
    reject_label = cast(str, "prop:String")
    selected_name_filter = "prop:SelectedNameFilter"


class PsFolderDialog(PsDialog):
    accept_label = cast(str, "prop:String")
    current_folder = cast(str, "prop:Url")
    folder = cast(str, "prop:Url")
    options = "prop:Property"
    reject_label = cast(str, "prop:String")


class PsFontDialog(PsDialog):
    current_font = "prop:Font"
    font = "prop:Font"
    options = "prop:Property"


class PsMenuItemGroup(PsQtObject):
    checked_item = "prop:Property"
    enabled = cast(bool, "prop:Bool")
    exclusive = cast(bool, "prop:Bool")
    items = cast(list, "prop:List")
    visible = cast(bool, "prop:Bool")


class PsMessageDialog(PsDialog):
    buttons = "prop:Property"
    detailed_text = cast(str, "prop:String")
    informative_text = cast(str, "prop:String")
    text = cast(str, "prop:String")


class PsStandardPaths(PsQtObject):
    pass


class PsSystemTrayIcon(PsQtObject):
    available = cast(bool, "prop:Bool")
    geometry = "prop:Rect"
    icon = "prop:Icon"
    menu = "prop:Property"
    supports_messages = cast(bool, "prop:Bool")
    tooltip = cast(str, "prop:String")
    visible = cast(bool, "prop:Bool")


class PsDelegateChoice(P.PropSheet):
    column = cast(int, "prop:Int")
    delegate = "prop:Property"
    index = cast(int, "prop:Int")
    role_value = "prop:Property"
    row = cast(int, "prop:Int")


class PsDelegateChooser(P.PropSheet):
    choices = cast(list, "prop:List")
    role = cast(str, "prop:String")


class PsTableModel(P.PropSheet):
    column_count = cast(int, "prop:Int")
    row_count = cast(int, "prop:Int")
    rows = "prop:Property"


class PsTableModelColumn(P.PropSheet):
    pass


class PsDelegateModel(P.PropSheet):
    count = cast(int, "prop:Int")
    delegate = "prop:Property"
    filter_on_group = cast(str, "prop:String")
    groups = cast(list, "prop:List")
    items = "prop:Property"
    model = "prop:Property"
    parts = "prop:Property"
    persisted_items = "prop:Property"
    root_index = "prop:Property"


class PsDelegateModelGroup(P.PropSheet):
    count = cast(int, "prop:Int")
    include_by_default = cast(bool, "prop:Bool")
    name_ = cast(str, "prop:String")


class PsInstantiator(P.PropSheet):
    active = cast(bool, "prop:Bool")
    asynchronous = cast(bool, "prop:Bool")
    count = cast(int, "prop:Int")
    delegate = "prop:Property"
    model = "prop:Property"
    object = "prop:Property"


class PsItemSelectionModel(P.PropSheet):
    current_index = "prop:Property"
    has_selection = cast(bool, "prop:Bool")
    model = "prop:Property"
    selected_indexes = "prop:Property"
    selection = "prop:Property"


class PsListElement(P.PropSheet):
    pass


class PsListModel(P.PropSheet):
    count = cast(int, "prop:Int")
    dynamic_roles = cast(bool, "prop:Bool")


class PsObjectModel(P.PropSheet):
    count = cast(int, "prop:Int")


class PsPackage(P.PropSheet):
    pass


class PsEventConnection(P.PropSheet):
    events = "prop:Property"
    state_machine = "prop:Property"


class PsInvokedServices(P.PropSheet):
    children = "prop:Var"
    qml_children = cast(list, "prop:List")
    state_machine = "prop:Property"


class PsScxmlStateMachine(P.PropSheet):
    data_model = "prop:Property"
    initial_values = "prop:Var"
    initialized = cast(bool, "prop:Bool")
    invoked = cast(bool, "prop:Bool")
    invoked_services = cast(list, "prop:List")
    loader = "prop:Property"
    name_ = cast(str, "prop:String")
    parse_errors = "prop:Var"
    running = cast(bool, "prop:Bool")
    session_id = cast(str, "prop:String")


class PsStateMachineLoader(P.PropSheet):
    source = cast(str, "prop:Url")
    state_machine = "prop:Property"


class PsIdleInhibitManagerV1(P.PropSheet):
    pass


class PsQtTextInputMethodManager(P.PropSheet):
    pass


class PsShellSurface(P.PropSheet):
    window_type = "prop:Property"


class PsShellSurfaceItem(PsWaylandQuickItem):
    auto_create_popup_items = cast(bool, "prop:Bool")
    move_item = "prop:Property"
    shell_surface = "prop:Property"


class PsWaylandClient(P.PropSheet):
    compositor = "prop:Property"
    group_id = cast(int, "prop:Int")
    process_id = cast(int, "prop:Int")
    user_id = cast(int, "prop:Int")


class PsWaylandCompositor(P.PropSheet):
    additional_shm_formats = cast(list, "prop:List")
    created = cast(bool, "prop:Bool")
    default_output = "prop:Property"
    default_seat = "prop:Property"
    extensions = cast(list, "prop:List")
    retained_selection = cast(bool, "prop:Bool")
    socket_name = cast(str, "prop:String")
    use_hardware_integration_extension = cast(bool, "prop:Bool")


class PsWaylandHardwareLayer(P.PropSheet):
    stacking_level = cast(int, "prop:Int")


class PsWaylandOutput(P.PropSheet):
    automatic_frame_callback = cast(bool, "prop:Bool")
    available_geometry = "prop:Rect"
    compositor = "prop:Property"
    geometry = "prop:Rect"
    manufacturer = cast(str, "prop:String")
    model = cast(str, "prop:String")
    physical_size = "prop:Size"
    position = "prop:Point"
    scale_factor = cast(int, "prop:Int")
    size_follows_window = cast(bool, "prop:Bool")
    subpixel = "prop:Property"
    transform = "prop:Property"
    window = "prop:Property"


class PsWaylandSeat(P.PropSheet):
    pass


class PsWaylandSurface(P.PropSheet):
    buffer_scale = "prop:Size"
    buffer_size = "prop:Size"
    client = "prop:Property"
    content_orientation = "prop:Property"
    cursor_surface = cast(bool, "prop:Bool")
    destination_size = "prop:Size"
    has_content = cast(bool, "prop:Bool")
    inhibits_idle = cast(bool, "prop:Bool")
    origin = "prop:Property"
    source_geometry = "prop:Rect"
    use_texture_alpha = cast(bool, "prop:Bool")


class PsWaylandView(P.PropSheet):
    allow_discard_front_buffer = cast(bool, "prop:Bool")
    buffer_locked = cast(bool, "prop:Bool")
    output = "prop:Property"
    surface = "prop:Property"


class PsKeyframe(PsQtObject):
    easing = "prop:Var"
    frame = cast(float, "prop:Double")
    value = "prop:Var"


class PsKeyframeGroup(PsQtObject):
    keyframe_source = cast(str, "prop:Url")
    keyframes = cast(list, "prop:List")
    property = cast(str, "prop:String")
    target = "prop:Var"


class PsTimeline(PsQtObject):
    animations = cast(list, "prop:List")
    current_frame = cast(float, "prop:Double")
    enabled = cast(bool, "prop:Bool")
    end_frame = cast(float, "prop:Double")
    keyframes = cast(list, "prop:List")
    start_frame = cast(float, "prop:Double")


class PsTimelineAnimation(PsNumberAnimation):
    ping_pong = cast(bool, "prop:Bool")


class PsLottieAnimation(PsItem):
    auto_play = cast(bool, "prop:Bool")
    direction = cast(int, "prop:Enumeration")
    end_frame = cast(int, "prop:Int")
    frame_rate = cast(int, "prop:Int")
    loops = cast(int, "prop:Int")
    quality = cast(int, "prop:Enumeration")
    source = cast(str, "prop:Url")
    start_frame = cast(int, "prop:Int")
    status = cast(int, "prop:Enumeration")


class PsSignalSpy(PsItem):
    count = cast(int, "prop:Int")
    signal_arguments = cast(list, "prop:List")
    signal_name = cast(str, "prop:String")
    target = "prop:Var"
    valid = cast(bool, "prop:Bool")


class PsTestCase(PsItem):
    completed = cast(bool, "prop:Bool")
    name_ = cast(str, "prop:String")
    optional = cast(bool, "prop:Bool")
    running = cast(bool, "prop:Bool")
    when = cast(bool, "prop:Bool")
    window_shown = cast(bool, "prop:Bool")


class PsTouchEventSequence(P.PropSheet):
    pass
