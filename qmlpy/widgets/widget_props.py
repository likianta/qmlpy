"""
this module is auto generated by `~/blueprint/src/template_generator/
widgets/widget_oriented_props.py`.
please do not edit this file directly.

for developer: this module shouldn't be imported by `qmlpy.property
.group_types.sheet` directly, although it is in the same folder.
otherwise it will cause a circular import error.

the prefix 'Ps' means 'PropSheet' derives from `qmlpy.property
.group_types.sheet.PropSheet`.
the prefix 'P' means 'Property' derives from `qmlpy.property.core.prop`.
"""
from typing import cast

from __qml_namespace__ import P


class PsQtObject(P.PropSheet):
    object_name = cast(str, P.String)


class PsItem(PsQtObject):
    active_focus = cast(bool, P.Bool)
    active_focus_on_tab = cast(bool, P.Bool)
    anchors: P.Anchors
    antialiasing = cast(bool, P.Bool)
    baseline_offset = cast(int, P.Int)
    children = cast(list, P.List)
    children_rect: P.ChildrenRect
    clip = cast(bool, P.Bool)
    containment_mask: P.Property
    data = cast(list, P.List)
    enabled = cast(bool, P.Bool)
    focus = cast(bool, P.Bool)
    height = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    opacity = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    resources = cast(list, P.List)
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transform = cast(list, P.List)
    transform_origin = cast(int, P.Enumeration)
    transitions = cast(list, P.List)
    visible = cast(bool, P.Bool)
    visible_children = cast(list, P.List)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)


class PsNode(P.PropSheet):
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsControl(PsItem):
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    content_item: P.Property
    focus_policy = cast(int, P.Enumeration)
    focus_reason = cast(int, P.Enumeration)
    font: P.Font
    horizontal_padding = cast(float, P.Real)
    hover_enabled = cast(bool, P.Bool)
    hovered = cast(bool, P.Bool)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    mirrored = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    right_inset = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    vertical_padding = cast(float, P.Real)
    visual_focus = cast(bool, P.Bool)
    wheel_enabled = cast(bool, P.Bool)


class PsAnimation(P.PropSheet):
    always_run_to_end = cast(bool, P.Bool)
    loops = cast(int, P.Int)
    paused = cast(bool, P.Bool)
    running = cast(bool, P.Bool)


class PsRenderState(PsNode):
    pass


class PsFrameGraphNode(PsNode):
    pass


class PsAbstractSeries(P.PropSheet):
    name_ = cast(str, P.String)
    opacity = cast(float, P.Real)
    type = cast(int, P.Enumeration)
    use_open_gl = cast(bool, P.Bool)
    visible = cast(bool, P.Bool)


class PsAbstractButton(PsControl):
    action: P.Property
    auto_exclusive = cast(bool, P.Bool)
    auto_repeat = cast(bool, P.Bool)
    auto_repeat_delay = cast(int, P.Int)
    auto_repeat_interval = cast(int, P.Int)
    checkable = cast(bool, P.Bool)
    checked = cast(bool, P.Bool)
    display = cast(int, P.Enumeration)
    down = cast(bool, P.Bool)
    icon: P.Icon
    implicit_indicator_height = cast(float, P.Real)
    implicit_indicator_width = cast(float, P.Real)
    indicator: P.Property
    press_x = cast(float, P.Real)
    press_y = cast(float, P.Real)
    pressed = cast(bool, P.Bool)
    text = cast(str, P.String)


class PsBaseKey(PsItem):
    active = cast(bool, P.Bool)
    alternative_keys: P.Var
    display_text = cast(str, P.String)
    effective_alternative_keys: P.Var
    effective_alternative_keys_highlight_index = cast(int, P.Int)
    function_key = cast(bool, P.Bool)
    highlighted = cast(bool, P.Bool)
    key = cast(int, P.Int)
    key_panel_delegate: P.Property
    key_type = cast(int, P.Int)
    no_key_event = cast(bool, P.Bool)
    no_modifier = cast(bool, P.Bool)
    pressed = cast(bool, P.Bool)
    repeat = cast(bool, P.Bool)
    show_preview = cast(bool, P.Bool)
    small_text = cast(str, P.String)
    small_text_visible = cast(bool, P.Bool)
    sound_effect = cast(str, P.Url)
    text = cast(str, P.String)
    uppercased = cast(bool, P.Bool)
    weight = cast(float, P.Real)


class PsMaterial(P.PropSheet):
    effect: P.Property
    parameters = cast(list, P.List)
    cull_mode = cast(int, P.Enumeration)
    light_probe: P.Property
    lightmap_indirect: P.Property
    lightmap_radiosity: P.Property
    lightmap_shadow: P.Property
    children = cast(list, P.List)
    data = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsComponent3D(PsNode):
    is_shareable = cast(bool, P.Bool)


class PsObject3D(PsQtObject):
    children = cast(list, P.List)
    data = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)


class PsPointerHandler(P.PropSheet):
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    parent: P.Property
    target: P.Property


class PsPointerDeviceHandler(PsPointerHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    parent: P.Property
    target: P.Property


class PsPropertyAnimation(PsAnimation):
    duration = cast(int, P.Int)
    easing: P.Easing
    exclude = cast(list, P.List)
    from_: P.Property
    properties_ = cast(str, P.String)
    property = cast(str, P.String)
    target: P.Property
    targets = cast(list, P.List)
    to: P.Property


class PsAffector(P.PropSheet):
    acceleration: P.Property
    enabled = cast(bool, P.Bool)
    groups = cast(list, P.List)
    once = cast(bool, P.Bool)
    position: P.Property
    relative = cast(bool, P.Bool)
    shape: P.Property
    system: P.Property
    velocity: P.Property
    when_colliding_with = cast(list, P.List)


class PsKey(PsBaseKey):
    pass


class PsAbstractBarSeries(PsAbstractSeries):
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    bar_width = cast(float, P.Real)
    count = cast(int, P.Int)
    labels_angle = cast(float, P.Real)
    labels_format = cast(str, P.String)
    labels_position = cast(int, P.Enumeration)
    labels_precision = cast(float, P.Real)
    labels_visible = cast(bool, P.Bool)


class PsAnimator(PsAnimation):
    duration = cast(int, P.Int)
    easing: P.Easing
    from_ = cast(float, P.Real)
    target: P.Property
    to = cast(float, P.Real)


class PsAbstractAxis(P.PropSheet):
    alignment: P.Property
    color = cast(str, P.Color)
    grid_line_color = cast(str, P.Color)
    grid_visible = cast(bool, P.Bool)
    labels_angle = cast(int, P.Int)
    labels_color = cast(str, P.Color)
    labels_font: P.Font
    labels_visible = cast(bool, P.Bool)
    line_visible = cast(bool, P.Bool)
    minor_grid_line_color = cast(str, P.Color)
    minor_grid_visible = cast(bool, P.Bool)
    orientation: P.Property
    reverse: P.Property
    shades_border_color = cast(str, P.Color)
    shades_color = cast(str, P.Color)
    shades_visible = cast(bool, P.Bool)
    title_font: P.Font
    title_text = cast(str, P.String)
    title_visible = cast(bool, P.Bool)
    visible = cast(bool, P.Bool)


class PsDialog(P.PropSheet):
    footer: P.Property
    header: P.Property
    implicit_footer_height = cast(float, P.Real)
    implicit_footer_width = cast(float, P.Real)
    implicit_header_height = cast(float, P.Real)
    implicit_header_width = cast(float, P.Real)
    result = cast(int, P.Int)
    standard_buttons = cast(int, P.Enumeration)
    title = cast(str, P.String)
    active_focus = cast(bool, P.Bool)
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_margin = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    clip = cast(bool, P.Bool)
    close_policy = cast(int, P.Enumeration)
    content_children = cast(list, P.List)
    content_data = cast(list, P.List)
    content_height = cast(float, P.Real)
    content_item: P.Property
    content_width = cast(float, P.Real)
    dim = cast(bool, P.Bool)
    enabled = cast(bool, P.Bool)
    enter: P.Property
    exit: P.Property
    focus = cast(bool, P.Bool)
    font: P.Font
    height = cast(float, P.Real)
    horizontal_padding = cast(float, P.Real)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_margin = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    margins = cast(float, P.Real)
    mirrored = cast(bool, P.Bool)
    modal = cast(bool, P.Bool)
    opacity = cast(float, P.Real)
    opened = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    right_inset = cast(float, P.Real)
    right_margin = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    scale = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_margin = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    transform_origin = cast(int, P.Enumeration)
    vertical_padding = cast(float, P.Real)
    visible = cast(bool, P.Bool)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    object_name = cast(str, P.String)
    data = cast(list, P.List)
    flags: P.Property
    modality: P.Property
    parent_window: P.Property


class PsPane(PsControl):
    content_children = cast(list, P.List)
    content_data = cast(list, P.List)
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)


class PsFlickable(PsItem):
    at_x_beginning = cast(bool, P.Bool)
    at_x_end = cast(bool, P.Bool)
    at_y_beginning = cast(bool, P.Bool)
    at_y_end = cast(bool, P.Bool)
    bottom_margin = cast(float, P.Real)
    bounds_behavior = cast(int, P.Enumeration)
    bounds_movement = cast(int, P.Enumeration)
    content_height = cast(float, P.Real)
    content_item: P.Property
    content_width = cast(float, P.Real)
    content_x = cast(float, P.Real)
    content_y = cast(float, P.Real)
    dragging = cast(bool, P.Bool)
    dragging_horizontally = cast(bool, P.Bool)
    dragging_vertically = cast(bool, P.Bool)
    flick_deceleration = cast(float, P.Real)
    flickable_direction = cast(int, P.Enumeration)
    flicking = cast(bool, P.Bool)
    flicking_horizontally = cast(bool, P.Bool)
    flicking_vertically = cast(bool, P.Bool)
    horizontal_overshoot = cast(float, P.Real)
    horizontal_velocity = cast(float, P.Real)
    interactive = cast(bool, P.Bool)
    left_margin = cast(float, P.Real)
    maximum_flick_velocity = cast(float, P.Real)
    moving = cast(bool, P.Bool)
    moving_horizontally = cast(bool, P.Bool)
    moving_vertically = cast(bool, P.Bool)
    origin_x = cast(float, P.Real)
    origin_y = cast(float, P.Real)
    pixel_aligned = cast(bool, P.Bool)
    press_delay = cast(int, P.Int)
    rebound: P.Property
    right_margin = cast(float, P.Real)
    synchronous_drag = cast(bool, P.Bool)
    top_margin = cast(float, P.Real)
    vertical_overshoot = cast(float, P.Real)
    vertical_velocity = cast(float, P.Real)
    visible_area: P.VisibleArea


class PsCamera(P.PropSheet):
    aspect_ratio = cast(float, P.Real)
    bottom = cast(float, P.Real)
    exposure = cast(float, P.Real)
    far_plane = cast(float, P.Real)
    field_of_view = cast(float, P.Real)
    left = cast(float, P.Real)
    near_plane = cast(float, P.Real)
    position: P.Vector3D
    projection_matrix: P.Matrix4x4
    projection_type = cast(int, P.Enumeration)
    right: P.Vector3D
    top = cast(float, P.Real)
    up_vector: P.Vector3D
    view_center: P.Vector3D
    view_vector: P.Vector3D
    components = cast(list, P.List)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)
    frustum_culling_enabled = cast(bool, P.Bool)


class PsEntity(PsNode):
    components = cast(list, P.List)


class PsContainer(PsControl):
    content_children = cast(list, P.List)
    content_data = cast(list, P.List)
    content_height = cast(float, P.Real)
    content_model: P.Property
    content_width = cast(float, P.Real)
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_item: P.Property


class PsItemDelegate(PsAbstractButton):
    highlighted = cast(bool, P.Bool)


class PsGradient(P.PropSheet):
    orientation = cast(int, P.Enumeration)
    stops = cast(list, P.List)


class PsSinglePointHandler(PsPointerDeviceHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    parent: P.Property
    point: P.Property
    target: P.Property


class PsDirection(P.PropSheet):
    pass


class PsAffector3D(PsNode):
    enabled = cast(bool, P.Bool)
    particles = cast(list, P.List)
    system: P.Property


class PsAbstractAnimation(P.PropSheet):
    animation_name = cast(str, P.String)
    animation_type = cast(int, P.Enumeration)
    duration = cast(float, P.Real)
    position = cast(float, P.Real)


class PsXYSeries(PsAbstractSeries):
    axis_angular: P.Property
    axis_radial: P.Property
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    color = cast(str, P.Color)
    point_labels_clipping = cast(bool, P.Bool)
    point_labels_color: P.Font
    point_labels_font: P.Font
    point_labels_format = cast(str, P.String)
    point_labels_visible = cast(bool, P.Bool)
    points_visible = cast(bool, P.Bool)


class PsNumberAnimation(PsPropertyAnimation):
    from_ = cast(float, P.Real)
    to = cast(float, P.Real)


class PsShape(PsItem):
    asynchronous = cast(bool, P.Bool)
    contains_mode = cast(int, P.Enumeration)
    data = cast(list, P.List)
    renderer_type = cast(int, P.Enumeration)
    status = cast(int, P.Enumeration)
    vendor_extensions_enabled = cast(bool, P.Bool)


class PsShapeGradient(PsGradient):
    spread = cast(int, P.Enumeration)


class PsAbstractClipAnimator(P.PropSheet):
    channel_mapper: P.Property
    clock: P.Property
    loops = cast(int, P.Int)
    normalized_time = cast(float, P.Real)
    running = cast(bool, P.Bool)


class PsButton(PsAbstractButton):
    flat = cast(bool, P.Bool)
    highlighted = cast(bool, P.Bool)


class PsPopup(PsQtObject):
    active_focus = cast(bool, P.Bool)
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_margin = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    clip = cast(bool, P.Bool)
    close_policy = cast(int, P.Enumeration)
    content_children = cast(list, P.List)
    content_data = cast(list, P.List)
    content_height = cast(float, P.Real)
    content_item: P.Property
    content_width = cast(float, P.Real)
    dim = cast(bool, P.Bool)
    enabled = cast(bool, P.Bool)
    enter: P.Property
    exit: P.Property
    focus = cast(bool, P.Bool)
    font: P.Font
    height = cast(float, P.Real)
    horizontal_padding = cast(float, P.Real)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_margin = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    margins = cast(float, P.Real)
    mirrored = cast(bool, P.Bool)
    modal = cast(bool, P.Bool)
    opacity = cast(float, P.Real)
    opened = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    right_inset = cast(float, P.Real)
    right_margin = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    scale = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_margin = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    transform_origin = cast(int, P.Enumeration)
    vertical_padding = cast(float, P.Real)
    visible = cast(bool, P.Bool)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)


class PsMultiPointHandler(PsPointerDeviceHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    centroid: P.Property
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    maximum_point_count = cast(int, P.Int)
    minimum_point_count = cast(int, P.Int)
    parent: P.Property
    target: P.Property


class PsTableView(PsFlickable):
    bottom_row = cast(int, P.Int)
    column_spacing = cast(float, P.Real)
    column_width_provider: P.Var
    columns = cast(int, P.Int)
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)
    delegate: P.Property
    left_column = cast(int, P.Int)
    model: P.Property
    reuse_items = cast(bool, P.Bool)
    right_column = cast(int, P.Int)
    row_height_provider: P.Var
    row_spacing = cast(float, P.Real)
    rows = cast(int, P.Int)
    sync_direction: P.Property
    sync_view: P.Property
    top_row = cast(int, P.Int)


class PsParticlePainter(PsItem):
    groups = cast(list, P.List)
    system: P.Property


class PsColumnLayout(PsItem):
    layout_direction = cast(int, P.Enumeration)
    spacing = cast(float, P.Real)


class PsDirection3D(PsQtObject):
    pass


class PsParticle3D(PsObject3D):
    align_mode = cast(int, P.Enumeration)
    fade_type = cast(int, P.Enumeration)
    align_mode: P.Property
    align_target_position: P.Vector3D
    color = cast(str, P.Color)
    color_variation: P.Vector4D
    fade_in_duration = cast(int, P.Int)
    fade_in_effect: P.Property
    fade_out_duration = cast(int, P.Int)
    fade_out_effect: P.Property
    max_amount = cast(int, P.Int)
    system: P.Property
    unified_color_variation = cast(bool, P.Bool)


class PsCommand(P.PropSheet):
    pass


class PsInstancing(PsObject3D):
    has_transparency = cast(bool, P.Bool)
    instance_count_override = cast(int, P.Int)


class PsAbstractTextureImage(PsNode):
    face = cast(int, P.Enumeration)
    layer = cast(int, P.Int)
    mip_level = cast(int, P.Int)


class PsAbstractSkeleton(PsNode):
    pass


class PsBoundingVolume(P.PropSheet):
    implicit_max_point: P.Vector3D
    implicit_min_point: P.Vector3D
    implicit_points_valid = cast(bool, P.Bool)
    max_point: P.Vector3D
    min_point: P.Vector3D
    view: P.Property


class PsGeometry(P.PropSheet):
    attributes = cast(list, P.List)
    bounding_volume_position_attribute: P.Property
    max_extent: P.Vector3D
    min_extent: P.Vector3D
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsChartView(P.PropSheet):
    animation_duration = cast(int, P.Int)
    animation_easing_curve: P.Easing
    animation_options = cast(int, P.Enumeration)
    axes = cast(list, P.List)
    background_color = cast(str, P.Color)
    background_roundness = cast(float, P.Real)
    count = cast(int, P.Int)
    drop_shadow_enabled = cast(bool, P.Bool)
    legend: P.Property
    locale: P.Property
    localize_numbers = cast(bool, P.Bool)
    margins: P.Property
    plot_area: P.Rect
    plot_area_color = cast(str, P.Color)
    theme = cast(int, P.Enumeration)
    title = cast(str, P.String)
    title_color = cast(str, P.Color)
    title_font: P.Font


class PsFrame(PsPane):
    pass


class PsCanvas(PsItem):
    available = cast(bool, P.Bool)
    canvas_size: P.Size
    context: P.Property
    context_type = cast(str, P.String)
    render_strategy = cast(int, P.Enumeration)
    render_target = cast(int, P.Enumeration)


class PsImage(PsItem):
    asynchronous = cast(bool, P.Bool)
    auto_transform = cast(bool, P.Bool)
    cache = cast(bool, P.Bool)
    current_frame = cast(int, P.Int)
    fill_mode = cast(int, P.Enumeration)
    frame_count = cast(int, P.Int)
    horizontal_alignment = cast(int, P.Enumeration)
    mipmap = cast(bool, P.Bool)
    mirror = cast(bool, P.Bool)
    painted_height = cast(float, P.Real)
    painted_width = cast(float, P.Real)
    progress = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    source = cast(str, P.Url)
    source_clip_rect: P.Rect
    source_size: P.Size
    status = cast(int, P.Enumeration)
    vertical_alignment = cast(int, P.Enumeration)


class PsLoader(PsItem):
    active = cast(bool, P.Bool)
    asynchronous = cast(bool, P.Bool)
    item: P.Property
    progress = cast(float, P.Real)
    source = cast(str, P.Url)
    source_component: P.Property
    status = cast(int, P.Enumeration)


class PsMultiPointTouchArea(PsItem):
    maximum_touch_points = cast(int, P.Int)
    minimum_touch_points = cast(int, P.Int)
    mouse_enabled = cast(bool, P.Bool)
    touch_points = cast(list, P.List)


class PsPath(P.PropSheet):
    closed = cast(bool, P.Bool)
    path_elements = cast(list, P.List)
    scale: P.Size
    start_x = cast(float, P.Real)
    start_y = cast(float, P.Real)


class PsRectangle(PsItem):
    antialiasing = cast(bool, P.Bool)
    border: P.Border
    color = cast(str, P.Color)
    gradient: P.Property
    radius = cast(float, P.Real)


class PsText(PsItem):
    advance: P.Size
    antialiasing = cast(bool, P.Bool)
    base_url = cast(str, P.Url)
    bottom_padding = cast(float, P.Real)
    clip = cast(bool, P.Bool)
    color = cast(str, P.Color)
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)
    effective_horizontal_alignment = cast(int, P.Enumeration)
    elide = cast(int, P.Enumeration)
    font_size_mode = cast(int, P.Enumeration)
    horizontal_alignment = cast(int, P.Enumeration)
    hovered_link = cast(str, P.String)
    left_padding = cast(float, P.Real)
    line_count = cast(int, P.Int)
    line_height = cast(float, P.Real)
    line_height_mode = cast(int, P.Enumeration)
    link_color = cast(str, P.Color)
    maximum_line_count = cast(int, P.Int)
    minimum_pixel_size = cast(int, P.Int)
    minimum_point_size = cast(int, P.Int)
    padding = cast(float, P.Real)
    render_type = cast(int, P.Enumeration)
    render_type_quality = cast(int, P.Int)
    right_padding = cast(float, P.Real)
    style = cast(int, P.Enumeration)
    style_color = cast(str, P.Color)
    text = cast(str, P.String)
    text_format = cast(int, P.Enumeration)
    top_padding = cast(float, P.Real)
    truncated = cast(bool, P.Bool)
    vertical_alignment = cast(int, P.Enumeration)
    wrap_mode = cast(int, P.Enumeration)


class PsTextEdit(PsItem):
    active_focus_on_press = cast(bool, P.Bool)
    base_url = cast(str, P.Url)
    bottom_padding = cast(float, P.Real)
    can_paste = cast(bool, P.Bool)
    can_redo = cast(bool, P.Bool)
    can_undo = cast(bool, P.Bool)
    color = cast(str, P.Color)
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)
    cursor_delegate: P.Property
    cursor_position = cast(int, P.Int)
    cursor_rectangle: P.Property
    cursor_visible = cast(bool, P.Bool)
    effective_horizontal_alignment = cast(int, P.Enumeration)
    horizontal_alignment = cast(int, P.Enumeration)
    hovered_link = cast(str, P.String)
    input_method_composing = cast(bool, P.Bool)
    input_method_hints = cast(int, P.Enumeration)
    left_padding = cast(float, P.Real)
    length = cast(int, P.Int)
    line_count = cast(int, P.Int)
    mouse_selection_mode = cast(int, P.Enumeration)
    overwrite_mode = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    persistent_selection = cast(bool, P.Bool)
    preedit_text = cast(str, P.String)
    read_only = cast(bool, P.Bool)
    render_type = cast(int, P.Enumeration)
    right_padding = cast(float, P.Real)
    select_by_keyboard = cast(bool, P.Bool)
    select_by_mouse = cast(bool, P.Bool)
    selected_text = cast(str, P.String)
    selected_text_color = cast(str, P.Color)
    selection_color = cast(str, P.Color)
    selection_end = cast(int, P.Int)
    selection_start = cast(int, P.Int)
    tab_stop_distance = cast(float, P.Real)
    text = cast(str, P.String)
    text_document: P.Property
    text_format = cast(int, P.Enumeration)
    text_margin = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    vertical_alignment = cast(int, P.Enumeration)
    wrap_mode = cast(int, P.Enumeration)


class PsTextInput(PsItem):
    acceptable_input = cast(bool, P.Bool)
    active_focus_on_press = cast(bool, P.Bool)
    auto_scroll = cast(bool, P.Bool)
    bottom_padding = cast(float, P.Real)
    can_paste = cast(bool, P.Bool)
    can_redo = cast(bool, P.Bool)
    can_undo = cast(bool, P.Bool)
    color = cast(str, P.Color)
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)
    cursor_delegate: P.Property
    cursor_position = cast(int, P.Int)
    cursor_rectangle: P.Property
    cursor_visible = cast(bool, P.Bool)
    display_text = cast(str, P.String)
    echo_mode = cast(int, P.Enumeration)
    effective_horizontal_alignment = cast(int, P.Enumeration)
    horizontal_alignment = cast(int, P.Enumeration)
    input_mask = cast(str, P.String)
    input_method_composing = cast(bool, P.Bool)
    input_method_hints = cast(int, P.Enumeration)
    left_padding = cast(float, P.Real)
    length = cast(int, P.Int)
    maximum_length = cast(int, P.Int)
    mouse_selection_mode = cast(int, P.Enumeration)
    overwrite_mode = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    password_character = cast(str, P.String)
    password_mask_delay = cast(int, P.Int)
    persistent_selection = cast(bool, P.Bool)
    preedit_text = cast(str, P.String)
    read_only = cast(bool, P.Bool)
    render_type = cast(int, P.Enumeration)
    right_padding = cast(float, P.Real)
    select_by_mouse = cast(bool, P.Bool)
    selected_text = cast(str, P.String)
    selected_text_color = cast(str, P.Color)
    selection_color = cast(str, P.Color)
    selection_end = cast(int, P.Int)
    selection_start = cast(int, P.Int)
    text = cast(str, P.String)
    top_padding = cast(float, P.Real)
    validator: P.Property
    vertical_alignment = cast(int, P.Enumeration)
    wrap_mode = cast(int, P.Enumeration)


class PsWindow(P.PropSheet):
    active = cast(bool, P.Bool)
    active_focus_item: P.Property
    color = cast(str, P.Color)
    content_item: P.Property
    content_orientation: P.Property
    data = cast(list, P.List)
    flags: P.Property
    height = cast(int, P.Int)
    maximum_height = cast(int, P.Int)
    maximum_width = cast(int, P.Int)
    minimum_height = cast(int, P.Int)
    minimum_width = cast(int, P.Int)
    modality: P.Property
    opacity = cast(float, P.Real)
    palette: P.Property
    screen: P.Property
    title = cast(str, P.String)
    transient_parent: P.Property
    visibility: P.Property
    visible = cast(bool, P.Bool)
    width = cast(int, P.Int)
    x = cast(int, P.Int)
    y = cast(int, P.Int)


class PsRowLayout(PsItem):
    layout_direction = cast(int, P.Enumeration)
    spacing = cast(float, P.Real)


class PsParticleEmitter3D(PsNode):
    depth_bias = cast(float, P.Real)
    emit_bursts = cast(list, P.List)
    emit_rate = cast(float, P.Real)
    enabled = cast(bool, P.Bool)
    life_span = cast(int, P.Int)
    life_span_variation = cast(int, P.Int)
    particle: P.Property
    particle_end_scale = cast(float, P.Real)
    particle_rotation: P.Vector3D
    particle_rotation_variation: P.Vector3D
    particle_rotation_velocity: P.Vector3D
    particle_rotation_velocity_variation: P.Vector3D
    particle_scale = cast(float, P.Real)
    particle_scale_variation = cast(float, P.Real)
    shape: P.Property
    system: P.Property
    velocity: P.Property


class PsPerspectiveCamera(PsCamera):
    field_of_view_orientation = cast(int, P.Enumeration)
    clip_far = cast(float, P.Real)
    clip_near = cast(float, P.Real)
    field_of_view = cast(float, P.Real)
    # field_of_view_orientation = cast(int, P.Enumeration)


class PsComponent(P.PropSheet):
    progress = cast(float, P.Real)
    status = cast(int, P.Enumeration)
    url = cast(str, P.Url)


class PsWaylandQuickItem(P.PropSheet):
    buffer_locked = cast(bool, P.Bool)
    compositor: P.Property
    focus_on_click = cast(bool, P.Bool)
    origin: P.Property
    paint_enabled = cast(bool, P.Bool)
    subsurface_handler: P.Property
    surface: P.Property
    touch_events_enabled = cast(bool, P.Bool)


class PsAbstractActionInput(P.PropSheet):
    pass


class PsAbstractAxisInput(P.PropSheet):
    source_device: P.Property


class PsAbstractPhysicalDevice(P.PropSheet):
    pass


class PsAction(P.PropSheet):
    action = cast(bool, P.Bool)
    inputs = cast(list, P.List)
    checkable = cast(bool, P.Bool)
    checked = cast(bool, P.Bool)
    enabled = cast(bool, P.Bool)
    icon: P.Icon
    shortcut: P.Property
    text = cast(str, P.String)
    object_name = cast(str, P.String)


class PsActionInput(P.PropSheet):
    buttons = cast(list, P.List)
    source_device: P.Property


class PsAnalogAxisInput(P.PropSheet):
    axis = cast(int, P.Int)


class PsAxis(P.PropSheet):
    buttons: P.Property
    inputs = cast(list, P.List)
    scale = cast(float, P.Real)
    value = cast(int, P.Int)
    velocity = cast(float, P.Real)


class PsAxisAccumulator(P.PropSheet):
    source_axis: P.Axis
    source_axis_type: P.Property
    value = cast(float, P.Real)


class PsAxisSetting(P.PropSheet):
    axes = cast(list, P.List)
    axis: P.Property
    dead_zone_radius = cast(float, P.Number)
    smooth = cast(bool, P.Bool)


class PsButtonAxisInput(P.PropSheet):
    acceleration = cast(float, P.Real)
    buttons = cast(list, P.List)
    deceleration = cast(list, P.List)
    scale = cast(float, P.Real)


class PsInputChord(P.PropSheet):
    chords = cast(list, P.List)
    timeout = cast(int, P.Int)


class PsInputSequence(P.PropSheet):
    button_interval = cast(int, P.Int)
    sequences = cast(list, P.List)
    timeout = cast(int, P.Int)


class PsInputSettings(PsComponent3D):
    event_source: P.Property


class PsKeyboardDevice(PsNode):
    active_input: P.Property


class PsKeyboardHandler(PsComponent3D):
    focus = cast(bool, P.Bool)
    source_device: P.Property


class PsKeyEvent(P.PropSheet):
    accepted = cast(bool, P.Bool)
    count = cast(int, P.Int)
    is_auto_repeat = cast(bool, P.Bool)
    key = cast(int, P.Int)
    modifiers = cast(int, P.Int)
    native_scan_code: P.Property
    text = cast(str, P.String)


class PsLogicalDevice(P.PropSheet):
    actions = cast(list, P.List)
    axis = cast(list, P.List)


class PsMouseDevice(P.PropSheet):
    sensitivity = cast(float, P.Real)
    update_axes_continuously = cast(bool, P.Bool)


class PsMouseEvent(P.PropSheet):
    accepted = cast(bool, P.Bool)
    button = cast(int, P.Enumeration)
    buttons = cast(int, P.Int)
    flags = cast(int, P.Int)
    modifiers = cast(int, P.Int)
    source = cast(int, P.Int)
    was_held = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsMouseHandler(P.PropSheet):
    contains_mouse = cast(bool, P.Bool)
    source_device: P.Property


class PsWheelEvent(P.PropSheet):
    accepted = cast(bool, P.Bool)
    angle_delta: P.Point
    buttons = cast(int, P.Int)
    inverted = cast(bool, P.Bool)
    modifiers = cast(int, P.Int)
    pixel_delta: P.Point
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsAbstractClipBlendNode(P.PropSheet):
    pass


class PsAdditiveClipBlend(P.PropSheet):
    additive_clip: P.Property
    additive_factor = cast(float, P.Real)
    base_clip: P.Property


class PsAnimationController(P.PropSheet):
    animation: P.Property
    progress = cast(float, P.Real)


class PsAnimationGroup(P.PropSheet):
    animations = cast(list, P.List)
    duration = cast(float, P.Real)
    name_ = cast(str, P.String)
    position = cast(float, P.Real)


class PsBlendedClipAnimator(PsAbstractClipAnimator):
    blend_tree: P.Property


class PsClipAnimator(PsAbstractClipAnimator):
    clip: P.Var


class PsClipBlendValue(P.PropSheet):
    clip: P.Property


class PsKeyframeAnimation(PsAbstractAnimation):
    easing: P.Property
    end_mode = cast(int, P.Enumeration)
    frame_positions = cast(list, P.List)
    keyframes = cast(list, P.List)
    start_mode = cast(int, P.Enumeration)
    target: P.Property
    target_name = cast(str, P.String)


class PsLerpClipBlend(P.PropSheet):
    blend_factor = cast(float, P.Real)
    end_clip: P.Property
    start_clip: P.Property


class PsMorphingAnimation(PsAbstractAnimation):
    easing: P.Property
    interpolator = cast(float, P.Real)
    method = cast(int, P.Enumeration)
    morph_targets = cast(list, P.List)
    target: P.Property
    target_name = cast(str, P.String)
    target_positions = cast(list, P.List)


class PsMorphTarget(P.PropSheet):
    attribute_names = cast(list, P.List)
    attributes = cast(int, P.Enumeration)
    object_name = cast(str, P.String)
    weight = cast(float, P.Number)


class PsVertexBlendAnimation(PsAbstractAnimation):
    interpolator = cast(float, P.Real)
    morph_targets = cast(list, P.List)
    target: P.Property
    target_name = cast(str, P.String)
    target_positions = cast(list, P.List)


class PsAbstractRayCaster(P.PropSheet):
    filter_mode = cast(int, P.Enumeration)
    hits: P.Property
    run_mode = cast(int, P.Enumeration)


class PsAbstractTexture(P.PropSheet):
    handle: P.Var
    handle_type = cast(int, P.Enumeration)


class PsAlphaCoverage(PsRenderState):
    pass


class PsAlphaTest(PsRenderState):
    alpha_function = cast(int, P.Enumeration)
    reference_value = cast(float, P.Real)


class PsBlendEquation(PsRenderState):
    blend_function = cast(int, P.Enumeration)


class PsBlendEquationArguments(PsRenderState):
    destination_alpha = cast(int, P.Enumeration)
    buffer_index = cast(int, P.Int)
    destination_rgb = cast(int, P.Enumeration)
    source_alpha = cast(int, P.Enumeration)
    source_rgb = cast(int, P.Enumeration)


class PsBlitFramebuffer(PsFrameGraphNode):
    destination: P.Property
    destination_attachment_point: P.Property
    destination_rect: P.Rect
    interpolation_method: P.Property
    source: P.Property
    source_attachment_point: P.Property
    source_rect: P.Rect


class PsBufferCapture(P.PropSheet):
    pass


class PsCameraLens(PsComponent3D):
    aspect_ratio = cast(float, P.Real)
    bottom = cast(float, P.Real)
    far_plane = cast(float, P.Real)
    field_of_view = cast(float, P.Real)
    left = cast(float, P.Real)
    near_plane = cast(float, P.Real)
    projection_matrix: P.Matrix4x4
    projection_type = cast(int, P.Enumeration)
    right = cast(float, P.Real)
    top = cast(float, P.Real)


class PsCameraSelector(PsFrameGraphNode):
    camera: P.Property


class PsClearBuffers(PsFrameGraphNode):
    buffers = cast(int, P.Enumeration)
    clear_color = cast(str, P.Color)
    clear_depth_value = cast(float, P.Real)
    clear_stencil_value = cast(int, P.Int)
    color_buffer: P.Property


class PsClipPlane(PsRenderState):
    distance = cast(float, P.Real)
    normal: P.Vector3D
    plane_index = cast(int, P.Int)


class PsColorMask(PsRenderState):
    alpha_masked = cast(bool, P.Bool)
    blue_masked = cast(bool, P.Bool)
    green_masked = cast(bool, P.Bool)
    red_masked = cast(bool, P.Bool)


class PsComputeCommand(PsComponent3D):
    run_type = cast(int, P.Enumeration)
    work_group_x = cast(int, P.Int)
    work_group_y = cast(int, P.Int)
    work_group_z = cast(int, P.Int)


class PsCullFace(PsRenderState):
    mode = cast(int, P.Enumeration)


class PsDebugOverlay(PsFrameGraphNode):
    pass


class PsDepthRange(PsRenderState):
    pass


class PsDepthTest(PsRenderState):
    depth_function = cast(int, P.Enumeration)


class PsDirectionalLight(P.PropSheet):
    world_direction: P.Vector3D
    type = cast(int, P.Enumeration)
    ambient_color = cast(str, P.Color)
    brightness = cast(float, P.Real)
    casts_shadow = cast(bool, P.Bool)
    color = cast(str, P.Color)
    scope: P.Property
    shadow_bias = cast(float, P.Real)
    shadow_factor = cast(float, P.Real)
    shadow_filter = cast(float, P.Real)
    shadow_map_far = cast(float, P.Real)
    shadow_map_quality = cast(int, P.Enumeration)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsDispatchCompute(PsFrameGraphNode):
    work_group_x = cast(int, P.Int)
    work_group_y = cast(int, P.Int)
    work_group_z = cast(int, P.Int)


class PsDithering(PsRenderState):
    pass


class PsEffect(P.PropSheet):
    parameters = cast(list, P.List)
    techniques = cast(list, P.List)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)
    passes = cast(list, P.List)


class PsEnvironmentLight(P.PropSheet):
    irradiance: P.Property
    specular: P.Property


class PsFilterKey(PsNode):
    name_ = cast(str, P.String)
    value: P.Property


class PsFrontFace(PsRenderState):
    direction = cast(int, P.Enumeration)


class PsFrustumCulling(PsFrameGraphNode):
    pass


class PsGeometryRenderer(PsBoundingVolume):
    first_instance = cast(int, P.Int)
    first_vertex = cast(int, P.Int)
    geometry: P.Property
    index_buffer_byte_offset = cast(int, P.Int)
    index_offset = cast(int, P.Int)
    instance_count = cast(int, P.Int)
    primitive_restart_enabled = cast(bool, P.Bool)
    primitive_type = cast(int, P.Enumeration)
    restart_index_value = cast(int, P.Int)
    sort_index = cast(float, P.Number)
    vertex_count = cast(int, P.Int)
    vertices_per_patch = cast(int, P.Int)


class PsGraphicsApiFilter(PsQtObject):
    api = cast(int, P.Enumeration)
    extensions: P.Property
    major_version = cast(int, P.Int)
    minor_version = cast(int, P.Int)
    profile = cast(int, P.Enumeration)
    vendor = cast(str, P.String)


class PsLayer(PsComponent3D):
    recursive = cast(bool, P.Bool)


class PsLayerFilter(PsFrameGraphNode):
    filter_mode = cast(int, P.Enumeration)
    layers = cast(list, P.List)


class PsLevelOfDetail(PsComponent3D):
    threshold_type = cast(int, P.Enumeration)
    camera: P.Property
    current_index = cast(int, P.Int)
    # threshold_type = cast(int, P.Int)
    thresholds: P.Property
    volume_override = cast(int, P.Int)


class PsLevelOfDetailBoundingSphere(PsComponent3D):
    center: P.Property
    radius: P.Property


class PsLevelOfDetailLoader(PsEntity):
    sources = cast(list, P.List)


class PsLevelOfDetailSwitch(PsComponent3D):
    current_index = cast(int, P.Int)


class PsLight(P.PropSheet):
    type = cast(int, P.Enumeration)
    ambient_color = cast(str, P.Color)
    brightness = cast(float, P.Real)
    casts_shadow = cast(bool, P.Bool)
    color = cast(str, P.Color)
    scope: P.Property
    shadow_bias = cast(float, P.Real)
    shadow_factor = cast(float, P.Real)
    shadow_filter = cast(float, P.Real)
    shadow_map_far = cast(float, P.Real)
    shadow_map_quality = cast(int, P.Enumeration)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsLineWidth(PsRenderState):
    value = cast(float, P.Real)


class PsMemoryBarrier(PsFrameGraphNode):
    pass


class PsMesh(P.PropSheet):
    mesh_name = cast(str, P.String)
    source = cast(str, P.Url)
    status = cast(int, P.Enumeration)


class PsMultiSampleAntiAliasing(PsRenderState):
    pass


class PsNoDepthMask(PsRenderState):
    pass


class PsNoDraw(PsFrameGraphNode):
    pass


class PsNoPicking(PsFrameGraphNode):
    pass


class PsObjectPicker(P.PropSheet):
    contains_mouse = cast(bool, P.Bool)
    drag_enabled = cast(bool, P.Bool)
    hover_enabled = cast(bool, P.Bool)
    pressed = cast(bool, P.Bool)
    priority = cast(int, P.Int)


class PsParameter(P.PropSheet):
    name_: P.Property
    value: P.Property


class PsPickEvent(P.PropSheet):
    accepted = cast(bool, P.Bool)
    button = cast(int, P.Int)
    buttons = cast(int, P.Int)
    distance = cast(float, P.Real)
    entity: P.Property
    local_intersection: P.Vector3D
    modifiers = cast(int, P.Int)
    position: P.Property
    viewport: P.Property
    world_intersection: P.Vector3D


class PsPickingProxy(PsComponent3D):
    pass


class PsPickingSettings(P.PropSheet):
    face_orientation_picking_mode = cast(int, P.Enumeration)
    pick_method = cast(int, P.Enumeration)
    pick_result_mode = cast(int, P.Enumeration)
    world_space_tolerance: P.Property


class PsPickLineEvent(P.PropSheet):
    triangle_index: P.Property
    vertex1index: P.Property
    vertex2index: P.Property


class PsPickPointEvent(P.PropSheet):
    point_index: P.Property


class PsPickTriangleEvent(P.PropSheet):
    triangle_index: P.Property
    vertex1index: P.Property
    vertex2index: P.Property
    vertex3index: P.Property


class PsPointLight(P.PropSheet):
    constant_attenuation = cast(float, P.Number)
    linear_attenuation = cast(float, P.Number)
    quadratic_attenuation = cast(float, P.Number)
    constant_fade = cast(float, P.Real)
    linear_fade = cast(float, P.Real)
    quadratic_fade = cast(float, P.Real)
    type = cast(int, P.Enumeration)
    ambient_color = cast(str, P.Color)
    brightness = cast(float, P.Real)
    casts_shadow = cast(bool, P.Bool)
    color = cast(str, P.Color)
    scope: P.Property
    shadow_bias = cast(float, P.Real)
    shadow_factor = cast(float, P.Real)
    shadow_filter = cast(float, P.Real)
    shadow_map_far = cast(float, P.Real)
    shadow_map_quality = cast(int, P.Enumeration)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsPointSize(PsRenderState):
    size_mode = cast(int, P.Enumeration)
    value = cast(float, P.Real)


class PsPolygonOffset(PsRenderState):
    depth_steps = cast(float, P.Real)
    scale_factor = cast(float, P.Real)


class PsProximityFilter(PsFrameGraphNode):
    distance_threshold = cast(float, P.Real)
    entity: P.Property


class PsRasterMode(PsRenderState):
    face_mode = cast(int, P.Enumeration)
    raster_mode = cast(int, P.Enumeration)


class PsRayCaster(P.PropSheet):
    direction: P.Vector3D
    length = cast(float, P.Real)
    origin: P.Vector3D


class PsRenderCapabilities(P.PropSheet):
    api: P.Property
    driver_version: P.Property
    extensions: P.Property
    glsl_version: P.Property
    major_version = cast(int, P.Int)
    max_compute_invocations = cast(int, P.Int)
    max_compute_shared_memory_size = cast(int, P.Int)
    max_image_units = cast(int, P.Int)
    max_ssbo_bindings = cast(int, P.Int)
    max_ssbo_size = cast(int, P.Int)
    max_samples = cast(int, P.Int)
    max_texture_layers = cast(int, P.Int)
    max_texture_size = cast(int, P.Int)
    max_texture_units = cast(int, P.Int)
    max_ubo_bindings = cast(int, P.Int)
    max_ubo_size = cast(int, P.Int)
    max_work_group_count_x = cast(int, P.Int)
    max_work_group_count_y = cast(int, P.Int)
    max_work_group_count_z = cast(int, P.Int)
    max_work_group_size_x = cast(int, P.Int)
    max_work_group_size_y = cast(int, P.Int)
    max_work_group_size_z = cast(int, P.Int)
    minor_version = cast(int, P.Int)
    profile = cast(bool, P.Bool)
    renderer: P.Property
    supports_compute = cast(bool, P.Bool)
    supports_image_store = cast(bool, P.Bool)
    supports_ssbo = cast(bool, P.Bool)
    supports_ubo = cast(bool, P.Bool)
    valid = cast(bool, P.Bool)
    vendor: P.Property


class PsRenderCapture(PsFrameGraphNode):
    pass


class PsRenderCaptureReply(P.PropSheet):
    capture_id = cast(int, P.Int)
    complete = cast(bool, P.Bool)
    image: P.Property


class PsRenderPass(PsNode):
    filter_keys = cast(list, P.List)
    parameters = cast(list, P.List)
    render_states = cast(list, P.List)
    shader_program: P.Property


class PsRenderPassFilter(PsFrameGraphNode):
    match_any = cast(list, P.List)
    parameters = cast(list, P.List)


class PsRenderSettings(P.PropSheet):
    active_frame_graph: P.Property
    picking_settings: P.Property
    render_capabilities: P.Property
    render_policy = cast(int, P.Enumeration)


class PsRenderStateSet(PsFrameGraphNode):
    render_states = cast(list, P.List)


class PsRenderSurfaceSelector(PsFrameGraphNode):
    external_render_target_size: P.Size
    surface: P.Property
    surface_pixel_ratio = cast(float, P.Real)


class PsRenderTarget(P.PropSheet):
    attachments = cast(list, P.List)


class PsRenderTargetOutput(PsNode):
    attachment_point = cast(int, P.Enumeration)
    face = cast(int, P.Enumeration)
    layer = cast(int, P.Int)
    mip_level = cast(int, P.Int)
    texture: P.Property


class PsRenderTargetSelector(PsFrameGraphNode):
    target: P.Property


class PsSceneLoader(PsComponent):
    source = cast(str, P.Url)
    status = cast(int, P.Enumeration)


class PsScissorTest(PsRenderState):
    bottom = cast(int, P.Int)
    height = cast(int, P.Int)
    left = cast(int, P.Int)
    width = cast(int, P.Int)


class PsScreenRayCaster(P.PropSheet):
    position: P.Point


class PsSeamlessCubemap(PsRenderState):
    pass


class PsShaderImage(P.PropSheet):
    access = cast(int, P.Enumeration)
    format = cast(int, P.Enumeration)
    layer = cast(int, P.Int)
    layered = cast(bool, P.Bool)
    mip_level = cast(int, P.Int)


class PsShaderProgram(P.PropSheet):
    compute_shader_code = cast(str, P.String)
    compute_shader_graph = cast(str, P.String)
    format = cast(int, P.Enumeration)
    fragment_shader_code = cast(str, P.String)
    fragment_shader_graph = cast(str, P.String)
    geometry_shader_code = cast(str, P.String)
    geometry_shader_graph = cast(str, P.String)
    log = cast(str, P.String)
    status = cast(int, P.Enumeration)
    tessellation_control_shader_code = cast(str, P.String)
    tessellation_control_shader_graph = cast(str, P.String)
    tessellation_evaluation_shader_code = cast(str, P.String)
    tessellation_evaluation_shader_graph = cast(str, P.String)
    vertex_shader_code = cast(str, P.String)
    vertex_shader_graph = cast(str, P.String)


class PsShaderProgramBuilder(P.PropSheet):
    compute_shader_code = cast(str, P.String)
    enabled_layers: P.Property
    fragment_shader_code = cast(str, P.String)
    geometry_shader_code = cast(str, P.String)
    shader_program = cast(str, P.String)
    tessellation_control_shader_code = cast(str, P.String)
    tessellation_evaluation_shader_code = cast(str, P.String)
    vertex_shader_code = cast(str, P.String)


class PsSharedGLTexture(P.PropSheet):
    texture_id = cast(int, P.Int)


class PsSortPolicy(PsFrameGraphNode):
    sort_types = cast(list, P.List)


class PsSpotLight(P.PropSheet):
    constant_attenuation = cast(float, P.Number)
    cut_off_angle = cast(float, P.Number)
    linear_attenuation = cast(float, P.Number)
    local_direction: P.Vector3D
    quadratic_attenuation = cast(float, P.Number)
    cone_angle = cast(float, P.Real)
    constant_fade = cast(float, P.Real)
    inner_cone_angle = cast(float, P.Real)
    linear_fade = cast(float, P.Real)
    quadratic_fade = cast(float, P.Real)
    type = cast(int, P.Enumeration)
    ambient_color = cast(str, P.Color)
    brightness = cast(float, P.Real)
    casts_shadow = cast(bool, P.Bool)
    color = cast(str, P.Color)
    scope: P.Property
    shadow_bias = cast(float, P.Real)
    shadow_factor = cast(float, P.Real)
    shadow_filter = cast(float, P.Real)
    shadow_map_far = cast(float, P.Real)
    shadow_map_quality = cast(int, P.Enumeration)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsStencilMask(PsRenderState):
    back_output_mask = cast(int, P.Int)
    front_output_mask = cast(int, P.Int)


class PsStencilOperation(PsRenderState):
    back: P.Property
    front: P.Property


class PsStencilOperationArguments(PsQtObject):
    all_tests_pass_operation = cast(int, P.Enumeration)
    depth_test_failure_operation = cast(int, P.Enumeration)
    face_mode = cast(int, P.Enumeration)
    stencil_test_failure_operation = cast(int, P.Enumeration)


class PsStencilTest(PsRenderState):
    back: P.Property
    front: P.Property


class PsStencilTestArguments(PsQtObject):
    comparison_mask = cast(int, P.Int)
    face_mode = cast(int, P.Enumeration)
    reference_value = cast(int, P.Int)
    stencil_function = cast(int, P.Enumeration)


class PsSubtreeEnabler(PsFrameGraphNode):
    enablement = cast(int, P.Enumeration)


class PsTechnique(P.PropSheet):
    filter_keys = cast(list, P.List)
    graphics_api_filter: P.Property
    parameters = cast(list, P.List)
    render_passes = cast(list, P.List)


class PsTechniqueFilter(PsFrameGraphNode):
    match_all = cast(list, P.List)
    parameters = cast(list, P.List)


class PsTexture1D(P.PropSheet):
    pass


class PsTexture1DArray(P.PropSheet):
    pass


class PsTexture2D(P.PropSheet):
    pass


class PsTexture2DArray(P.PropSheet):
    pass


class PsTexture2DMultisample(P.PropSheet):
    pass


class PsTexture2DMultisampleArray(P.PropSheet):
    pass


class PsTexture3D(P.PropSheet):
    pass


class PsTextureBuffer(P.PropSheet):
    pass


class PsTextureCubeMap(P.PropSheet):
    pass


class PsTextureCubeMapArray(P.PropSheet):
    pass


class PsTextureImage(PsAbstractTextureImage):
    face = cast(int, P.Enumeration)
    layer = cast(int, P.Int)
    mip_level = cast(int, P.Int)
    source = cast(str, P.Url)
    status = cast(int, P.Enumeration)


class PsTextureLoader(P.PropSheet):
    mirrored = cast(bool, P.Bool)
    source = cast(str, P.Url)


class PsTextureRectangle(P.PropSheet):
    pass


class PsViewport(PsFrameGraphNode):
    gamma: P.Rect
    normalized_rect: P.Rect


class PsArmature(PsComponent3D):
    skeleton: P.Property


class PsAttribute(P.PropSheet):
    pass


class PsBuffer(P.PropSheet):
    buffer_flags = cast(int, P.Enumeration)
    format = cast(int, P.Enumeration)
    name_ = cast(str, P.String)
    size_multiplier = cast(float, P.Real)
    texture_coord_operation = cast(int, P.Enumeration)
    texture_filter_operation = cast(int, P.Enumeration)


class PsCoreSettings(P.PropSheet):
    bounding_volumes_enabled = cast(bool, P.Bool)


class PsEntityLoader(PsEntity):
    entity: P.Property
    source = cast(str, P.Url)
    status: P.Property


class PsGeometryView(PsNode):
    first_instance = cast(int, P.Int)
    first_vertex = cast(int, P.Int)
    geometry: P.Property
    index_buffer_byte_offset = cast(int, P.Int)
    index_offset = cast(int, P.Int)
    instance_count = cast(int, P.Int)
    primitive_restart = cast(bool, P.Bool)
    primitive_type = cast(int, P.Enumeration)
    restart_index = cast(int, P.Int)
    vertex_count = cast(int, P.Int)
    vertices_per_patch = cast(int, P.Int)


class PsJoint(PsNode):
    index = cast(int, P.Int)
    skeleton_root: P.Property


class PsNodeInstantiator(P.PropSheet):
    active = cast(bool, P.Bool)
    asynchronous = cast(bool, P.Bool)
    count = cast(int, P.Int)
    delegate: P.Property
    model: P.Property
    object: P.Property


class PsQuaternionAnimation(PsPropertyAnimation):
    from_: P.Quaternion
    from_x_rotation = cast(float, P.Number)
    from_y_rotation = cast(float, P.Number)
    from_z_rotation = cast(float, P.Number)
    to: P.Quaternion
    to_x_rotation = cast(float, P.Number)
    to_y_rotation = cast(float, P.Number)
    to_z_rotation = cast(float, P.Number)
    type = cast(int, P.Enumeration)


class PsSkeleton(P.PropSheet):
    root_joint: P.Property
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsSkeletonLoader(PsAbstractSkeleton):
    source = cast(str, P.Url)
    status: P.Property


class PsTransform(P.PropSheet):
    matrix: P.Matrix4x4
    rotation: P.Quaternion
    rotation_x = cast(float, P.Real)
    rotation_y = cast(float, P.Real)
    rotation_z = cast(float, P.Real)
    scale: P.Vector3D
    scale3d: P.Vector3D
    translation: P.Vector3D
    is_shareable = cast(bool, P.Bool)
    child_nodes = cast(list, P.List)
    data = cast(list, P.List)
    transform_space = cast(int, P.Enumeration)
    euler_rotation: P.Vector3D
    forward: P.Vector3D
    opacity = cast(float, P.Real)
    pivot: P.Vector3D
    position: P.Vector3D
    right: P.Vector3D
    scene_position: P.Vector3D
    scene_rotation: P.Vector3D
    scene_scale: P.Vector3D
    scene_transform: P.Matrix4x4
    static_flags = cast(int, P.Int)
    up: P.Vector3D
    visible = cast(bool, P.Bool)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    children = cast(list, P.List)
    parent: P.Property
    resources = cast(list, P.List)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)
    object_name = cast(str, P.String)


class PsConeGeometry(P.PropSheet):
    bottom_radius = cast(float, P.Real)
    has_bottom_endcap = cast(bool, P.Bool)
    has_top_endcap = cast(bool, P.Bool)
    index_attribute: P.Property
    length = cast(float, P.Real)
    normal_attribute: P.Property
    position_attribute: P.Property
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)
    tex_coord_attribute: P.Property
    top_radius = cast(float, P.Real)


class PsConeGeometryView(P.PropSheet):
    bottom_radius = cast(float, P.Real)
    has_bottom_endcap = cast(bool, P.Bool)
    has_top_endcap = cast(bool, P.Bool)
    length = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)
    top_radius = cast(float, P.Real)


class PsConeMesh(P.PropSheet):
    bottom_radius = cast(float, P.Real)
    has_bottom_endcap = cast(bool, P.Bool)
    has_top_endcap = cast(bool, P.Bool)
    length = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)
    top_radius = cast(float, P.Real)


class PsCuboidGeometry(P.PropSheet):
    index_attribute: P.Property
    normal_attribute: P.Property
    position_attribute: P.Property
    tangent_attribute: P.Property
    tex_coord_attribute: P.Property
    x_extent = cast(float, P.Real)
    xy_mesh_resolution: P.Size
    xz_mesh_resolution: P.Size
    y_extent = cast(float, P.Real)
    yz_mesh_resolution: P.Size
    z_extent = cast(float, P.Real)


class PsCuboidGeometryView(P.PropSheet):
    x_extent = cast(float, P.Real)
    xy_mesh_resolution: P.Size
    xz_mesh_resolution: P.Size
    y_extent = cast(float, P.Real)
    yz_mesh_resolution: P.Size
    z_extent = cast(float, P.Real)


class PsCuboidMesh(P.PropSheet):
    x_extent = cast(float, P.Real)
    xy_mesh_resolution: P.Size
    xz_mesh_resolution: P.Size
    y_extent = cast(float, P.Real)
    yz_mesh_resolution: P.Size
    z_extent = cast(float, P.Real)


class PsCylinderGeometry(P.PropSheet):
    index_attribute: P.Property
    length = cast(float, P.Real)
    normal_attribute: P.Property
    position_attribute: P.Property
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)
    tex_coord_attribute: P.Property


class PsCylinderGeometryView(P.PropSheet):
    length = cast(float, P.Real)
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)


class PsCylinderMesh(P.PropSheet):
    length = cast(float, P.Real)
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)


class PsDiffuseMapMaterial(PsMaterial):
    ambient = cast(str, P.Color)
    diffuse: P.Property
    shininess = cast(float, P.Real)
    specular = cast(str, P.Color)
    texture_scale = cast(float, P.Real)


class PsDiffuseSpecularMapMaterial(PsMaterial):
    ambient = cast(str, P.Color)
    diffuse: P.Property
    shininess = cast(float, P.Real)
    specular: P.Property
    texture_scale = cast(float, P.Real)


class PsDiffuseSpecularMaterial(P.PropSheet):
    alpha_blending = cast(bool, P.Bool)
    ambient = cast(str, P.Color)
    diffuse: P.Var
    normal: P.Var
    shininess = cast(float, P.Real)
    specular: P.Var
    texture_scale = cast(float, P.Real)


class PsExtrudedTextGeometry(P.PropSheet):
    depth = cast(float, P.Number)
    font: P.Property
    index_attribute: P.Property
    normal_attribute: P.Property
    position_attribute: P.Property
    text: P.Property


class PsExtrudedTextMesh(P.PropSheet):
    depth = cast(float, P.Number)
    font: P.Property
    text: P.Property


class PsFirstPersonCameraController(PsEntity):
    acceleration = cast(float, P.Real)
    camera: P.Property
    deceleration = cast(float, P.Real)
    linear_speed = cast(float, P.Real)
    look_speed = cast(float, P.Real)


class PsForwardRenderer(P.PropSheet):
    buffers_to_clear = cast(str, P.Color)
    camera: P.Property
    clear_color = cast(str, P.Color)
    external_render_target_size: P.Property
    frustum_culling = cast(bool, P.Bool)
    gamma = cast(float, P.Real)
    show_debug_overlay = cast(bool, P.Bool)
    surface: P.Property
    viewport_rect: P.Rect


class PsGoochMaterial(PsMaterial):
    alpha = cast(float, P.Real)
    beta = cast(float, P.Real)
    cool = cast(str, P.Color)
    diffuse = cast(str, P.Color)
    shininess = cast(float, P.Real)
    specular = cast(str, P.Color)
    warm = cast(str, P.Color)


class PsMetalRoughMaterial(P.PropSheet):
    ambient_occlusion: P.Property
    base_color: P.Property
    metalness: P.Property
    normal: P.Property
    roughness: P.Property
    texture_scale = cast(float, P.Real)


class PsNormalDiffuseMapAlphaMaterial(PsMaterial):
    ambient = cast(str, P.Color)
    diffuse: P.Property
    normal: P.Property
    shininess = cast(float, P.Real)
    specular = cast(str, P.Color)
    texture_scale = cast(float, P.Real)


class PsNormalDiffuseMapMaterial(PsMaterial):
    ambient = cast(str, P.Color)
    diffuse: P.Property
    normal: P.Property
    shininess = cast(float, P.Real)
    specular = cast(str, P.Color)
    texture_scale = cast(float, P.Real)


class PsNormalDiffuseSpecularMapMaterial(PsMaterial):
    ambient = cast(str, P.Color)
    diffuse: P.Property
    normal: P.Property
    shininess = cast(float, P.Real)
    specular: P.Property
    texture_scale = cast(float, P.Real)


class PsOrbitCameraController(PsEntity):
    camera: P.Property
    linear_speed = cast(float, P.Real)
    look_speed = cast(float, P.Real)
    zoom_limit = cast(float, P.Real)


class PsPerVertexColorMaterial(PsMaterial):
    pass


class PsPhongAlphaMaterial(PsMaterial):
    alpha = cast(float, P.Real)
    ambient = cast(str, P.Color)
    blend_function_arg: P.Property
    destination_alpha_arg: P.Property
    destination_rgb_arg: P.Property
    diffuse = cast(str, P.Color)
    shininess = cast(float, P.Real)
    source_alpha_arg: P.Property
    source_rgb_arg: P.Property
    specular = cast(str, P.Color)


class PsPhongMaterial(PsMaterial):
    ambient = cast(str, P.Color)
    diffuse = cast(str, P.Color)
    shininess = cast(float, P.Real)
    specular = cast(str, P.Color)


class PsPlaneGeometry(P.PropSheet):
    height = cast(float, P.Real)
    index_attribute: P.Property
    mirrored = cast(bool, P.Bool)
    normal_attribute: P.Property
    position_attribute: P.Property
    resolution: P.Size
    tangent_attribute: P.Property
    tex_coord_attribute: P.Property
    width = cast(float, P.Real)


class PsPlaneGeometryView(P.PropSheet):
    height = cast(float, P.Real)
    mesh_resolution: P.Size
    mirrored = cast(bool, P.Bool)
    width = cast(float, P.Real)


class PsPlaneMesh(P.PropSheet):
    height = cast(float, P.Real)
    mesh_resolution: P.Size
    mirrored = cast(bool, P.Bool)
    width = cast(float, P.Real)


class PsSkyboxEntity(P.PropSheet):
    pass


class PsSphereGeometry(P.PropSheet):
    generate_tangents = cast(bool, P.Bool)
    index_attribute: P.Property
    normal_attribute: P.Property
    position_attribute: P.Property
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)
    tangent_attribute: P.Property
    tex_coord_attribute: P.Property


class PsSphereGeometryView(P.PropSheet):
    generate_tangents = cast(bool, P.Bool)
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)


class PsSphereMesh(P.PropSheet):
    generate_tangents = cast(bool, P.Bool)
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)


class PsText2DEntity(P.PropSheet):
    color: P.Property
    font: P.Property
    height = cast(float, P.Number)
    text: P.Property
    width = cast(float, P.Number)


class PsTorusGeometry(P.PropSheet):
    index_attribute: P.Property
    minor_radius = cast(float, P.Real)
    normal_attribute: P.Property
    position_attribute: P.Property
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)
    tex_coord_attribute: P.Property


class PsTorusGeometryView(P.PropSheet):
    minor_radius = cast(float, P.Real)
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)


class PsTorusMesh(P.PropSheet):
    minor_radius = cast(float, P.Real)
    radius = cast(float, P.Real)
    rings = cast(int, P.Int)
    slices = cast(int, P.Int)


class PsFrameAction(PsComponent3D):
    pass


class PsScene2D(P.PropSheet):
    entities = cast(list, P.List)
    item: P.Property
    mouse_enabled = cast(bool, P.Bool)
    output: P.Property
    render_policy = cast(int, P.Enumeration)


class PsScene3D(PsItem):
    aspects = cast(list, P.List)
    camera_aspect_ratio_mode = cast(int, P.Enumeration)
    compositing_mode = cast(int, P.Enumeration)
    entity: P.Property
    hover_enabled = cast(bool, P.Bool)
    multisample = cast(bool, P.Bool)


class PsAreaSeries(PsAbstractSeries):
    axis_angular: P.Property
    axis_radial: P.Property
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    border_color = cast(str, P.Color)
    border_width = cast(float, P.Real)
    brush: P.Property
    brush_filename: P.Property
    color = cast(str, P.Color)
    lower_series: P.Property
    point_labels_clipping = cast(bool, P.Bool)
    point_labels_color: P.Font
    point_labels_font: P.Font
    point_labels_format = cast(str, P.String)
    point_labels_visible = cast(bool, P.Bool)
    upper_series: P.Property


class PsBarCategoryAxis(PsAbstractAxis):
    categories: P.Property
    count = cast(int, P.Int)
    max = cast(str, P.String)
    min = cast(str, P.String)


class PsBarSeries(PsAbstractBarSeries):
    pass


class PsBarSet(P.PropSheet):
    border_color = cast(str, P.Color)
    border_width = cast(float, P.Real)
    brush_filename = cast(str, P.String)
    color = cast(str, P.Color)
    count = cast(int, P.Int)
    label = cast(str, P.String)
    label_color = cast(str, P.Color)
    label_font: P.Font
    values: P.Property


class PsBoxPlotSeries(PsAbstractSeries):
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    box_outline_visible = cast(bool, P.Bool)
    box_width = cast(float, P.Real)
    brush_filename = cast(str, P.String)
    count = cast(int, P.Int)


class PsBoxSet(P.PropSheet):
    brush_filename = cast(str, P.String)
    count = cast(int, P.Int)
    label = cast(str, P.String)
    values = cast(list, P.List)


class PsCandlestickSeries(PsAbstractSeries):
    axis_x: P.Property
    axis_x_top: P.Property
    axis_y: P.Property
    axis_y_right: P.Property
    body_outline_visible = cast(bool, P.Bool)
    body_width = cast(float, P.Real)
    brush_filename = cast(str, P.String)
    caps_visible = cast(bool, P.Bool)
    caps_width = cast(float, P.Real)
    count = cast(int, P.Int)
    decreasing_color = cast(str, P.Color)
    increasing_color = cast(str, P.Color)
    maximum_column_width = cast(float, P.Real)
    minimum_column_width = cast(float, P.Real)


class PsCandlestickSet(P.PropSheet):
    brush_filename = cast(str, P.String)
    close = cast(float, P.Real)
    high = cast(float, P.Real)
    low = cast(float, P.Real)
    open = cast(float, P.Real)
    timestamp = cast(float, P.Real)


class PsCategoryAxis(PsAbstractAxis):
    categories_labels: P.Property
    count = cast(int, P.Int)
    labels_position = cast(int, P.Enumeration)
    start_value = cast(int, P.Int)


class PsCategoryRange(P.PropSheet):
    end_value = cast(int, P.Int)
    label = cast(str, P.String)


class PsDateTimeAxis(PsAbstractAxis):
    format = cast(str, P.String)
    max: P.Property
    min: P.Property
    tick_count = cast(int, P.Int)


class PsHBarModelMapper(P.PropSheet):
    column_count = cast(int, P.Int)
    first_bar_set_row = cast(int, P.Int)
    first_column = cast(int, P.Int)
    last_bar_set_row = cast(int, P.Int)
    model: P.Property
    series: P.Property


class PsHBoxPlotModelMapper(P.PropSheet):
    column_count = cast(int, P.Int)
    first_box_set_row = cast(int, P.Int)
    first_column = cast(int, P.Int)
    last_box_set_row = cast(int, P.Int)
    model: P.Property
    series: P.Property


class PsHCandlestickModelMapper(P.PropSheet):
    close_column = cast(int, P.Int)
    first_set_row = cast(int, P.Int)
    high_column = cast(int, P.Int)
    last_set_row = cast(int, P.Int)
    low_column = cast(int, P.Int)
    model: P.Property
    open_column = cast(int, P.Int)
    series: P.Property
    timestamp_column = cast(int, P.Int)


class PsHorizontalBarSeries(PsAbstractBarSeries):
    pass


class PsHorizontalPercentBarSeries(PsAbstractBarSeries):
    pass


class PsHorizontalStackedBarSeries(PsAbstractBarSeries):
    pass


class PsHPieModelMapper(P.PropSheet):
    column_count = cast(int, P.Int)
    first_column = cast(int, P.Int)
    labels_row = cast(int, P.Int)
    model: P.Property
    series: P.Property
    values_row = cast(int, P.Int)


class PsHXYModelMapper(P.PropSheet):
    column_count = cast(int, P.Int)
    first_column = cast(int, P.Int)
    model: P.Property
    series: P.Property
    x_row = cast(int, P.Int)
    y_row = cast(int, P.Int)


class PsLegend(P.PropSheet):
    alignment: P.Property
    background_visible = cast(bool, P.Bool)
    border_color = cast(str, P.Color)
    color = cast(str, P.Color)
    font: P.Font
    label_color = cast(str, P.Color)
    marker_shape = cast(int, P.Enumeration)
    reverse_markers = cast(bool, P.Bool)
    show_tool_tips = cast(bool, P.Bool)
    visible = cast(bool, P.Bool)


class PsLineSeries(PsXYSeries):
    cap_style: P.Property
    count = cast(int, P.Int)
    style: P.Property
    width = cast(float, P.Real)


class PsLogValueAxis(PsAbstractAxis):
    base = cast(float, P.Real)
    label_format = cast(float, P.Real)
    max = cast(float, P.Real)
    min = cast(float, P.Real)
    minor_tick_count = cast(int, P.Int)
    tick_count = cast(int, P.Int)


class PsMargins(P.PropSheet):
    bottom = cast(int, P.Int)
    left = cast(int, P.Int)
    right = cast(int, P.Int)
    top = cast(int, P.Int)


class PsPercentBarSeries(PsAbstractBarSeries):
    pass


class PsPieSeries(PsAbstractSeries):
    count = cast(int, P.Int)
    end_angle = cast(float, P.Real)
    hole_size = cast(float, P.Real)
    horizontal_position = cast(float, P.Real)
    size = cast(float, P.Real)
    start_angle = cast(float, P.Real)
    sum = cast(float, P.Real)
    vertical_position = cast(float, P.Real)


class PsPieSlice(P.PropSheet):
    angle_span = cast(float, P.Real)
    border_color = cast(str, P.Color)
    border_width = cast(int, P.Int)
    brush_filename = cast(str, P.String)
    color = cast(str, P.Color)
    explode_distance_factor = cast(float, P.Real)
    exploded = cast(bool, P.Bool)
    label = cast(str, P.String)
    label_arm_length_factor = cast(float, P.Real)
    label_color = cast(str, P.Color)
    label_font: P.Font
    label_position = cast(int, P.Enumeration)
    label_visible = cast(bool, P.Bool)
    percentage = cast(float, P.Real)
    start_angle = cast(float, P.Real)
    value = cast(float, P.Real)


class PsPolarChartView(PsChartView):
    pass


class PsScatterSeries(PsXYSeries):
    border_color = cast(str, P.Color)
    border_width = cast(float, P.Real)
    brush: P.Property
    brush_filename = cast(str, P.String)
    count = cast(int, P.Int)
    marker_shape = cast(int, P.Enumeration)
    marker_size = cast(float, P.Real)


class PsSplineSeries(PsXYSeries):
    cap_style: P.Property
    count = cast(int, P.Int)
    style: P.Property
    width = cast(float, P.Real)


class PsStackedBarSeries(PsAbstractBarSeries):
    pass


class PsValueAxis(PsAbstractAxis):
    label_format = cast(str, P.String)
    max = cast(float, P.Real)
    min = cast(float, P.Real)
    minor_tick_count = cast(int, P.Int)
    tick_anchor = cast(float, P.Real)
    tick_count = cast(int, P.Int)
    tick_interval = cast(float, P.Real)
    tick_type = cast(int, P.Enumeration)


class PsVBarModelMapper(P.PropSheet):
    first_bar_set_column = cast(int, P.Int)
    first_row = cast(int, P.Int)
    last_bar_set_column = cast(int, P.Int)
    model: P.Property
    row_count = cast(int, P.Int)
    series: P.Property


class PsVBoxPlotModelMapper(P.PropSheet):
    first_box_set_column = cast(int, P.Int)
    first_row = cast(int, P.Int)
    last_box_set_column = cast(int, P.Int)
    model: P.Property
    row_count = cast(int, P.Int)
    series: P.Property


class PsVCandlestickModelMapper(P.PropSheet):
    close_row = cast(int, P.Int)
    first_set_column = cast(int, P.Int)
    high_row = cast(int, P.Int)
    last_set_column = cast(int, P.Int)
    low_row = cast(int, P.Int)
    model: P.Property
    open_row = cast(int, P.Int)
    series: P.Property
    timestamp_row = cast(int, P.Int)


class PsVPieModelMapper(P.PropSheet):
    first_row = cast(int, P.Int)
    labels_column = cast(int, P.Int)
    model: P.Property
    row_count = cast(int, P.Int)
    series: P.Property
    values_column = cast(int, P.Int)


class PsVXYModelMapper(P.PropSheet):
    first_row = cast(int, P.Int)
    model: P.Property
    row_count = cast(int, P.Int)
    series: P.Property
    x_column = cast(int, P.Int)
    y_column = cast(int, P.Int)


class PsXYPoint(P.PropSheet):
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsActionGroup(PsQtObject):
    actions = cast(list, P.List)
    checked_action: P.Property
    enabled = cast(bool, P.Bool)
    exclusive = cast(bool, P.Bool)


class PsApplicationWindow(PsWindow):
    active_focus_control: P.Property
    background: P.Property
    content_data = cast(list, P.List)
    content_item: P.Property
    font: P.Font
    footer: P.Property
    header: P.Property
    locale: P.Property
    menu_bar: P.Property


class PsBusyIndicator(PsControl):
    running = cast(bool, P.Bool)


class PsButtonGroup(PsQtObject):
    buttons = cast(list, P.List)
    check_state = cast(int, P.Enumeration)
    checked_button: P.Property
    exclusive = cast(bool, P.Bool)


class PsCheckBox(PsAbstractButton):
    check_state = cast(int, P.Enumeration)
    next_check_state: P.Property
    tristate = cast(bool, P.Bool)


class PsCheckDelegate(PsItemDelegate):
    check_state = cast(int, P.Enumeration)
    next_check_state: P.Property
    tristate = cast(bool, P.Bool)


class PsComboBox(PsControl):
    acceptable_input = cast(bool, P.Bool)
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_text = cast(str, P.String)
    current_value = cast(str, P.String)
    delegate: P.Property
    display_text = cast(str, P.String)
    down = cast(bool, P.Bool)
    edit_text = cast(str, P.String)
    editable = cast(bool, P.Bool)
    flat = cast(bool, P.Bool)
    highlighted_index = cast(int, P.Int)
    implicit_content_width_policy = cast(int, P.Enumeration)
    implicit_indicator_height = cast(float, P.Real)
    implicit_indicator_width = cast(float, P.Real)
    indicator: P.Property
    input_method_composing = cast(bool, P.Bool)
    input_method_hints: P.Property
    model: P.Property
    popup: P.Property
    pressed = cast(bool, P.Bool)
    select_text_by_mouse = cast(bool, P.Bool)
    text_role = cast(str, P.String)
    validator: P.Property
    value_role = cast(str, P.String)


class PsDelayButton(PsAbstractButton):
    delay = cast(int, P.Int)
    progress = cast(float, P.Real)
    transition: P.Property


class PsDial(PsControl):
    angle = cast(float, P.Real)
    from_ = cast(float, P.Real)
    handle: P.Property
    input_mode = cast(int, P.Enumeration)
    live = cast(bool, P.Bool)
    position = cast(float, P.Real)
    pressed = cast(bool, P.Bool)
    snap_mode = cast(int, P.Enumeration)
    step_size = cast(float, P.Real)
    to = cast(float, P.Real)
    value = cast(float, P.Real)
    wrap = cast(bool, P.Bool)


class PsDialogButtonBox(PsContainer):
    alignment: P.Property
    button_layout = cast(int, P.Enumeration)
    delegate: P.Property
    position = cast(int, P.Enumeration)
    standard_buttons = cast(int, P.Enumeration)


class PsDrawer(PsPopup):
    drag_margin = cast(float, P.Real)
    edge = cast(int, P.Enumeration)
    interactive = cast(bool, P.Bool)
    position = cast(float, P.Real)


class PsGroupBox(PsFrame):
    implicit_label_height = cast(float, P.Real)
    implicit_label_width = cast(float, P.Real)
    label: P.Property
    title = cast(str, P.String)


class PsHorizontalHeaderView(PsTableView):
    model: P.Property
    sync_view: P.Property
    text_role: P.Property


class PsLabel(PsText):
    background: P.Property
    bottom_inset = cast(float, P.Real)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    right_inset = cast(float, P.Real)
    top_inset = cast(float, P.Real)


class PsMenu(P.PropSheet):
    cascade = cast(bool, P.Bool)
    content_data = cast(list, P.List)
    content_model: P.Property
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    delegate: P.Property
    focus = cast(bool, P.Bool)
    overlap = cast(float, P.Real)
    title = cast(str, P.String)
    active_focus = cast(bool, P.Bool)
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_margin = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    clip = cast(bool, P.Bool)
    close_policy = cast(int, P.Enumeration)
    content_children = cast(list, P.List)
    content_height = cast(float, P.Real)
    content_item: P.Property
    content_width = cast(float, P.Real)
    dim = cast(bool, P.Bool)
    enabled = cast(bool, P.Bool)
    enter: P.Property
    exit: P.Property
    font: P.Font
    height = cast(float, P.Real)
    horizontal_padding = cast(float, P.Real)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_margin = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    margins = cast(float, P.Real)
    mirrored = cast(bool, P.Bool)
    modal = cast(bool, P.Bool)
    opacity = cast(float, P.Real)
    opened = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    right_inset = cast(float, P.Real)
    right_margin = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    scale = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_margin = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    transform_origin = cast(int, P.Enumeration)
    vertical_padding = cast(float, P.Real)
    visible = cast(bool, P.Bool)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    object_name = cast(str, P.String)
    data = cast(list, P.List)
    icon: P.Icon
    items = cast(list, P.List)
    menu_bar: P.Property
    menu_item: P.Property
    minimum_width = cast(int, P.Int)
    parent_menu: P.Property
    system_tray_icon: P.Property
    type = cast(int, P.Enumeration)


class PsMenuBar(P.PropSheet):
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)
    delegate: P.Property
    menus = cast(list, P.List)
    content_children = cast(list, P.List)
    content_data = cast(list, P.List)
    content_model: P.Property
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_item: P.Property
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    content_item: P.Property
    focus_policy = cast(int, P.Enumeration)
    focus_reason = cast(int, P.Enumeration)
    font: P.Font
    horizontal_padding = cast(float, P.Real)
    hover_enabled = cast(bool, P.Bool)
    hovered = cast(bool, P.Bool)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    mirrored = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    right_inset = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    vertical_padding = cast(float, P.Real)
    visual_focus = cast(bool, P.Bool)
    wheel_enabled = cast(bool, P.Bool)
    active_focus = cast(bool, P.Bool)
    active_focus_on_tab = cast(bool, P.Bool)
    anchors: P.Anchors
    antialiasing = cast(bool, P.Bool)
    baseline_offset = cast(int, P.Int)
    children = cast(list, P.List)
    children_rect: P.ChildrenRect
    clip = cast(bool, P.Bool)
    containment_mask: P.Property
    data = cast(list, P.List)
    enabled = cast(bool, P.Bool)
    focus = cast(bool, P.Bool)
    height = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    opacity = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    resources = cast(list, P.List)
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transform = cast(list, P.List)
    transform_origin = cast(int, P.Enumeration)
    transitions = cast(list, P.List)
    visible = cast(bool, P.Bool)
    visible_children = cast(list, P.List)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    object_name = cast(str, P.String)
    window: P.Property


class PsMenuBarItem(PsAbstractButton):
    highlighted = cast(bool, P.Bool)
    menu: P.Property
    menu_bar: P.Property


class PsMenuItem(P.PropSheet):
    arrow: P.Property
    highlighted = cast(bool, P.Bool)
    menu: P.Property
    sub_menu: P.Property
    action: P.Property
    auto_exclusive = cast(bool, P.Bool)
    auto_repeat = cast(bool, P.Bool)
    auto_repeat_delay = cast(int, P.Int)
    auto_repeat_interval = cast(int, P.Int)
    checkable = cast(bool, P.Bool)
    checked = cast(bool, P.Bool)
    display = cast(int, P.Enumeration)
    down = cast(bool, P.Bool)
    icon: P.Icon
    implicit_indicator_height = cast(float, P.Real)
    implicit_indicator_width = cast(float, P.Real)
    indicator: P.Property
    press_x = cast(float, P.Real)
    press_y = cast(float, P.Real)
    pressed = cast(bool, P.Bool)
    text = cast(str, P.String)
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    content_item: P.Property
    focus_policy = cast(int, P.Enumeration)
    focus_reason = cast(int, P.Enumeration)
    font: P.Font
    horizontal_padding = cast(float, P.Real)
    hover_enabled = cast(bool, P.Bool)
    hovered = cast(bool, P.Bool)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    mirrored = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    right_inset = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    vertical_padding = cast(float, P.Real)
    visual_focus = cast(bool, P.Bool)
    wheel_enabled = cast(bool, P.Bool)
    active_focus = cast(bool, P.Bool)
    active_focus_on_tab = cast(bool, P.Bool)
    anchors: P.Anchors
    antialiasing = cast(bool, P.Bool)
    baseline_offset = cast(int, P.Int)
    children = cast(list, P.List)
    children_rect: P.ChildrenRect
    clip = cast(bool, P.Bool)
    containment_mask: P.Property
    data = cast(list, P.List)
    enabled = cast(bool, P.Bool)
    focus = cast(bool, P.Bool)
    height = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    opacity = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    resources = cast(list, P.List)
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transform = cast(list, P.List)
    transform_origin = cast(int, P.Enumeration)
    transitions = cast(list, P.List)
    visible = cast(bool, P.Bool)
    visible_children = cast(list, P.List)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    object_name = cast(str, P.String)
    group: P.Property
    role = cast(int, P.Enumeration)
    separator = cast(bool, P.Bool)
    shortcut: P.Property


class PsMenuSeparator(P.PropSheet):
    available_height = cast(float, P.Real)
    available_width = cast(float, P.Real)
    background: P.Property
    bottom_inset = cast(float, P.Real)
    bottom_padding = cast(float, P.Real)
    content_item: P.Property
    focus_policy = cast(int, P.Enumeration)
    focus_reason = cast(int, P.Enumeration)
    font: P.Font
    horizontal_padding = cast(float, P.Real)
    hover_enabled = cast(bool, P.Bool)
    hovered = cast(bool, P.Bool)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    implicit_content_height = cast(float, P.Real)
    implicit_content_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    locale: P.Property
    mirrored = cast(bool, P.Bool)
    padding = cast(float, P.Real)
    right_inset = cast(float, P.Real)
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_inset = cast(float, P.Real)
    top_padding = cast(float, P.Real)
    vertical_padding = cast(float, P.Real)
    visual_focus = cast(bool, P.Bool)
    wheel_enabled = cast(bool, P.Bool)
    active_focus = cast(bool, P.Bool)
    active_focus_on_tab = cast(bool, P.Bool)
    anchors: P.Anchors
    antialiasing = cast(bool, P.Bool)
    baseline_offset = cast(int, P.Int)
    children = cast(list, P.List)
    children_rect: P.ChildrenRect
    clip = cast(bool, P.Bool)
    containment_mask: P.Property
    data = cast(list, P.List)
    enabled = cast(bool, P.Bool)
    focus = cast(bool, P.Bool)
    height = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    opacity = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    resources = cast(list, P.List)
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transform = cast(list, P.List)
    transform_origin = cast(int, P.Enumeration)
    transitions = cast(list, P.List)
    visible = cast(bool, P.Bool)
    visible_children = cast(list, P.List)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    object_name = cast(str, P.String)
    arrow: P.Property
    highlighted = cast(bool, P.Bool)
    menu: P.Property
    sub_menu: P.Property
    action: P.Property
    auto_exclusive = cast(bool, P.Bool)
    auto_repeat = cast(bool, P.Bool)
    auto_repeat_delay = cast(int, P.Int)
    auto_repeat_interval = cast(int, P.Int)
    checkable = cast(bool, P.Bool)
    checked = cast(bool, P.Bool)
    display = cast(int, P.Enumeration)
    down = cast(bool, P.Bool)
    icon: P.Icon
    implicit_indicator_height = cast(float, P.Real)
    implicit_indicator_width = cast(float, P.Real)
    indicator: P.Property
    press_x = cast(float, P.Real)
    press_y = cast(float, P.Real)
    pressed = cast(bool, P.Bool)
    text = cast(str, P.String)
    group: P.Property
    role = cast(int, P.Enumeration)
    separator = cast(bool, P.Bool)
    shortcut: P.Property


class PsOverlay(PsItem):
    pass


class PsPage(PsPane):
    footer: P.Property
    header: P.Property
    implicit_footer_height = cast(float, P.Real)
    implicit_footer_width = cast(float, P.Real)
    implicit_header_height = cast(float, P.Real)
    implicit_header_width = cast(float, P.Real)
    title = cast(str, P.String)


class PsPageIndicator(PsControl):
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    delegate: P.Property
    interactive = cast(bool, P.Bool)


class PsProgressBar(PsControl):
    from_ = cast(float, P.Real)
    indeterminate = cast(bool, P.Bool)
    position = cast(float, P.Real)
    to = cast(float, P.Real)
    value = cast(float, P.Real)
    visual_position = cast(float, P.Real)


class PsRadioButton(PsAbstractButton):
    pass


class PsRadioDelegate(PsItemDelegate):
    pass


class PsRangeSlider(PsControl):
    first: P.First
    from_ = cast(float, P.Real)
    horizontal = cast(bool, P.Bool)
    live = cast(bool, P.Bool)
    orientation = cast(int, P.Enumeration)
    second: P.Second
    snap_mode = cast(int, P.Enumeration)
    step_size = cast(float, P.Real)
    to = cast(float, P.Real)
    touch_drag_threshold: P.Property
    vertical = cast(bool, P.Bool)


class PsRoundButton(PsButton):
    radius = cast(float, P.Real)


class PsScrollBar(PsControl):
    active = cast(bool, P.Bool)
    horizontal = cast(bool, P.Bool)
    interactive = cast(bool, P.Bool)
    minimum_size = cast(float, P.Real)
    orientation = cast(int, P.Enumeration)
    policy = cast(int, P.Enumeration)
    position = cast(float, P.Real)
    pressed = cast(bool, P.Bool)
    size = cast(float, P.Real)
    snap_mode = cast(int, P.Enumeration)
    step_size = cast(float, P.Real)
    vertical = cast(bool, P.Bool)
    visual_position = cast(float, P.Real)
    visual_size = cast(float, P.Real)


class PsScrollIndicator(PsControl):
    active = cast(bool, P.Bool)
    horizontal = cast(bool, P.Bool)
    minimum_size = cast(float, P.Real)
    orientation = cast(int, P.Enumeration)
    position = cast(float, P.Real)
    size = cast(float, P.Real)
    vertical = cast(bool, P.Bool)
    visual_position = cast(float, P.Real)
    visual_size = cast(float, P.Real)


class PsScrollView(PsPane):
    content_children = cast(list, P.List)
    content_data = cast(list, P.List)


class PsSlider(PsControl):
    from_ = cast(float, P.Real)
    handle: P.Property
    horizontal = cast(bool, P.Bool)
    implicit_handle_height = cast(float, P.Real)
    implicit_handle_width = cast(float, P.Real)
    live = cast(bool, P.Bool)
    orientation = cast(int, P.Enumeration)
    position = cast(float, P.Real)
    pressed = cast(bool, P.Bool)
    snap_mode = cast(int, P.Enumeration)
    step_size = cast(float, P.Real)
    to = cast(float, P.Real)
    touch_drag_threshold: P.Property
    value = cast(float, P.Real)
    vertical = cast(bool, P.Bool)
    visual_position = cast(float, P.Real)


class PsSpinBox(PsControl):
    display_text = cast(str, P.String)
    down: P.Down
    editable = cast(bool, P.Bool)
    from_ = cast(int, P.Int)
    input_method_composing = cast(bool, P.Bool)
    input_method_hints: P.Property
    step_size = cast(int, P.Int)
    text_from_value: P.Property
    to = cast(int, P.Int)
    up: P.Up
    validator: P.Property
    value = cast(int, P.Int)
    value_from_text: P.Property
    wrap = cast(bool, P.Bool)


class PsSplitHandle(PsQtObject):
    pass


class PsSplitView(PsContainer):
    handle: P.Property
    orientation = cast(int, P.Enumeration)
    resizing = cast(bool, P.Bool)


class PsStackView(PsControl):
    busy = cast(bool, P.Bool)
    current_item: P.Property
    depth = cast(int, P.Int)
    empty = cast(bool, P.Bool)
    initial_item: P.Var
    pop_enter: P.Property
    pop_exit: P.Property
    push_enter: P.Property
    push_exit: P.Property
    replace_enter: P.Property
    replace_exit: P.Property


class PsSwipeDelegate(PsItemDelegate):
    swipe: P.Swipe


class PsSwipeView(PsContainer):
    horizontal = cast(bool, P.Bool)
    interactive = cast(bool, P.Bool)
    orientation = cast(int, P.Enumeration)
    vertical = cast(bool, P.Bool)


class PsSwitch(PsAbstractButton):
    position = cast(float, P.Real)
    visual_position = cast(float, P.Real)


class PsSwitchDelegate(PsItemDelegate):
    position = cast(float, P.Real)
    visual_position = cast(float, P.Real)


class PsTabBar(PsContainer):
    content_height = cast(float, P.Real)
    content_width = cast(float, P.Real)
    position = cast(int, P.Enumeration)


class PsTabButton(PsAbstractButton):
    pass


class PsTextArea(PsTextEdit):
    background: P.Property
    bottom_inset = cast(float, P.Real)
    focus_reason = cast(int, P.Enumeration)
    hover_enabled = cast(bool, P.Bool)
    hovered = cast(bool, P.Bool)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    placeholder_text = cast(str, P.String)
    placeholder_text_color = cast(str, P.Color)
    right_inset = cast(float, P.Real)
    top_inset = cast(float, P.Real)


class PsTextField(PsTextInput):
    background: P.Property
    bottom_inset = cast(float, P.Real)
    focus_reason = cast(int, P.Enumeration)
    hover_enabled = cast(bool, P.Bool)
    hovered = cast(bool, P.Bool)
    implicit_background_height = cast(float, P.Real)
    implicit_background_width = cast(float, P.Real)
    left_inset = cast(float, P.Real)
    placeholder_text = cast(str, P.String)
    placeholder_text_color = cast(str, P.Color)
    right_inset = cast(float, P.Real)
    top_inset = cast(float, P.Real)


class PsToolBar(PsPane):
    position = cast(int, P.Enumeration)


class PsToolButton(PsButton):
    pass


class PsToolSeparator(PsControl):
    horizontal = cast(bool, P.Bool)
    orientation = cast(int, P.Enumeration)
    vertical = cast(bool, P.Bool)


class PsToolTip(PsPopup):
    delay = cast(int, P.Int)
    text = cast(str, P.String)
    timeout = cast(int, P.Int)


class PsTumbler(PsControl):
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_item: P.Property
    delegate: P.Property
    model: P.Property
    moving = cast(bool, P.Bool)
    visible_item_count = cast(int, P.Int)
    wrap = cast(bool, P.Bool)


class PsVerticalHeaderView(PsTableView):
    model: P.Property
    sync_view: P.Property
    text_role: P.Property


class PsAccessible(P.PropSheet):
    check_state_mixed = cast(bool, P.Bool)
    checkable = cast(bool, P.Bool)
    checked = cast(bool, P.Bool)
    default_button = cast(bool, P.Bool)
    description = cast(str, P.String)
    editable = cast(bool, P.Bool)
    focusable = cast(bool, P.Bool)
    focused = cast(bool, P.Bool)
    ignored = cast(bool, P.Bool)
    multi_line = cast(bool, P.Bool)
    name_ = cast(str, P.String)
    password_edit = cast(bool, P.Bool)
    pressed = cast(bool, P.Bool)
    read_only = cast(bool, P.Bool)
    role = cast(int, P.Enumeration)
    search_edit = cast(bool, P.Bool)
    selectable = cast(bool, P.Bool)
    selectable_text = cast(bool, P.Bool)
    selected = cast(bool, P.Bool)


class PsAnchorAnimation(PsAnimation):
    duration = cast(int, P.Int)
    easing: P.Easing
    targets = cast(list, P.List)


class PsAnchorChanges(P.PropSheet):
    anchors: P.Anchors
    target: P.Property


class PsAnimatedImage(PsImage):
    current_frame = cast(int, P.Int)
    frame_count = cast(int, P.Int)
    paused = cast(bool, P.Bool)
    playing = cast(bool, P.Bool)
    source = cast(str, P.Url)
    speed = cast(float, P.Real)


class PsAnimatedSprite(PsItem):
    current_frame = cast(int, P.Int)
    finish_behavior = cast(int, P.Enumeration)
    frame_count = cast(int, P.Int)
    frame_duration = cast(int, P.Int)
    frame_height = cast(int, P.Int)
    frame_rate: P.Property
    frame_sync = cast(bool, P.Bool)
    frame_width = cast(int, P.Int)
    frame_x = cast(int, P.Int)
    frame_y = cast(int, P.Int)
    interpolate = cast(bool, P.Bool)
    loops = cast(int, P.Int)
    paused = cast(bool, P.Bool)
    reverse = cast(bool, P.Bool)
    running = cast(bool, P.Bool)
    source = cast(str, P.Url)


class PsBehavior(P.PropSheet):
    animation: P.Property
    enabled = cast(bool, P.Bool)
    target_property: P.Property
    target_value: P.Property


class PsBorderImage(PsItem):
    asynchronous = cast(bool, P.Bool)
    border: P.Border
    cache = cast(bool, P.Bool)
    current_frame = cast(int, P.Int)
    frame_count = cast(int, P.Int)
    horizontal_tile_mode = cast(int, P.Enumeration)
    mirror = cast(bool, P.Bool)
    progress = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    source = cast(str, P.Url)
    source_size: P.Property
    status = cast(int, P.Enumeration)
    vertical_tile_mode = cast(int, P.Enumeration)


class PsBorderImageMesh(P.PropSheet):
    border: P.Border
    horizontal_tile_mode = cast(int, P.Enumeration)
    size: P.Size
    vertical_tile_mode = cast(int, P.Enumeration)


class PsCanvasGradient(P.PropSheet):
    pass


class PsCanvasImageData(P.PropSheet):
    data: P.Property
    height = cast(int, P.Int)
    width = cast(int, P.Int)


class PsCanvasPixelArray(P.PropSheet):
    length = cast(int, P.Int)


class PsColorAnimation(PsPropertyAnimation):
    from_ = cast(str, P.Color)
    to = cast(str, P.Color)


class PsColorGroup(PsQtObject):
    alternate_base = cast(str, P.Color)
    base = cast(str, P.Color)
    bright_text = cast(str, P.Color)
    button = cast(str, P.Color)
    button_text = cast(str, P.Color)
    dark = cast(str, P.Color)
    highlight = cast(str, P.Color)
    highlighted_text = cast(str, P.Color)
    light = cast(str, P.Color)
    link = cast(str, P.Color)
    link_visited = cast(str, P.Color)
    mid = cast(str, P.Color)
    midlight = cast(str, P.Color)
    shadow = cast(str, P.Color)
    text = cast(str, P.Color)
    tool_tip_base = cast(str, P.Color)
    tool_tip_text = cast(str, P.Color)
    window = cast(str, P.Color)
    window_text = cast(str, P.Color)


class PsColumn(PsItem):
    add: P.Property
    bottom_padding = cast(float, P.Real)
    left_padding = cast(float, P.Real)
    move: P.Property
    padding = cast(float, P.Real)
    populate: P.Property
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_padding = cast(float, P.Real)


class PsContext2D(P.PropSheet):
    canvas: P.Property
    fill_rule = cast(int, P.Enumeration)
    fill_style: P.Property
    font = cast(str, P.String)
    global_alpha = cast(float, P.Real)
    global_composite_operation = cast(str, P.String)
    line_cap = cast(str, P.String)
    line_dash_offset = cast(float, P.Real)
    line_join = cast(str, P.String)
    line_width = cast(float, P.Real)
    miter_limit = cast(float, P.Real)
    shadow_blur = cast(float, P.Real)
    shadow_color = cast(str, P.String)
    shadow_offset_x: P.Property
    shadow_offset_y: P.Property
    stroke_style: P.Property
    text_align = cast(str, P.String)
    text_baseline = cast(str, P.String)


class PsDoubleValidator(P.PropSheet):
    bottom = cast(float, P.Real)
    decimals = cast(int, P.Int)
    locale = cast(str, P.String)
    notation = cast(int, P.Enumeration)
    top = cast(float, P.Real)


class PsDrag(P.PropSheet):
    pass


class PsDragEvent(P.PropSheet):
    accepted = cast(bool, P.Bool)
    action = cast(int, P.Enumeration)
    color_data = cast(str, P.Color)
    formats: P.Property
    has_color = cast(bool, P.Bool)
    has_html = cast(bool, P.Bool)
    has_text = cast(bool, P.Bool)
    has_urls = cast(bool, P.Bool)
    html = cast(str, P.String)
    keys: P.Property
    proposed_action: P.Property
    supported_actions: P.Property
    text = cast(str, P.String)
    urls: P.Property
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsDragHandler(PsMultiPointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    parent: P.Property
    target: P.Property
    translation: P.Property
    x_axis: P.XAxis
    y_axis: P.YAxis


class PsDropArea(PsItem):
    contains_drag = cast(bool, P.Bool)
    drag: P.Drag
    keys: P.Property


class PsEnterKey(P.PropSheet):
    action_id = cast(int, P.Int)
    active = cast(bool, P.Bool)
    alternative_keys: P.Var
    display_text = cast(str, P.String)
    effective_alternative_keys: P.Var
    effective_alternative_keys_highlight_index = cast(int, P.Int)
    function_key = cast(bool, P.Bool)
    highlighted = cast(bool, P.Bool)
    key = cast(int, P.Int)
    key_panel_delegate: P.Property
    key_type = cast(int, P.Int)
    no_key_event = cast(bool, P.Bool)
    no_modifier = cast(bool, P.Bool)
    pressed = cast(bool, P.Bool)
    repeat = cast(bool, P.Bool)
    show_preview = cast(bool, P.Bool)
    small_text = cast(str, P.String)
    small_text_visible = cast(bool, P.Bool)
    sound_effect = cast(str, P.Url)
    text = cast(str, P.String)
    uppercased = cast(bool, P.Bool)
    weight = cast(float, P.Real)
    active_focus = cast(bool, P.Bool)
    active_focus_on_tab = cast(bool, P.Bool)
    anchors: P.Anchors
    antialiasing = cast(bool, P.Bool)
    baseline_offset = cast(int, P.Int)
    children = cast(list, P.List)
    children_rect: P.ChildrenRect
    clip = cast(bool, P.Bool)
    containment_mask: P.Property
    data = cast(list, P.List)
    enabled = cast(bool, P.Bool)
    focus = cast(bool, P.Bool)
    height = cast(float, P.Real)
    implicit_height = cast(float, P.Real)
    implicit_width = cast(float, P.Real)
    opacity = cast(float, P.Real)
    palette: P.Property
    parent: P.Property
    resources = cast(list, P.List)
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    smooth = cast(bool, P.Bool)
    state = cast(str, P.String)
    states = cast(list, P.List)
    transform = cast(list, P.List)
    transform_origin = cast(int, P.Enumeration)
    transitions = cast(list, P.List)
    visible = cast(bool, P.Bool)
    visible_children = cast(list, P.List)
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)
    z = cast(float, P.Real)
    object_name = cast(str, P.String)


class PsFlipable(PsItem):
    back: P.Property
    front: P.Property
    side = cast(int, P.Enumeration)


class PsFlow(PsItem):
    add: P.Property
    bottom_padding = cast(float, P.Real)
    effective_layout_direction = cast(int, P.Enumeration)
    flow = cast(int, P.Enumeration)
    layout_direction = cast(int, P.Enumeration)
    left_padding = cast(float, P.Real)
    move: P.Property
    padding = cast(float, P.Real)
    populate: P.Property
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_padding = cast(float, P.Real)


class PsFocusScope(PsItem):
    pass


class PsFontLoader(P.PropSheet):
    font: P.Font
    name_ = cast(str, P.String)
    source = cast(str, P.Url)
    status = cast(int, P.Enumeration)


class PsFontMetrics(P.PropSheet):
    ascent = cast(float, P.Real)
    average_character_width = cast(float, P.Real)
    descent = cast(float, P.Real)
    font: P.Font
    height = cast(float, P.Real)
    leading = cast(float, P.Real)
    line_spacing = cast(float, P.Real)
    line_width = cast(float, P.Real)
    maximum_character_width = cast(float, P.Real)
    minimum_left_bearing = cast(float, P.Real)
    minimum_right_bearing = cast(float, P.Real)
    overline_position = cast(float, P.Real)
    strike_out_position = cast(float, P.Real)
    underline_position = cast(float, P.Real)
    x_height = cast(float, P.Real)


class PsGestureEvent(P.PropSheet):
    drag_threshold = cast(float, P.Real)
    touch_points = cast(list, P.List)


class PsGradientStop(P.PropSheet):
    color = cast(str, P.Color)
    position = cast(float, P.Real)


class PsGraphicsInfo(P.PropSheet):
    api = cast(int, P.Enumeration)
    major_version = cast(int, P.Int)
    minor_version = cast(int, P.Int)
    profile = cast(int, P.Enumeration)
    renderable_type = cast(int, P.Enumeration)
    shader_compilation_type = cast(int, P.Enumeration)
    shader_source_type = cast(int, P.Enumeration)
    shader_type = cast(int, P.Enumeration)


class PsGrid(PsItem):
    add: P.Property
    bottom_padding = cast(float, P.Real)
    column_spacing: P.Property
    columns = cast(int, P.Int)
    effective_horizontal_item_alignment = cast(int, P.Enumeration)
    effective_layout_direction = cast(int, P.Enumeration)
    flow = cast(int, P.Enumeration)
    horizontal_item_alignment = cast(int, P.Enumeration)
    layout_direction = cast(int, P.Enumeration)
    left_padding = cast(float, P.Real)
    move: P.Property
    padding = cast(float, P.Real)
    populate: P.Property
    right_padding = cast(float, P.Real)
    row_spacing: P.Property
    rows = cast(int, P.Int)
    spacing: P.Property
    top_padding = cast(float, P.Real)
    vertical_item_alignment = cast(int, P.Enumeration)


class PsGridMesh(P.PropSheet):
    resolution: P.Size


class PsGridView(PsFlickable):
    add: P.Property
    add_displaced: P.Property
    cache_buffer = cast(int, P.Int)
    cell_height = cast(float, P.Real)
    cell_width = cast(float, P.Real)
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_item: P.Property
    delegate: P.Property
    displaced: P.Property
    display_margin_beginning = cast(int, P.Int)
    display_margin_end = cast(int, P.Int)
    effective_layout_direction = cast(int, P.Enumeration)
    flow = cast(int, P.Enumeration)
    footer: P.Property
    footer_item: P.Property
    header: P.Property
    header_item: P.Property
    highlight: P.Property
    highlight_follows_current_item = cast(bool, P.Bool)
    highlight_item: P.Property
    highlight_move_duration = cast(int, P.Int)
    highlight_range_mode = cast(int, P.Enumeration)
    key_navigation_enabled = cast(bool, P.Bool)
    key_navigation_wraps = cast(bool, P.Bool)
    layout_direction = cast(int, P.Enumeration)
    model: P.Property
    move: P.Property
    move_displaced: P.Property
    populate: P.Property
    preferred_highlight_begin = cast(float, P.Real)
    preferred_highlight_end = cast(float, P.Real)
    remove: P.Property
    remove_displaced: P.Property
    snap_mode = cast(int, P.Enumeration)
    vertical_layout_direction = cast(int, P.Enumeration)


class PsHandlerPoint(P.PropSheet):
    ellipse_diameters: P.Size
    id = cast(int, P.Int)
    modifiers = cast(int, P.Enumeration)
    position: P.Property
    press_position: P.Property
    pressed_buttons = cast(int, P.Enumeration)
    pressure: P.Property
    rotation: P.Property
    scene_grab_position: P.Property
    scene_position: P.Property
    scene_press_position: P.Property
    unique_id: P.Property
    velocity: P.Property


class PsHoverHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    hovered = cast(bool, P.Bool)
    margin = cast(float, P.Real)
    parent: P.Property
    point: P.Property
    target: P.Property


class PsIntValidator(P.PropSheet):
    bottom = cast(int, P.Int)
    locale = cast(str, P.String)
    top = cast(int, P.Int)


class PsItemGrabResult(PsQtObject):
    image: P.Property
    url = cast(str, P.Url)


class PsKeyNavigation(P.PropSheet):
    pass


class PsKeys(P.PropSheet):
    enabled = cast(bool, P.Bool)
    forward_to = cast(list, P.List)
    priority = cast(int, P.Enumeration)


class PsLayoutMirroring(P.PropSheet):
    children_inherit = cast(bool, P.Bool)
    enabled = cast(bool, P.Bool)


class PsListView(PsFlickable):
    add: P.Property
    add_displaced: P.Property
    cache_buffer = cast(int, P.Int)
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_item: P.Property
    current_section = cast(str, P.String)
    delegate: P.Property
    displaced: P.Property
    display_margin_beginning = cast(int, P.Int)
    display_margin_end = cast(int, P.Int)
    effective_layout_direction = cast(int, P.Enumeration)
    footer: P.Property
    footer_item: P.Property
    footer_positioning = cast(int, P.Enumeration)
    header: P.Property
    header_item: P.Property
    header_positioning = cast(int, P.Enumeration)
    highlight: P.Property
    highlight_follows_current_item = cast(bool, P.Bool)
    highlight_item: P.Property
    highlight_move_duration = cast(int, P.Int)
    highlight_move_velocity = cast(float, P.Real)
    highlight_range_mode = cast(int, P.Enumeration)
    highlight_resize_duration = cast(int, P.Int)
    highlight_resize_velocity = cast(float, P.Real)
    key_navigation_enabled = cast(bool, P.Bool)
    key_navigation_wraps = cast(bool, P.Bool)
    layout_direction = cast(int, P.Enumeration)
    model: P.Property
    move: P.Property
    move_displaced: P.Property
    orientation = cast(int, P.Enumeration)
    populate: P.Property
    preferred_highlight_begin = cast(float, P.Real)
    preferred_highlight_end = cast(float, P.Real)
    remove: P.Property
    remove_displaced: P.Property
    reuse_items = cast(bool, P.Bool)
    section: P.Section
    snap_mode = cast(int, P.Enumeration)
    spacing = cast(float, P.Real)
    vertical_layout_direction = cast(int, P.Enumeration)


class PsMatrix4x4(P.PropSheet):
    matrix: P.Property


class PsMouseArea(PsItem):
    accepted_buttons: P.Property
    contains_mouse = cast(bool, P.Bool)
    contains_press = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag: P.Drag
    enabled = cast(bool, P.Bool)
    hover_enabled = cast(bool, P.Bool)
    mouse_x = cast(float, P.Real)
    mouse_y = cast(float, P.Real)
    press_and_hold_interval = cast(int, P.Int)
    pressed = cast(bool, P.Bool)
    pressed_buttons: P.Property
    prevent_stealing = cast(bool, P.Bool)
    propagate_composed_events = cast(bool, P.Bool)
    scroll_gesture_enabled = cast(bool, P.Bool)


class PsOpacityAnimator(PsAnimator):
    pass


class PsPalette(P.PropSheet):
    active: P.Property
    disabled: P.Property
    inactive: P.Property


class PsParallelAnimation(PsAnimation):
    pass


class PsParentAnimation(PsAnimation):
    new_parent: P.Property
    target: P.Property
    via: P.Property


class PsParentChange(P.PropSheet):
    height = cast(float, P.Real)
    parent: P.Property
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    target: P.Property
    width = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathAngleArc(P.PropSheet):
    center_x = cast(float, P.Real)
    center_y = cast(float, P.Real)
    move_to_start = cast(bool, P.Bool)
    radius_x = cast(float, P.Real)
    radius_y = cast(float, P.Real)
    start_angle = cast(float, P.Real)
    sweep_angle = cast(float, P.Real)


class PsPathAnimation(PsAnimation):
    anchor_point: P.Point
    duration = cast(int, P.Int)
    easing: P.Easing
    end_rotation = cast(float, P.Real)
    orientation = cast(int, P.Enumeration)
    orientation_entry_duration = cast(float, P.Real)
    orientation_exit_duration = cast(float, P.Real)
    path: P.Property
    target: P.Property


class PsPathArc(P.PropSheet):
    direction = cast(int, P.Enumeration)
    radius_x = cast(float, P.Real)
    radius_y = cast(float, P.Real)
    relative_x = cast(float, P.Real)
    relative_y = cast(float, P.Real)
    use_large_arc = cast(bool, P.Bool)
    x = cast(float, P.Real)
    x_axis_rotation = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathAttribute(P.PropSheet):
    name_ = cast(str, P.String)
    value = cast(float, P.Real)


class PsPathCubic(P.PropSheet):
    control1x = cast(float, P.Real)
    control1y = cast(float, P.Real)
    control2x = cast(float, P.Real)
    control2y = cast(float, P.Real)
    relative_control1x = cast(float, P.Real)
    relative_control1y = cast(float, P.Real)
    relative_control2x = cast(float, P.Real)
    relative_control2y = cast(float, P.Real)
    relative_x = cast(float, P.Real)
    relative_y = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathCurve(P.PropSheet):
    relative_x = cast(float, P.Real)
    relative_y = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathElement(P.PropSheet):
    pass


class PsPathInterpolator(P.PropSheet):
    angle = cast(float, P.Real)
    path: P.Property
    progress = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathLine(P.PropSheet):
    relative_x = cast(float, P.Real)
    relative_y = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathMove(P.PropSheet):
    relative_x = cast(float, P.Real)
    relative_y = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathMultiline(P.PropSheet):
    paths = cast(list, P.List)
    start: P.Point


class PsPathPercent(P.PropSheet):
    value = cast(float, P.Real)


class PsPathPolyline(P.PropSheet):
    path = cast(list, P.List)
    start: P.Point


class PsPathQuad(P.PropSheet):
    control_x = cast(float, P.Real)
    control_y = cast(float, P.Real)
    relative_control_x = cast(float, P.Real)
    relative_control_y = cast(float, P.Real)
    relative_x = cast(float, P.Real)
    relative_y = cast(float, P.Real)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathSvg(P.PropSheet):
    path = cast(str, P.String)


class PsPathText(P.PropSheet):
    text = cast(str, P.String)
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsPathView(PsItem):
    cache_item_count = cast(int, P.Int)
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)
    current_item: P.Property
    delegate: P.Property
    drag_margin = cast(float, P.Real)
    dragging = cast(bool, P.Bool)
    flick_deceleration = cast(float, P.Real)
    flicking = cast(bool, P.Bool)
    highlight: P.Property
    highlight_item: P.Property
    highlight_move_duration = cast(int, P.Int)
    highlight_range_mode = cast(int, P.Enumeration)
    interactive = cast(bool, P.Bool)
    maximum_flick_velocity = cast(float, P.Real)
    model: P.Property
    movement_direction = cast(int, P.Enumeration)
    moving = cast(bool, P.Bool)
    offset = cast(float, P.Real)
    path: P.Property
    path_item_count = cast(int, P.Int)
    preferred_highlight_begin = cast(float, P.Real)
    preferred_highlight_end = cast(float, P.Real)
    snap_mode = cast(int, P.Enumeration)


class PsPauseAnimation(PsAnimation):
    duration = cast(int, P.Int)


class PsPinchArea(PsItem):
    enabled = cast(bool, P.Bool)
    pinch: P.Pinch


class PsPinchEvent(P.PropSheet):
    accepted = cast(bool, P.Bool)
    angle = cast(float, P.Real)
    center: P.Property
    point1: P.Property
    point2: P.Property
    point_count = cast(int, P.Int)
    previous_angle = cast(float, P.Real)
    previous_center: P.Property
    previous_scale = cast(float, P.Real)
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    start_center: P.Property
    start_point1: P.Property
    start_point2: P.Property


class PsPinchHandler(PsMultiPointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    active_scale = cast(float, P.Real)
    centroid: P.Property
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    maximum_rotation = cast(float, P.Real)
    maximum_scale = cast(float, P.Real)
    minimum_rotation = cast(float, P.Real)
    minimum_scale = cast(float, P.Real)
    parent: P.Property
    rotation = cast(float, P.Real)
    scale = cast(float, P.Real)
    target: P.Property
    translation: P.Property
    x_axis: P.XAxis
    y_axis: P.YAxis


class PsPointHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    margin = cast(float, P.Real)
    parent: P.Property
    point: P.Property
    target: P.Property


class PsPositioner(P.PropSheet):
    pass


class PsPropertyAction(PsAnimation):
    exclude = cast(list, P.List)
    properties_ = cast(str, P.String)
    property = cast(str, P.String)
    target: P.Property
    targets = cast(list, P.List)
    value: P.Property


class PsPropertyChanges(P.PropSheet):
    explicit = cast(bool, P.Bool)
    restore_entry_values = cast(bool, P.Bool)
    target: P.Property


class PsRegularExpressionValidator(P.PropSheet):
    regular_expression: P.Property


class PsRepeater(PsItem):
    count = cast(int, P.Int)
    delegate: P.Property
    model: P.Property


class PsRotation(P.PropSheet):
    angle = cast(float, P.Real)
    axis: P.Axis
    origin: P.Origin


class PsRotationAnimation(PsPropertyAnimation):
    direction = cast(int, P.Enumeration)
    from_ = cast(float, P.Real)
    to = cast(float, P.Real)


class PsRotationAnimator(PsAnimator):
    direction = cast(int, P.Enumeration)


class PsRow(PsItem):
    add: P.Property
    bottom_padding = cast(float, P.Real)
    effective_layout_direction = cast(int, P.Enumeration)
    layout_direction = cast(int, P.Enumeration)
    left_padding = cast(float, P.Real)
    move: P.Property
    padding = cast(float, P.Real)
    populate: P.Property
    right_padding = cast(float, P.Real)
    spacing = cast(float, P.Real)
    top_padding = cast(float, P.Real)


class PsScale(P.PropSheet):
    origin: P.Origin
    x_scale = cast(float, P.Real)
    y_scale = cast(float, P.Real)


class PsScaleAnimator(PsAnimator):
    pass


class PsScriptAction(PsAnimation):
    script: P.Property
    script_name = cast(str, P.String)


class PsSequentialAnimation(PsAnimation):
    pass


class PsShaderEffect(PsItem):
    blending = cast(bool, P.Bool)
    cull_mode = cast(int, P.Enumeration)
    fragment_shader = cast(str, P.Url)
    log = cast(str, P.String)
    mesh: P.Property
    status = cast(int, P.Enumeration)
    supports_atlas_textures = cast(bool, P.Bool)
    vertex_shader = cast(str, P.Url)


class PsShaderEffectSource(PsItem):
    format = cast(int, P.Enumeration)
    hide_source = cast(bool, P.Bool)
    live = cast(bool, P.Bool)
    mipmap = cast(bool, P.Bool)
    recursive = cast(bool, P.Bool)
    samples = cast(int, P.Int)
    source_item: P.Property
    source_rect: P.Rect
    texture_mirroring = cast(int, P.Enumeration)
    texture_size: P.Size
    wrap_mode = cast(int, P.Enumeration)


class PsShortcut(P.PropSheet):
    auto_repeat = cast(bool, P.Bool)
    context = cast(int, P.Enumeration)
    enabled = cast(bool, P.Bool)
    native_text = cast(str, P.String)
    portable_text = cast(str, P.String)
    sequence: P.Property
    sequences = cast(list, P.List)


class PsSmoothedAnimation(PsNumberAnimation):
    duration = cast(int, P.Int)
    maximum_easing_time = cast(int, P.Int)
    reversing_mode = cast(int, P.Enumeration)
    velocity = cast(float, P.Real)


class PsSpringAnimation(PsNumberAnimation):
    damping = cast(float, P.Real)
    epsilon = cast(float, P.Real)
    mass = cast(float, P.Real)
    modulus = cast(float, P.Real)
    spring = cast(float, P.Real)
    velocity = cast(float, P.Real)


class PsSprite(P.PropSheet):
    duration = cast(int, P.Int)
    duration_variation = cast(int, P.Int)
    frame_count = cast(int, P.Int)
    frame_duration = cast(int, P.Int)
    frame_duration_variation = cast(int, P.Int)
    frame_height = cast(int, P.Int)
    frame_rate: P.Property
    frame_rate_variation: P.Property
    frame_sync = cast(bool, P.Bool)
    frame_width = cast(int, P.Int)
    frame_x = cast(int, P.Int)
    frame_y = cast(int, P.Int)
    name_ = cast(str, P.String)
    random_start = cast(bool, P.Bool)
    reverse = cast(bool, P.Bool)
    source = cast(str, P.Url)
    to: P.Property


class PsSpriteSequence(PsItem):
    current_sprite = cast(str, P.String)
    goal_sprite = cast(str, P.String)
    interpolate = cast(bool, P.Bool)
    running = cast(bool, P.Bool)
    sprites = cast(list, P.List)


class PsState(P.PropSheet):
    changes = cast(list, P.List)
    extend = cast(str, P.String)
    name_ = cast(str, P.String)
    when = cast(bool, P.Bool)


class PsStateChangeScript(P.PropSheet):
    name_ = cast(str, P.String)
    script: P.Property


class PsStateGroup(P.PropSheet):
    state = cast(str, P.String)
    states = cast(list, P.List)
    transitions = cast(list, P.List)


class PsSystemPalette(P.PropSheet):
    alternate_base = cast(str, P.Color)
    base = cast(str, P.Color)
    button = cast(str, P.Color)
    button_text = cast(str, P.Color)
    color_group = cast(int, P.Enumeration)
    dark = cast(str, P.Color)
    highlight = cast(str, P.Color)
    highlighted_text = cast(str, P.Color)
    light = cast(str, P.Color)
    mid = cast(str, P.Color)
    midlight = cast(str, P.Color)
    shadow = cast(str, P.Color)
    text = cast(str, P.Color)
    window = cast(str, P.Color)
    window_text = cast(str, P.Color)


class PsTapHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    gesture_policy = cast(int, P.Enumeration)
    grab_permissions: P.Property
    long_press_threshold = cast(float, P.Real)
    margin = cast(float, P.Real)
    parent: P.Property
    point: P.Property
    pressed = cast(bool, P.Bool)
    tap_count = cast(int, P.Int)
    target: P.Property
    time_held = cast(float, P.Real)


class PsTextMetrics(P.PropSheet):
    advance_width = cast(float, P.Real)
    bounding_rect: P.Rect
    elide = cast(int, P.Enumeration)
    elide_width = cast(float, P.Real)
    elided_text = cast(str, P.String)
    font: P.Font
    height = cast(float, P.Real)
    text = cast(str, P.String)
    tight_bounding_rect: P.Rect
    width = cast(float, P.Real)


class PsTouchPoint(P.PropSheet):
    ellipse_diameters: P.Size
    point_id = cast(int, P.Int)
    pressed = cast(bool, P.Bool)
    pressure = cast(float, P.Real)
    previous_x = cast(float, P.Real)
    previous_y = cast(float, P.Real)
    rotation = cast(float, P.Real)
    scene_x = cast(float, P.Real)
    scene_y = cast(float, P.Real)
    start_x = cast(float, P.Real)
    start_y = cast(float, P.Real)
    unique_id: P.Property
    velocity: P.Vector2D
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsTransition(P.PropSheet):
    animations = cast(list, P.List)
    enabled = cast(bool, P.Bool)
    from_ = cast(str, P.String)
    reversible = cast(bool, P.Bool)
    running = cast(bool, P.Bool)
    to = cast(str, P.String)


class PsTranslate(P.PropSheet):
    x = cast(float, P.Real)
    y = cast(float, P.Real)


class PsUniformAnimator(PsAnimator):
    uniform = cast(str, P.String)


class PsVector3dAnimation(PsPropertyAnimation):
    from_: P.Vector3D
    to: P.Vector3D


class PsViewTransition(P.PropSheet):
    pass


class PsWheelHandler(PsSinglePointHandler):
    accepted_buttons: P.Property
    accepted_devices: P.Property
    accepted_modifiers: P.Property
    accepted_pointer_types: P.Property
    active = cast(bool, P.Bool)
    active_timeout = cast(float, P.Real)
    cursor_shape: P.Property
    drag_threshold = cast(int, P.Int)
    enabled = cast(bool, P.Bool)
    grab_permissions: P.Property
    invertible = cast(bool, P.Bool)
    margin = cast(float, P.Real)
    orientation: P.Property
    parent: P.Property
    point: P.Property
    property = cast(str, P.String)
    rotation = cast(float, P.Real)
    rotation_scale = cast(float, P.Real)
    target: P.Property
    target_scale_multiplier = cast(float, P.Real)
    target_transform_around_cursor = cast(bool, P.Bool)


class PsXAnimator(PsAnimator):
    pass


class PsYAnimator(PsAnimator):
    pass


class PsAge(PsAffector):
    advance_position = cast(bool, P.Bool)
    life_left = cast(int, P.Int)


class PsAngleDirection(PsDirection):
    angle = cast(float, P.Real)
    angle_variation = cast(float, P.Real)
    magnitude = cast(float, P.Real)
    magnitude_variation = cast(float, P.Real)


class PsAttractor(PsAffector):
    affected_parameter: P.Property
    proportional_to_distance: P.Property


class PsCumulativeDirection(PsDirection):
    pass


class PsEllipseShape(PsShape):
    fill = cast(bool, P.Bool)


class PsEmitter(P.PropSheet):
    acceleration: P.Property
    emit_rate = cast(float, P.Real)
    enabled = cast(bool, P.Bool)
    end_size = cast(float, P.Real)
    group = cast(str, P.String)
    life_span = cast(int, P.Int)
    life_span_variation = cast(int, P.Int)
    maximum_emitted = cast(int, P.Int)
    shape: P.Property
    size = cast(float, P.Real)
    size_variation = cast(float, P.Real)
    start_time = cast(int, P.Int)
    system: P.Property
    velocity: P.Property
    velocity_from_movement: P.Property


class PsFriction(PsAffector):
    factor = cast(float, P.Real)
    threshold = cast(float, P.Real)


class PsGravity(PsAffector):
    angle = cast(float, P.Real)
    magnitude = cast(float, P.Real)


class PsGroupGoal(PsAffector):
    goal_state = cast(str, P.String)
    jump = cast(bool, P.Bool)


class PsImageParticle(PsParticlePainter):
    alpha = cast(float, P.Real)
    alpha_variation = cast(float, P.Real)
    auto_rotation = cast(bool, P.Bool)
    blue_variation = cast(float, P.Real)
    color = cast(str, P.Color)
    color_table = cast(str, P.Url)
    color_variation = cast(float, P.Real)
    entry_effect: P.Property
    green_variation = cast(float, P.Real)
    opacity_table = cast(str, P.Url)
    red_variation = cast(float, P.Real)
    rotation = cast(float, P.Real)
    rotation_variation = cast(float, P.Real)
    rotation_velocity = cast(float, P.Real)
    rotation_velocity_variation = cast(float, P.Real)
    size_table = cast(str, P.Url)
    source = cast(str, P.Url)
    sprites = cast(list, P.List)
    sprites_interpolate = cast(bool, P.Bool)
    status: P.Property
    x_vector: P.Property
    y_vector: P.Property


class PsItemParticle(PsParticlePainter):
    delegate: P.Property
    fade = cast(bool, P.Bool)


class PsLineShape(PsShape):
    mirrored = cast(bool, P.Bool)


class PsMaskShape(PsShape):
    source = cast(str, P.Url)


class PsParticle(P.PropSheet):
    alpha = cast(float, P.Real)
    auto_rotate = cast(bool, P.Bool)
    ax = cast(float, P.Real)
    ay = cast(float, P.Real)
    blue = cast(float, P.Real)
    current_size = cast(float, P.Real)
    end_size = cast(float, P.Real)
    green = cast(float, P.Real)
    initial_ax = cast(float, P.Real)
    initial_ay = cast(float, P.Real)
    initial_vx = cast(float, P.Real)
    initial_vy = cast(float, P.Real)
    initial_x = cast(float, P.Real)
    initial_y = cast(float, P.Real)
    life_left = cast(float, P.Real)
    life_span = cast(float, P.Real)
    red = cast(float, P.Real)
    rotation = cast(float, P.Real)
    rotation_velocity = cast(float, P.Real)
    start_size = cast(float, P.Real)
    t = cast(float, P.Real)
    update = cast(bool, P.Bool)
    vx = cast(float, P.Real)
    vy = cast(float, P.Real)
    x = cast(float, P.Real)
    x_deformation_vector_x = cast(float, P.Real)
    x_deformation_vector_y = cast(float, P.Real)
    y = cast(float, P.Real)
    y_deformation_vector_x = cast(float, P.Real)
    y_deformation_vector_y = cast(float, P.Real)


class PsParticleExtruder(P.PropSheet):
    pass


class PsParticleGroup(P.PropSheet):
    duration = cast(int, P.Int)
    duration_variation: P.Property
    name_ = cast(str, P.String)
    system: P.Property
    to: P.Property


class PsParticleSystem(P.PropSheet):
    empty = cast(bool, P.Bool)
    particle_states = cast(list, P.List)
    paused = cast(bool, P.Bool)
    running = cast(bool, P.Bool)


class PsPointDirection(PsDirection):
    x = cast(float, P.Real)
    x_variation = cast(float, P.Real)
    y = cast(float, P.Real)
    y_variation = cast(float, P.Real)


class PsRectangleShape(P.PropSheet):
    pass


class PsSpriteGoal(PsAffector):
    goal_state = cast(str, P.String)
    jump = cast(bool, P.Bool)
    system_states = cast(bool, P.Bool)


class PsTargetDirection(PsDirection):
    magnitude = cast(float, P.Real)
    magnitude_variation = cast(float, P.Real)
    proportional_magnitude = cast(bool, P.Bool)
    target_item: P.Property
    target_variation = cast(float, P.Real)
    target_x = cast(float, P.Real)
    target_y = cast(float, P.Real)


class PsTrailEmitter(P.PropSheet):
    emit_height = cast(float, P.Real)
    emit_rate_per_particle = cast(float, P.Real)
    emit_shape: P.Property
    emit_width = cast(float, P.Real)
    follow = cast(str, P.String)
    velocity_from_movement: P.Property


class PsTurbulence(PsAffector):
    noise_source = cast(str, P.Url)
    strength = cast(float, P.Real)


class PsWander(PsAffector):
    affected_parameter: P.Property
    pace = cast(float, P.Real)
    x_variance = cast(float, P.Real)
    y_variance = cast(float, P.Real)


class PsBoundaryRule(P.PropSheet):
    current_overshoot: P.Property
    easing: P.Property
    enabled = cast(bool, P.Bool)
    maximum: P.Property
    maximum_overshoot: P.Property
    minimum: P.Property
    minimum_overshoot: P.Property
    overshoot_filter: P.Property
    overshoot_scale: P.Property
    peak_overshoot: P.Property
    return_duration = cast(int, P.Int)


class PsGridLayout(PsItem):
    column_spacing = cast(float, P.Real)
    columns = cast(int, P.Int)
    flow = cast(int, P.Enumeration)
    layout_direction = cast(int, P.Enumeration)
    row_spacing = cast(float, P.Real)
    rows = cast(int, P.Int)


class PsLayout(P.PropSheet):
    pass


class PsStackLayout(PsItem):
    count = cast(int, P.Int)
    current_index = cast(int, P.Int)


class PsConicalGradient(PsShapeGradient):
    angle = cast(float, P.Real)
    center_x = cast(float, P.Real)
    center_y = cast(float, P.Real)


class PsLinearGradient(PsShapeGradient):
    x1 = cast(float, P.Real)
    x2 = cast(float, P.Real)
    y1 = cast(float, P.Real)
    y2 = cast(float, P.Real)


class PsRadialGradient(PsShapeGradient):
    center_radius = cast(float, P.Real)
    center_x = cast(float, P.Real)
    center_y = cast(float, P.Real)
    focal_radius = cast(float, P.Real)
    focal_x = cast(float, P.Real)
    focal_y = cast(float, P.Real)


class PsShapePath(PsPath):
    cap_style = cast(int, P.Enumeration)
    dash_offset = cast(float, P.Real)
    dash_pattern = cast(list, P.List)
    fill_color = cast(str, P.Color)
    fill_gradient: P.Property
    fill_rule = cast(int, P.Enumeration)
    join_style = cast(int, P.Enumeration)
    miter_limit = cast(int, P.Int)
    stroke_color = cast(str, P.Color)
    stroke_style = cast(int, P.Enumeration)
    stroke_width = cast(float, P.Real)


class PsFolderListModel(P.PropSheet):
    case_sensitive = cast(bool, P.Bool)
    count = cast(int, P.Int)
    folder = cast(str, P.Url)
    name_filters = cast(list, P.List)
    parent_folder = cast(str, P.Url)
    root_folder = cast(str, P.Url)
    show_dirs = cast(bool, P.Bool)
    show_dirs_first = cast(bool, P.Bool)
    show_dot_and_dot_dot = cast(bool, P.Bool)
    show_files = cast(bool, P.Bool)
    show_hidden = cast(bool, P.Bool)
    show_only_readable = cast(bool, P.Bool)
    sort_case_sensitive = cast(bool, P.Bool)
    sort_field = cast(int, P.Enumeration)
    sort_reversed = cast(bool, P.Bool)
    status = cast(int, P.Enumeration)


class PsSettings(P.PropSheet):
    category = cast(str, P.String)
    file_name = cast(str, P.String)


class PsWavefrontMesh(P.PropSheet):
    last_error = cast(int, P.Enumeration)
    projection_plane_v: P.Vector3D
    projection_plane_w: P.Vector3D
    source = cast(str, P.Url)


class PsAdditiveColorGradient(P.PropSheet):
    bottom_color: P.Vector3D
    top_color: P.Vector3D


class PsBlur(P.PropSheet):
    amount = cast(float, P.Real)


class PsBrushStrokes(P.PropSheet):
    brush_angle = cast(float, P.Real)
    brush_length = cast(float, P.Real)
    brush_size = cast(float, P.Real)
    noise_sample: P.Property


class PsChromaticAberration(P.PropSheet):
    aberration_amount = cast(float, P.Real)
    focus_depth = cast(float, P.Real)
    mask_texture: P.Property


class PsColorMaster(P.PropSheet):
    blue_strength = cast(float, P.Real)
    green_strength = cast(float, P.Real)
    red_strength = cast(float, P.Real)
    saturation = cast(float, P.Real)


class PsDepthOfFieldHQBlur(P.PropSheet):
    blur_amount = cast(float, P.Real)
    focus_distance = cast(float, P.Real)
    focus_range = cast(float, P.Real)


class PsDesaturate(P.PropSheet):
    amount = cast(float, P.Real)


class PsDistortionRipple(P.PropSheet):
    center: P.Vector2D
    distortion_height = cast(float, P.Real)
    distortion_phase = cast(float, P.Real)
    distortion_width = cast(float, P.Real)
    radius = cast(float, P.Real)


class PsDistortionSphere(P.PropSheet):
    center: P.Vector2D
    distortion_height = cast(float, P.Real)
    radius = cast(float, P.Real)


class PsDistortionSpiral(P.PropSheet):
    center: P.Vector2D
    distortion_strength = cast(float, P.Real)
    radius = cast(float, P.Real)


class PsEdgeDetect(P.PropSheet):
    edge_strength = cast(float, P.Real)


class PsEmboss(P.PropSheet):
    amount = cast(float, P.Real)


class PsFlip(P.PropSheet):
    flip_horizontally = cast(bool, P.Bool)
    flip_vertically = cast(bool, P.Bool)


class PsFxaa(P.PropSheet):
    pass


class PsGaussianBlur(P.PropSheet):
    amount = cast(float, P.Real)


class PsHDRBloomTonemap(P.PropSheet):
    bloom_threshold = cast(float, P.Real)
    blur_falloff = cast(float, P.Real)
    channel_threshold = cast(float, P.Real)
    exposure = cast(float, P.Real)
    gamma = cast(float, P.Real)
    tonemapping_lerp = cast(float, P.Real)


class PsMotionBlur(P.PropSheet):
    blur_quality = cast(float, P.Real)
    fade_amount = cast(float, P.Real)


class PsScatter(P.PropSheet):
    amount = cast(float, P.Real)
    direction = cast(int, P.Int)
    noise_sample: P.Property
    randomize = cast(bool, P.Bool)


class PsSCurveTonemap(P.PropSheet):
    contrast_boost = cast(float, P.Real)
    exposure_value = cast(float, P.Real)
    gamma_value = cast(float, P.Real)
    saturation_level = cast(float, P.Real)
    shoulder_emphasis = cast(float, P.Real)
    shoulder_slope = cast(float, P.Real)
    toe_emphasis = cast(float, P.Real)
    toe_slope = cast(float, P.Real)
    use_exposure = cast(bool, P.Bool)
    white_point = cast(float, P.Real)


class PsTiltShift(P.PropSheet):
    blur_amount = cast(float, P.Real)
    focus_position = cast(float, P.Real)
    focus_width = cast(float, P.Real)
    is_inverted = cast(bool, P.Bool)
    is_vertical = cast(bool, P.Bool)


class PsVignette(P.PropSheet):
    vignette_color: P.Vector3D
    vignette_radius = cast(float, P.Real)
    vignette_strength = cast(float, P.Real)


class PsAttractor3D(PsAffector3D):
    duration = cast(int, P.Int)
    duration_variation = cast(int, P.Int)
    hide_at_end = cast(bool, P.Bool)
    position_variation: P.Vector3D
    shape: P.Property


class PsEmitBurst3D(PsQtObject):
    amount = cast(int, P.Int)
    duration = cast(int, P.Int)
    time = cast(int, P.Int)


class PsGravity3D(PsAffector3D):
    direction: P.Vector3D
    magnitude = cast(float, P.Real)


class PsModelParticle3D(PsParticle3D):
    delegate: P.Property


class PsParticleShape3D(PsQtObject):
    shape_type = cast(int, P.Enumeration)
    extents: P.Vector3D
    fill = cast(bool, P.Bool)
    type: P.Property


class PsParticleSystem3D(PsNode):
    logging = cast(bool, P.Bool)
    logging_data: P.Property
    paused = cast(bool, P.Bool)
    running = cast(bool, P.Bool)
    seed = cast(int, P.Int)
    start_time = cast(int, P.Int)
    time = cast(int, P.Int)
    use_random_seed = cast(bool, P.Bool)


class PsParticleSystem3DLogging(PsQtObject):
    logging_interval = cast(int, P.Int)
    particles_max = cast(int, P.Int)
    particles_used = cast(int, P.Int)
    time = cast(float, P.Real)
    time_average = cast(float, P.Real)
    updates = cast(int, P.Int)


class PsPointRotator3D(PsAffector3D):
    direction: P.Vector3D
    magnitude = cast(float, P.Real)
    pivot_point: P.Vector3D


class PsSpriteParticle3D(PsParticle3D):
    blend_mode = cast(int, P.Enumeration)
    billboard = cast(bool, P.Bool)
    blend_mode: P.Property
    color_table: P.Property
    frame_count = cast(int, P.Int)
    interpolate = cast(bool, P.Bool)
    particle_scale = cast(float, P.Real)
    sprite: P.Property


class PsTargetDirection3D(PsDirection3D):
    magnitude = cast(float, P.Real)
    magnitude_variation = cast(float, P.Real)
    normalized = cast(bool, P.Bool)
    position: P.Vector3D
    position_variation: P.Vector3D


class PsTrailEmitter3D(PsParticleEmitter3D):
    follow: P.Property


class PsVectorDirection3D(PsDirection3D):
    direction: P.Vector3D
    direction_variation: P.Vector3D


class PsWander3D(PsAffector3D):
    global_amount: P.Vector3D
    global_pace: P.Vector3D
    global_pace_start: P.Vector3D
    unique_amount: P.Vector3D
    unique_amount_variation = cast(float, P.Real)
    unique_pace: P.Vector3D
    unique_pace_variation = cast(float, P.Real)


class PsAxisHelper(PsNode):
    enable_axis_lines = cast(bool, P.Bool)
    enable_xy_grid = cast(bool, P.Bool)
    enable_xz_grid = cast(bool, P.Bool)
    enable_yz_grid = cast(bool, P.Bool)
    grid_color = cast(str, P.Color)
    grid_opacity = cast(float, P.Real)


class PsDebugView(PsRectangle):
    source: P.Var


class PsGridGeometry(PsGeometry):
    horizontal_lines = cast(int, P.Int)
    horizontal_step = cast(float, P.Real)
    vertical_lines = cast(int, P.Int)
    vertical_step = cast(float, P.Real)


class PsInstanceRange(PsObject3D):
    from_: P.Property
    proportional = cast(bool, P.Bool)
    to: P.Property


class PsRandomInstancing(PsInstancing):
    color: P.Property
    custom_data: P.Property
    instance_count = cast(int, P.Int)
    position: P.Property
    random_seed = cast(int, P.Int)
    rotation: P.Property
    scale: P.Property


class PsWasdController(PsItem):
    accepted_buttons = cast(int, P.Enumeration)
    back_speed = cast(float, P.Real)
    controlled_object: P.Property
    down_speed = cast(float, P.Real)
    forward_speed = cast(float, P.Real)
    inputs_need_processing = cast(bool, P.Bool)
    keys_enabled = cast(bool, P.Bool)
    left_speed = cast(float, P.Real)
    mouse_enabled = cast(bool, P.Bool)
    right_speed = cast(float, P.Real)
    shift_speed = cast(float, P.Real)
    speed = cast(float, P.Real)
    up_speed = cast(float, P.Real)
    x_invert = cast(bool, P.Bool)
    x_speed = cast(float, P.Real)
    y_invert = cast(bool, P.Bool)
    y_speed = cast(float, P.Real)


class PsBounds(P.PropSheet):
    maximum: P.Vector3D
    minimum: P.Vector3D


class PsBufferInput(PsCommand):
    buffer: P.Property
    sampler = cast(str, P.String)


class PsCustomCamera(PsCamera):
    projection: P.Matrix4x4


class PsCustomMaterial(PsMaterial):
    always_dirty = cast(bool, P.Bool)
    destination_blend = cast(int, P.Enumeration)
    fragment_shader = cast(str, P.Url)
    line_width = cast(float, P.Real)
    shading_mode = cast(int, P.Enumeration)
    source_blend = cast(int, P.Enumeration)
    vertex_shader = cast(str, P.Url)


class PsDefaultMaterial(PsMaterial):
    blend_mode = cast(int, P.Enumeration)
    bump_amount = cast(float, P.Real)
    bump_map: P.Property
    diffuse_color = cast(str, P.Color)
    diffuse_light_wrap = cast(float, P.Real)
    diffuse_map: P.Property
    emissive_color = cast(str, P.Color)
    emissive_factor = cast(float, P.Real)
    emissive_map: P.Property
    fresnel_power = cast(float, P.Real)
    index_of_refraction = cast(float, P.Real)
    lighting = cast(int, P.Enumeration)
    line_width = cast(float, P.Real)
    normal_map: P.Property
    opacity = cast(float, P.Real)
    opacity_channel = cast(int, P.Enumeration)
    opacity_map: P.Property
    point_size = cast(float, P.Real)
    roughness_channel = cast(int, P.Enumeration)
    roughness_map: P.Property
    specular_amount = cast(float, P.Real)
    specular_map: P.Property
    specular_model = cast(int, P.Enumeration)
    specular_reflection_map: P.Property
    specular_roughness = cast(float, P.Real)
    specular_tint = cast(str, P.Color)
    translucency_channel = cast(int, P.Enumeration)
    translucency_map: P.Property
    translucent_falloff = cast(float, P.Real)
    vertex_colors_enabled = cast(bool, P.Bool)


class PsFrustumCamera(PsPerspectiveCamera):
    bottom = cast(float, P.Real)
    left = cast(float, P.Real)
    right = cast(float, P.Real)
    top = cast(float, P.Real)


class PsInstanceList(PsInstancing):
    instances = cast(list, P.List)


class PsInstanceListEntry(PsObject3D):
    color: P.Vector3D
    custom_data: P.Vector3D
    euler_rotation: P.Vector3D
    position: P.Vector3D
    rotation: P.Quaternion
    scale: P.Vector3D


class PsLoader3D(PsNode):
    active = cast(bool, P.Bool)
    asynchronous = cast(bool, P.Bool)
    item: P.Property
    progress = cast(float, P.Real)
    source = cast(str, P.Url)
    source_component: P.Property
    status = cast(int, P.Enumeration)


class PsModel(PsNode):
    bounds: P.Property
    casts_shadows = cast(bool, P.Bool)
    geometry: P.Property
    instance_root: P.Property
    instancing: P.Property
    inverse_bind_poses = cast(list, P.List)
    materials = cast(list, P.List)
    morph_targets = cast(list, P.List)
    pickable = cast(bool, P.Bool)
    receives_shadows = cast(bool, P.Bool)
    skeleton: P.Property
    source = cast(str, P.Url)


class PsOrthographicCamera(PsCamera):
    clip_far = cast(float, P.Real)
    clip_near = cast(float, P.Real)
    horizontal_magnification = cast(float, P.Real)
    vertical_magnification = cast(float, P.Real)


class PsPass(P.PropSheet):
    commands = cast(list, P.List)
    output: P.Property
    shaders = cast(list, P.List)


class PsPickResult(P.PropSheet):
    distance = cast(float, P.Number)
    object_hit: P.Property
    scene_position: P.Vector3D
    uv_position: P.Vector2D


class PsPrincipledMaterial(PsMaterial):
    alpha_cutoff = cast(float, P.Real)
    alpha_mode = cast(int, P.Enumeration)
    base_color = cast(str, P.Color)
    base_color_map: P.Property
    blend_mode = cast(int, P.Enumeration)
    emissive_color = cast(str, P.Color)
    emissive_map: P.Property
    lighting = cast(int, P.Enumeration)
    line_width = cast(float, P.Real)
    metalness = cast(float, P.Real)
    metalness_channel = cast(int, P.Enumeration)
    metalness_map: P.Property
    normal_map: P.Property
    normal_strength = cast(float, P.Real)
    occlusion_amount = cast(float, P.Real)
    occlusion_channel = cast(int, P.Enumeration)
    occlusion_map: P.Property
    opacity = cast(float, P.Real)
    opacity_channel = cast(int, P.Enumeration)
    opacity_map: P.Property
    point_size = cast(float, P.Real)
    roughness = cast(float, P.Real)
    roughness_channel = cast(int, P.Enumeration)
    roughness_map: P.Property
    specular_amount = cast(float, P.Real)
    specular_map: P.Property
    specular_reflection_map: P.Property
    specular_tint = cast(float, P.Real)


class PsRenderStats(P.PropSheet):
    fps = cast(int, P.Int)
    frame_time = cast(float, P.Number)
    max_frame_time = cast(float, P.Number)
    render_prepare_time = cast(float, P.Number)
    render_time = cast(float, P.Number)
    sync_time = cast(float, P.Number)


class PsRepeater3D(PsNode):
    count = cast(int, P.Int)
    delegate: P.Property
    model: P.Property


class PsSceneEnvironment(PsObject3D):
    antialiasing_mode = cast(int, P.Enumeration)
    antialiasing_quality = cast(int, P.Enumeration)
    ao_bias = cast(float, P.Number)
    ao_distance = cast(float, P.Number)
    ao_dither = cast(bool, P.Bool)
    ao_sample_rate = cast(int, P.Int)
    ao_softness = cast(float, P.Number)
    ao_strength = cast(float, P.Number)
    background_mode = cast(int, P.Enumeration)
    clear_color = cast(str, P.Color)
    depth_pre_pass_enabled = cast(bool, P.Bool)
    depth_test_enabled = cast(bool, P.Bool)
    effects = cast(list, P.List)
    light_probe: P.Property
    probe_exposure = cast(float, P.Number)
    probe_horizon = cast(float, P.Number)
    probe_orientation: P.Vector3D
    temporal_aa_enabled = cast(bool, P.Bool)
    temporal_aa_strength = cast(float, P.Number)
    tonemap_mode = cast(int, P.Enumeration)


class PsSetUniformValue(PsCommand):
    target = cast(str, P.String)
    value: P.Property


class PsShader(P.PropSheet):
    shader = cast(str, P.Url)
    stage = cast(int, P.Enumeration)


class PsTexture(PsObject3D):
    flip_v = cast(bool, P.Bool)
    generate_mipmaps = cast(bool, P.Bool)
    index_uv = cast(int, P.Int)
    mag_filter = cast(int, P.Enumeration)
    mapping_mode = cast(int, P.Enumeration)
    min_filter = cast(int, P.Enumeration)
    mip_filter = cast(int, P.Enumeration)
    pivot_u = cast(float, P.Number)
    pivot_v = cast(float, P.Number)
    position_u = cast(float, P.Number)
    position_v = cast(float, P.Number)
    rotation_uv = cast(float, P.Number)
    scale_u = cast(float, P.Number)
    scale_v = cast(float, P.Number)
    source = cast(str, P.Url)
    source_item: P.Property
    texture_data: P.Property
    tiling_mode_horizontal = cast(int, P.Enumeration)
    tiling_mode_vertical = cast(int, P.Enumeration)


class PsTextureData(PsObject3D):
    pass


class PsTextureInput(P.PropSheet):
    enabled = cast(bool, P.Bool)
    texture: P.Property


class PsView3D(P.PropSheet):
    camera: P.Property
    environment: P.Property
    import_scene: P.Property
    render_mode = cast(int, P.Enumeration)
    render_stats: P.Property
    scene: P.Property


class PsBackspaceKey(PsBaseKey):
    pass


class PsChangeLanguageKey(PsBaseKey):
    custom_layouts_only = cast(bool, P.Bool)


class PsEnterKeyAction(P.PropSheet):
    pass


class PsFillerKey(PsBaseKey):
    pass


class PsFlickKey(PsKey):
    pass


class PsHandwritingInputPanel(PsItem):
    active = cast(bool, P.Bool)
    available = cast(bool, P.Bool)
    input_panel: P.Var


class PsHandwritingModeKey(PsKey):
    pass


class PsHideKeyboardKey(PsBaseKey):
    pass


class PsInputContext(P.PropSheet):
    anchor_position = cast(int, P.Int)
    anchor_rect_intersects_clip_rect = cast(bool, P.Bool)
    anchor_rectangle: P.Rect
    animating = cast(bool, P.Bool)
    caps_lock_active = cast(bool, P.Bool)
    cursor_position = cast(int, P.Int)
    cursor_rect_intersects_clip_rect = cast(bool, P.Bool)
    cursor_rectangle: P.Rect
    input_engine: P.Property
    input_method_hints = cast(int, P.Int)
    keyboard_observer: P.Property
    locale = cast(str, P.String)
    preedit_text = cast(str, P.String)
    selected_text = cast(str, P.String)
    selection_control_visible = cast(bool, P.Bool)
    shift_active = cast(bool, P.Bool)
    surrounding_text = cast(str, P.String)
    uppercase = cast(bool, P.Bool)


class PsInputEngine(P.PropSheet):
    active_key = cast(int, P.Int)
    input_method: P.Property
    input_mode = cast(int, P.Int)
    input_modes = cast(list, P.List)
    pattern_recognition_modes = cast(list, P.List)
    previous_key = cast(int, P.Int)
    word_candidate_list_model: P.Property
    word_candidate_list_visible_hint = cast(bool, P.Bool)


class PsInputMethod(P.PropSheet):
    input_context: P.Property
    input_engine: P.Property


class PsInputModeKey(PsKey):
    input_mode_count = cast(int, P.Int)
    input_mode_name_list: P.Var
    input_modes: P.Var


class PsInputPanel(PsItem):
    active = cast(bool, P.Bool)
    external_language_switch_enabled = cast(bool, P.Bool)


class PsKeyboardColumn(PsColumnLayout):
    key_weight = cast(float, P.Real)
    small_text_visible = cast(bool, P.Bool)


class PsKeyboardLayout(PsColumnLayout):
    input_method: P.Var
    input_mode = cast(int, P.Int)
    key_weight = cast(float, P.Real)
    shared_layouts: P.Var
    small_text_visible = cast(bool, P.Bool)


class PsKeyboardLayoutLoader(PsLoader):
    input_method: P.Var
    input_mode = cast(int, P.Int)
    shared_layouts: P.Var


class PsKeyboardObserver(P.PropSheet):
    layout: P.Property


class PsKeyboardRow(PsRowLayout):
    key_weight = cast(float, P.Real)
    small_text_visible = cast(bool, P.Bool)


class PsModeKey(PsKey):
    mode = cast(bool, P.Bool)


class PsNumberKey(PsKey):
    pass


class PsSelectionListModel(P.PropSheet):
    pass


class PsShiftHandler(P.PropSheet):
    auto_capitalization_enabled = cast(bool, P.Bool)
    sentence_ending_characters = cast(str, P.String)
    toggle_shift_enabled = cast(bool, P.Bool)


class PsShiftKey(PsBaseKey):
    pass


class PsSpaceKey(PsKey):
    pass


class PsSymbolModeKey(PsKey):
    pass


class PsTrace(P.PropSheet):
    canceled = cast(bool, P.Bool)
    channels = cast(list, P.List)
    final = cast(bool, P.Bool)
    opacity: P.Property
    trace_id = cast(int, P.Int)


class PsTraceInputArea(PsMultiPointTouchArea):
    bounding_box: P.Rect
    canvas_type = cast(str, P.String)
    horizontal_rulers: P.Var
    pattern_recognition_mode = cast(int, P.Int)
    vertical_rulers: P.Var


class PsTraceInputKey(PsItem):
    bounding_box: P.Property
    canvas_type: P.Property
    horizontal_rulers: P.Property
    pattern_recognition_mode: P.Property
    vertical_rulers: P.Property
    weight = cast(float, P.Real)


class PsVirtualKeyboard(P.PropSheet):
    pass


class PsKeyboardStyle(PsQtObject):
    alternate_keys_list_background: P.Property
    alternate_keys_list_bottom_margin = cast(float, P.Real)
    alternate_keys_list_delegate: P.Property
    alternate_keys_list_highlight: P.Property
    alternate_keys_list_item_height = cast(float, P.Real)
    alternate_keys_list_item_width = cast(float, P.Real)
    alternate_keys_list_left_margin = cast(float, P.Real)
    alternate_keys_list_right_margin = cast(float, P.Real)
    alternate_keys_list_top_margin = cast(float, P.Real)
    backspace_key_panel: P.Property
    character_preview_delegate: P.Property
    character_preview_margin = cast(float, P.Real)
    enter_key_panel: P.Property
    full_screen_input_background: P.Property
    full_screen_input_color = cast(str, P.Color)
    full_screen_input_container_background: P.Property
    full_screen_input_cursor: P.Property
    full_screen_input_font: P.Font
    full_screen_input_margins = cast(float, P.Real)
    full_screen_input_padding = cast(float, P.Real)
    full_screen_input_password_character = cast(str, P.String)
    full_screen_input_selected_text_color = cast(str, P.Color)
    full_screen_input_selection_color = cast(str, P.Color)
    handwriting_key_panel: P.Property
    hide_key_panel: P.Property
    key_panel: P.Property
    keyboard_background: P.Property
    keyboard_design_height = cast(float, P.Real)
    keyboard_design_width = cast(float, P.Real)
    keyboard_height = cast(float, P.Real)
    keyboard_relative_bottom_margin = cast(float, P.Real)
    keyboard_relative_left_margin = cast(float, P.Real)
    keyboard_relative_right_margin = cast(float, P.Real)
    keyboard_relative_top_margin = cast(float, P.Real)
    language_key_panel: P.Property
    language_list_add: P.Property
    language_list_background: P.Property
    language_list_delegate: P.Property
    language_list_highlight: P.Property
    language_list_remove: P.Property
    language_popup_list_enabled = cast(bool, P.Bool)
    mode_key_panel: P.Property
    navigation_highlight: P.Property
    popup_list_add: P.Property
    popup_list_background: P.Property
    popup_list_delegate: P.Property
    popup_list_highlight: P.Property
    popup_list_remove: P.Property
    scale_hint = cast(float, P.Real)
    selection_handle: P.Property
    selection_list_add: P.Property
    selection_list_background: P.Property
    selection_list_delegate: P.Property
    selection_list_height = cast(float, P.Real)
    selection_list_highlight: P.Property
    selection_list_remove: P.Property
    shift_key_panel: P.Property
    space_key_panel: P.Property
    symbol_key_panel: P.Property
    trace_canvas_delegate: P.Property
    trace_input_key_panel_delegate: P.Property


class PsKeyIcon(PsItem):
    color: P.Property
    source: P.Property


class PsKeyPanel(PsItem):
    control: P.Property
    sound_effect = cast(str, P.Url)


class PsSelectionListItem(PsItem):
    sound_effect = cast(str, P.Url)


class PsTraceCanvas(PsCanvas):
    auto_destroy = cast(bool, P.Bool)
    auto_destroy_delay = cast(int, P.Int)
    render_function: P.Var
    trace: P.Property


class PsTraceInputKeyPanel(PsItem):
    control: P.Property
    trace_margins = cast(float, P.Real)


class PsVirtualKeyboardSettings(P.PropSheet):
    active_locales = cast(list, P.List)
    available_locales = cast(list, P.List)
    default_dictionary_disabled = cast(bool, P.Bool)
    default_input_method_disabled = cast(bool, P.Bool)
    full_screen_mode = cast(bool, P.Bool)
    handwriting_mode_disabled = cast(bool, P.Bool)
    hwr_timeout_for_alphabetic = cast(bool, P.Bool)
    hwr_timeout_for_cjk = cast(bool, P.Bool)
    input_method_hints = cast(int, P.Int)
    locale = cast(str, P.String)
    style_name = cast(str, P.String)
    user_data_path = cast(bool, P.Bool)
    word_candidate_list: P.WordCandidateList


class PsBinding(P.PropSheet):
    delayed = cast(bool, P.Bool)
    property = cast(str, P.String)
    restore_mode = cast(int, P.Enumeration)
    target: P.Property
    value: P.Property
    when = cast(bool, P.Bool)


class PsConnections(P.PropSheet):
    enabled = cast(bool, P.Bool)
    ignore_unknown_signals = cast(bool, P.Bool)
    target: P.Property


class PsDate(P.PropSheet):
    pass


class PsLocale(P.PropSheet):
    am_text = cast(str, P.String)
    decimal_point = cast(str, P.String)
    exponential = cast(str, P.String)
    first_day_of_week = cast(int, P.Enumeration)
    group_separator = cast(str, P.String)
    measurement_system = cast(int, P.Enumeration)
    name_ = cast(str, P.String)
    native_country_name = cast(str, P.String)
    native_language_name = cast(str, P.String)
    negative_sign = cast(str, P.String)
    number_options = cast(int, P.Enumeration)
    percent = cast(str, P.String)
    pm_text = cast(str, P.String)
    positive_sign = cast(str, P.String)
    text_direction = cast(int, P.Enumeration)
    ui_languages: P.Property
    week_days: P.Property
    zero_digit = cast(str, P.String)


class PsLoggingCategory(P.PropSheet):
    default_log_level = cast(int, P.Enumeration)
    name_ = cast(str, P.String)


class PsNumber(P.PropSheet):
    pass


class PsQt(P.PropSheet):
    application: P.Property
    input_method: P.Property
    platform: P.Property
    style_hints: P.Property
    ui_language = cast(str, P.String)


class PsString(P.PropSheet):
    pass


class PsTimer(P.PropSheet):
    interval = cast(int, P.Int)
    repeat = cast(bool, P.Bool)
    running = cast(bool, P.Bool)
    triggered_on_start = cast(bool, P.Bool)


class PsColorDialog(PsDialog):
    color = cast(str, P.Color)
    current_color = cast(str, P.Color)
    options: P.Property


class PsFileDialog(PsDialog):
    accept_label = cast(str, P.String)
    current_file = cast(str, P.Url)
    current_files = cast(list, P.List)
    default_suffix = cast(str, P.String)
    file = cast(str, P.Url)
    file_mode = cast(int, P.Enumeration)
    files = cast(list, P.List)
    folder = cast(str, P.Url)
    name_filters = cast(list, P.List)
    options: P.Property
    reject_label = cast(str, P.String)
    selected_name_filter: P.SelectedNameFilter


class PsFolderDialog(PsDialog):
    accept_label = cast(str, P.String)
    current_folder = cast(str, P.Url)
    folder = cast(str, P.Url)
    options: P.Property
    reject_label = cast(str, P.String)


class PsFontDialog(PsDialog):
    current_font: P.Font
    font: P.Font
    options: P.Property


class PsMenuItemGroup(PsQtObject):
    checked_item: P.Property
    enabled = cast(bool, P.Bool)
    exclusive = cast(bool, P.Bool)
    items = cast(list, P.List)
    visible = cast(bool, P.Bool)


class PsMessageDialog(PsDialog):
    buttons: P.Property
    detailed_text = cast(str, P.String)
    informative_text = cast(str, P.String)
    text = cast(str, P.String)


class PsStandardPaths(PsQtObject):
    pass


class PsSystemTrayIcon(PsQtObject):
    available = cast(bool, P.Bool)
    geometry: P.Rect
    icon: P.Icon
    menu: P.Property
    supports_messages = cast(bool, P.Bool)
    tooltip = cast(str, P.String)
    visible = cast(bool, P.Bool)


class PsDelegateChoice(P.PropSheet):
    column = cast(int, P.Int)
    delegate: P.Property
    index = cast(int, P.Int)
    role_value: P.Property
    row = cast(int, P.Int)


class PsDelegateChooser(P.PropSheet):
    choices = cast(list, P.List)
    role = cast(str, P.String)


class PsTableModel(P.PropSheet):
    column_count = cast(int, P.Int)
    row_count = cast(int, P.Int)
    rows: P.Property


class PsTableModelColumn(P.PropSheet):
    pass


class PsDelegateModel(P.PropSheet):
    count = cast(int, P.Int)
    delegate: P.Property
    filter_on_group = cast(str, P.String)
    groups = cast(list, P.List)
    items: P.Property
    model: P.Property
    parts: P.Property
    persisted_items: P.Property
    root_index: P.Property


class PsDelegateModelGroup(P.PropSheet):
    count = cast(int, P.Int)
    include_by_default = cast(bool, P.Bool)
    name_ = cast(str, P.String)


class PsInstantiator(P.PropSheet):
    active = cast(bool, P.Bool)
    asynchronous = cast(bool, P.Bool)
    count = cast(int, P.Int)
    delegate: P.Property
    model: P.Property
    object: P.Property


class PsItemSelectionModel(P.PropSheet):
    current_index: P.Property
    has_selection = cast(bool, P.Bool)
    model: P.Property
    selected_indexes: P.Property
    selection: P.Property


class PsListElement(P.PropSheet):
    pass


class PsListModel(P.PropSheet):
    count = cast(int, P.Int)
    dynamic_roles = cast(bool, P.Bool)


class PsObjectModel(P.PropSheet):
    count = cast(int, P.Int)


class PsPackage(P.PropSheet):
    pass


class PsEventConnection(P.PropSheet):
    events: P.Property
    state_machine: P.Property


class PsInvokedServices(P.PropSheet):
    children: P.Var
    qml_children = cast(list, P.List)
    state_machine: P.Property


class PsScxmlStateMachine(P.PropSheet):
    data_model: P.Property
    initial_values: P.Var
    initialized = cast(bool, P.Bool)
    invoked = cast(bool, P.Bool)
    invoked_services = cast(list, P.List)
    loader: P.Property
    name_ = cast(str, P.String)
    parse_errors: P.Var
    running = cast(bool, P.Bool)
    session_id = cast(str, P.String)


class PsStateMachineLoader(P.PropSheet):
    source = cast(str, P.Url)
    state_machine: P.Property


class PsIdleInhibitManagerV1(P.PropSheet):
    pass


class PsQtTextInputMethodManager(P.PropSheet):
    pass


class PsShellSurface(P.PropSheet):
    window_type: P.Property


class PsShellSurfaceItem(PsWaylandQuickItem):
    auto_create_popup_items = cast(bool, P.Bool)
    move_item: P.Property
    shell_surface: P.Property


class PsWaylandClient(P.PropSheet):
    compositor: P.Property
    group_id = cast(int, P.Int)
    process_id = cast(int, P.Int)
    user_id = cast(int, P.Int)


class PsWaylandCompositor(P.PropSheet):
    additional_shm_formats = cast(list, P.List)
    created = cast(bool, P.Bool)
    default_output: P.Property
    default_seat: P.Property
    extensions = cast(list, P.List)
    retained_selection = cast(bool, P.Bool)
    socket_name = cast(str, P.String)
    use_hardware_integration_extension = cast(bool, P.Bool)


class PsWaylandHardwareLayer(P.PropSheet):
    stacking_level = cast(int, P.Int)


class PsWaylandOutput(P.PropSheet):
    automatic_frame_callback = cast(bool, P.Bool)
    available_geometry: P.Rect
    compositor: P.Property
    geometry: P.Rect
    manufacturer = cast(str, P.String)
    model = cast(str, P.String)
    physical_size: P.Size
    position: P.Point
    scale_factor = cast(int, P.Int)
    size_follows_window = cast(bool, P.Bool)
    subpixel: P.Property
    transform: P.Property
    window: P.Property


class PsWaylandSeat(P.PropSheet):
    pass


class PsWaylandSurface(P.PropSheet):
    buffer_scale: P.Size
    buffer_size: P.Size
    client: P.Property
    content_orientation: P.Property
    cursor_surface = cast(bool, P.Bool)
    destination_size: P.Size
    has_content = cast(bool, P.Bool)
    inhibits_idle = cast(bool, P.Bool)
    origin: P.Property
    source_geometry: P.Rect
    use_texture_alpha = cast(bool, P.Bool)


class PsWaylandView(P.PropSheet):
    allow_discard_front_buffer = cast(bool, P.Bool)
    buffer_locked = cast(bool, P.Bool)
    output: P.Property
    surface: P.Property


class PsKeyframe(PsQtObject):
    easing: P.Var
    frame = cast(float, P.Double)
    value: P.Var


class PsKeyframeGroup(PsQtObject):
    keyframe_source = cast(str, P.Url)
    keyframes = cast(list, P.List)
    property = cast(str, P.String)
    target: P.Var


class PsTimeline(PsQtObject):
    animations = cast(list, P.List)
    current_frame = cast(float, P.Double)
    enabled = cast(bool, P.Bool)
    end_frame = cast(float, P.Double)
    keyframes = cast(list, P.List)
    start_frame = cast(float, P.Double)


class PsTimelineAnimation(PsNumberAnimation):
    ping_pong = cast(bool, P.Bool)


class PsLottieAnimation(PsItem):
    auto_play = cast(bool, P.Bool)
    direction = cast(int, P.Enumeration)
    end_frame = cast(int, P.Int)
    frame_rate = cast(int, P.Int)
    loops = cast(int, P.Int)
    quality = cast(int, P.Enumeration)
    source = cast(str, P.Url)
    start_frame = cast(int, P.Int)
    status = cast(int, P.Enumeration)


class PsSignalSpy(PsItem):
    count = cast(int, P.Int)
    signal_arguments = cast(list, P.List)
    signal_name = cast(str, P.String)
    target: P.Var
    valid = cast(bool, P.Bool)


class PsTestCase(PsItem):
    completed = cast(bool, P.Bool)
    name_ = cast(str, P.String)
    optional = cast(bool, P.Bool)
    running = cast(bool, P.Bool)
    when = cast(bool, P.Bool)
    window_shown = cast(bool, P.Bool)


class PsTouchEventSequence(P.PropSheet):
    pass
